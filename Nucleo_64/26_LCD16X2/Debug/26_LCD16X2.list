
26_LCD16X2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001efc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002008  08002008  00003008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002078  08002078  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002078  08002078  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002078  08002078  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002078  08002078  00003078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002080  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800208c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800208c  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ea3  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000150d  00000000  00000000  0000aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  0000c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d6  00000000  00000000  0000ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161f7  00000000  00000000  0000cf2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000849d  00000000  00000000  00023125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e7d9  00000000  00000000  0002b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000184c  00000000  00000000  000a9de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000ab62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ff0 	.word	0x08001ff0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ff0 	.word	0x08001ff0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fee2 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c8 	bl	80002ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f89c 	bl	8000298 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD16X2_Init(MyLCD);
 8000160:	2000      	movs	r0, #0
 8000162:	f000 fc15 	bl	8000990 <LCD16X2_Init>
  LCD16X2_Clear(MyLCD);
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fb92 	bl	8000890 <LCD16X2_Clear>
  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 800016c:	2201      	movs	r2, #1
 800016e:	2101      	movs	r1, #1
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fbcd 	bl	8000910 <LCD16X2_Set_Cursor>
  LCD16X2_Write_String(MyLCD, "Hello");
 8000176:	4923      	ldr	r1, [pc, #140]	@ (8000204 <main+0xb8>)
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fe87 	bl	8000e8c <LCD16X2_Write_String>
  LCD16X2_Set_Cursor(MyLCD, 2, 1);
 800017e:	2201      	movs	r2, #1
 8000180:	2102      	movs	r1, #2
 8000182:	2000      	movs	r0, #0
 8000184:	f000 fbc4 	bl	8000910 <LCD16X2_Set_Cursor>
  LCD16X2_Write_String(MyLCD, "World!");
 8000188:	491f      	ldr	r1, [pc, #124]	@ (8000208 <main+0xbc>)
 800018a:	2000      	movs	r0, #0
 800018c:	f000 fe7e 	bl	8000e8c <LCD16X2_Write_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD16X2_SR(MyLCD);	HAL_Delay(1500);
 8000190:	2000      	movs	r0, #0
 8000192:	f000 feae 	bl	8000ef2 <LCD16X2_SR>
 8000196:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800019a:	f000 ff1f 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SR(MyLCD);	HAL_Delay(1500);
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fea7 	bl	8000ef2 <LCD16X2_SR>
 80001a4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001a8:	f000 ff18 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SR(MyLCD);	HAL_Delay(1500);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fea0 	bl	8000ef2 <LCD16X2_SR>
 80001b2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001b6:	f000 ff11 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SR(MyLCD);	HAL_Delay(1500);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fe99 	bl	8000ef2 <LCD16X2_SR>
 80001c0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001c4:	f000 ff0a 	bl	8000fdc <HAL_Delay>

	  LCD16X2_SL(MyLCD);	HAL_Delay(1500);
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 fe7f 	bl	8000ecc <LCD16X2_SL>
 80001ce:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001d2:	f000 ff03 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SL(MyLCD);	HAL_Delay(1500);
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fe78 	bl	8000ecc <LCD16X2_SL>
 80001dc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001e0:	f000 fefc 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SL(MyLCD);	HAL_Delay(1500);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fe71 	bl	8000ecc <LCD16X2_SL>
 80001ea:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001ee:	f000 fef5 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SL(MyLCD);	HAL_Delay(1500);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fe6a 	bl	8000ecc <LCD16X2_SL>
 80001f8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80001fc:	f000 feee 	bl	8000fdc <HAL_Delay>
	  LCD16X2_SR(MyLCD);	HAL_Delay(1500);
 8000200:	bf00      	nop
 8000202:	e7c5      	b.n	8000190 <main+0x44>
 8000204:	08002008 	.word	0x08002008
 8000208:	08002010 	.word	0x08002010

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	@ 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 febc 	bl	8001f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022e:	2301      	movs	r3, #1
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800024e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f001 f9b1 	bl	80015bc <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000260:	f000 f8b4 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fc1e 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028a:	f000 f89f 	bl	80003cc <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	@ 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <MX_USART2_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f001 fd84 	bl	8001ddc <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f877 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000028 	.word	0x20000028
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b2e      	ldr	r3, [pc, #184]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a2d      	ldr	r2, [pc, #180]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b28      	ldr	r3, [pc, #160]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a27      	ldr	r2, [pc, #156]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a21      	ldr	r2, [pc, #132]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b1c      	ldr	r3, [pc, #112]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 51fd 	mov.w	r1, #8096	@ 0x1fa0
 8000366:	4816      	ldr	r0, [pc, #88]	@ (80003c0 <MX_GPIO_Init+0xd4>)
 8000368:	f001 f8ee 	bl	8001548 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800036c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_GPIO_Init+0xd8>)
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4811      	ldr	r0, [pc, #68]	@ (80003c8 <MX_GPIO_Init+0xdc>)
 8000382:	f000 ff5d 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000386:	f44f 53fd 	mov.w	r3, #8096	@ 0x1fa0
 800038a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2302      	movs	r3, #2
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	4808      	ldr	r0, [pc, #32]	@ (80003c0 <MX_GPIO_Init+0xd4>)
 80003a0:	f000 ff4e 	bl	8001240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	2028      	movs	r0, #40	@ 0x28
 80003aa:	f000 ff12 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ae:	2028      	movs	r0, #40	@ 0x28
 80003b0:	f000 ff2b 	bl	800120a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010800 	.word	0x40010800
 80003c4:	10110000 	.word	0x10110000
 80003c8:	40011000 	.word	0x40011000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <Error_Handler+0x8>

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a14      	ldr	r2, [pc, #80]	@ (8000434 <HAL_MspInit+0x5c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000434 <HAL_MspInit+0x5c>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <HAL_MspInit+0x60>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <HAL_MspInit+0x60>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a15      	ldr	r2, [pc, #84]	@ (80004ac <HAL_UART_MspInit+0x70>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d123      	bne.n	80004a4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <HAL_UART_MspInit+0x74>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <HAL_UART_MspInit+0x74>)
 8000462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000466:	61d3      	str	r3, [r2, #28]
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <HAL_UART_MspInit+0x74>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <HAL_UART_MspInit+0x74>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <HAL_UART_MspInit+0x74>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <HAL_UART_MspInit+0x74>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800048c:	230c      	movs	r3, #12
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000490:	2302      	movs	r3, #2
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2302      	movs	r3, #2
 8000496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <HAL_UART_MspInit+0x78>)
 80004a0:	f000 fece 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40004400 	.word	0x40004400
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010800 	.word	0x40010800

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <MemManage_Handler+0x4>

080004d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <UsageFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000508:	f000 fd4c 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000514:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000518:	f001 f82e 	bl	8001578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800052c:	f7ff fff8 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480b      	ldr	r0, [pc, #44]	@ (8000560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000532:	490c      	ldr	r1, [pc, #48]	@ (8000564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a09      	ldr	r2, [pc, #36]	@ (800056c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000548:	4c09      	ldr	r4, [pc, #36]	@ (8000570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000556:	f001 fd27 	bl	8001fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fdf7 	bl	800014c <main>
  bx lr
 800055e:	4770      	bx	lr
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000568:	08002080 	.word	0x08002080
  ldr r2, =_sbss
 800056c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000570:	20000074 	.word	0x20000074

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <LCD16X2_DATA>:
#include "../../Util/Util.h"



void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	if(Data & 1)
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d014      	beq.n	80005bc <LCD16X2_DATA+0x44>
		HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a5a      	ldr	r2, [pc, #360]	@ (8000700 <LCD16X2_DATA+0x188>)
 8000596:	2134      	movs	r1, #52	@ 0x34
 8000598:	fb01 f303 	mul.w	r3, r1, r3
 800059c:	4413      	add	r3, r2
 800059e:	3304      	adds	r3, #4
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a56      	ldr	r2, [pc, #344]	@ (8000700 <LCD16X2_DATA+0x188>)
 80005a6:	2134      	movs	r1, #52	@ 0x34
 80005a8:	fb01 f303 	mul.w	r3, r1, r3
 80005ac:	4413      	add	r3, r2
 80005ae:	3308      	adds	r3, #8
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	2201      	movs	r2, #1
 80005b4:	4619      	mov	r1, r3
 80005b6:	f000 ffc7 	bl	8001548 <HAL_GPIO_WritePin>
 80005ba:	e013      	b.n	80005e4 <LCD16X2_DATA+0x6c>
	else
		HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4a50      	ldr	r2, [pc, #320]	@ (8000700 <LCD16X2_DATA+0x188>)
 80005c0:	2134      	movs	r1, #52	@ 0x34
 80005c2:	fb01 f303 	mul.w	r3, r1, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	3304      	adds	r3, #4
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4a4c      	ldr	r2, [pc, #304]	@ (8000700 <LCD16X2_DATA+0x188>)
 80005d0:	2134      	movs	r1, #52	@ 0x34
 80005d2:	fb01 f303 	mul.w	r3, r1, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	3308      	adds	r3, #8
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	f000 ffb2 	bl	8001548 <HAL_GPIO_WritePin>
	if(Data & 2)
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d014      	beq.n	8000618 <LCD16X2_DATA+0xa0>
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4a43      	ldr	r2, [pc, #268]	@ (8000700 <LCD16X2_DATA+0x188>)
 80005f2:	2134      	movs	r1, #52	@ 0x34
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	4413      	add	r3, r2
 80005fa:	330c      	adds	r3, #12
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4a3f      	ldr	r2, [pc, #252]	@ (8000700 <LCD16X2_DATA+0x188>)
 8000602:	2134      	movs	r1, #52	@ 0x34
 8000604:	fb01 f303 	mul.w	r3, r1, r3
 8000608:	4413      	add	r3, r2
 800060a:	3310      	adds	r3, #16
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	f000 ff99 	bl	8001548 <HAL_GPIO_WritePin>
 8000616:	e013      	b.n	8000640 <LCD16X2_DATA+0xc8>
		else
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4a39      	ldr	r2, [pc, #228]	@ (8000700 <LCD16X2_DATA+0x188>)
 800061c:	2134      	movs	r1, #52	@ 0x34
 800061e:	fb01 f303 	mul.w	r3, r1, r3
 8000622:	4413      	add	r3, r2
 8000624:	330c      	adds	r3, #12
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <LCD16X2_DATA+0x188>)
 800062c:	2134      	movs	r1, #52	@ 0x34
 800062e:	fb01 f303 	mul.w	r3, r1, r3
 8000632:	4413      	add	r3, r2
 8000634:	3310      	adds	r3, #16
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f000 ff84 	bl	8001548 <HAL_GPIO_WritePin>
	if(Data & 4)
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	2b00      	cmp	r3, #0
 8000648:	d014      	beq.n	8000674 <LCD16X2_DATA+0xfc>
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4a2c      	ldr	r2, [pc, #176]	@ (8000700 <LCD16X2_DATA+0x188>)
 800064e:	2134      	movs	r1, #52	@ 0x34
 8000650:	fb01 f303 	mul.w	r3, r1, r3
 8000654:	4413      	add	r3, r2
 8000656:	3314      	adds	r3, #20
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4a28      	ldr	r2, [pc, #160]	@ (8000700 <LCD16X2_DATA+0x188>)
 800065e:	2134      	movs	r1, #52	@ 0x34
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	4413      	add	r3, r2
 8000666:	3318      	adds	r3, #24
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	f000 ff6b 	bl	8001548 <HAL_GPIO_WritePin>
 8000672:	e013      	b.n	800069c <LCD16X2_DATA+0x124>
		else
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <LCD16X2_DATA+0x188>)
 8000678:	2134      	movs	r1, #52	@ 0x34
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	4413      	add	r3, r2
 8000680:	3314      	adds	r3, #20
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a1e      	ldr	r2, [pc, #120]	@ (8000700 <LCD16X2_DATA+0x188>)
 8000688:	2134      	movs	r1, #52	@ 0x34
 800068a:	fb01 f303 	mul.w	r3, r1, r3
 800068e:	4413      	add	r3, r2
 8000690:	3318      	adds	r3, #24
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	f000 ff56 	bl	8001548 <HAL_GPIO_WritePin>
	if(Data & 8)
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d014      	beq.n	80006d0 <LCD16X2_DATA+0x158>
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <LCD16X2_DATA+0x188>)
 80006aa:	2134      	movs	r1, #52	@ 0x34
 80006ac:	fb01 f303 	mul.w	r3, r1, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	331c      	adds	r3, #28
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4a11      	ldr	r2, [pc, #68]	@ (8000700 <LCD16X2_DATA+0x188>)
 80006ba:	2134      	movs	r1, #52	@ 0x34
 80006bc:	fb01 f303 	mul.w	r3, r1, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	3320      	adds	r3, #32
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f000 ff3d 	bl	8001548 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 80006ce:	e013      	b.n	80006f8 <LCD16X2_DATA+0x180>
			HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000700 <LCD16X2_DATA+0x188>)
 80006d4:	2134      	movs	r1, #52	@ 0x34
 80006d6:	fb01 f303 	mul.w	r3, r1, r3
 80006da:	4413      	add	r3, r2
 80006dc:	331c      	adds	r3, #28
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <LCD16X2_DATA+0x188>)
 80006e4:	2134      	movs	r1, #52	@ 0x34
 80006e6:	fb01 f303 	mul.w	r3, r1, r3
 80006ea:	4413      	add	r3, r2
 80006ec:	3320      	adds	r3, #32
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f000 ff28 	bl	8001548 <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08002030 	.word	0x08002030

08000704 <LCD16X2_CMD>:


void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]
	//Select command register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a5a      	ldr	r2, [pc, #360]	@ (8000880 <LCD16X2_CMD+0x17c>)
 8000718:	2134      	movs	r1, #52	@ 0x34
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	4413      	add	r3, r2
 8000720:	332c      	adds	r3, #44	@ 0x2c
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	4a56      	ldr	r2, [pc, #344]	@ (8000880 <LCD16X2_CMD+0x17c>)
 8000728:	2134      	movs	r1, #52	@ 0x34
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	4413      	add	r3, r2
 8000730:	3330      	adds	r3, #48	@ 0x30
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	f000 ff06 	bl	8001548 <HAL_GPIO_WritePin>
	//Move the command data to LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff18 	bl	8000578 <LCD16X2_DATA>
	//Send clock signal to Enable pin
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a4d      	ldr	r2, [pc, #308]	@ (8000880 <LCD16X2_CMD+0x17c>)
 800074c:	2134      	movs	r1, #52	@ 0x34
 800074e:	fb01 f303 	mul.w	r3, r1, r3
 8000752:	4413      	add	r3, r2
 8000754:	3324      	adds	r3, #36	@ 0x24
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4a49      	ldr	r2, [pc, #292]	@ (8000880 <LCD16X2_CMD+0x17c>)
 800075c:	2134      	movs	r1, #52	@ 0x34
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	3328      	adds	r3, #40	@ 0x28
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	f000 feec 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay);
 8000770:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <LCD16X2_CMD+0x180>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <LCD16X2_CMD+0x184>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a44      	ldr	r2, [pc, #272]	@ (800088c <LCD16X2_CMD+0x188>)
 800077c:	fba2 2303 	umull	r2, r3, r2, r3
 8000780:	0c9a      	lsrs	r2, r3, #18
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4619      	mov	r1, r3
 800078c:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <LCD16X2_CMD+0x184>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a3e      	ldr	r2, [pc, #248]	@ (800088c <LCD16X2_CMD+0x188>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	0c9b      	lsrs	r3, r3, #18
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	1acb      	subs	r3, r1, r3
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <LCD16X2_CMD+0x180>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	69fa      	ldr	r2, [r7, #28]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d8f8      	bhi.n	800079e <LCD16X2_CMD+0x9a>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a34      	ldr	r2, [pc, #208]	@ (8000880 <LCD16X2_CMD+0x17c>)
 80007b0:	2134      	movs	r1, #52	@ 0x34
 80007b2:	fb01 f303 	mul.w	r3, r1, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	3324      	adds	r3, #36	@ 0x24
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <LCD16X2_CMD+0x17c>)
 80007c0:	2134      	movs	r1, #52	@ 0x34
 80007c2:	fb01 f303 	mul.w	r3, r1, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	3328      	adds	r3, #40	@ 0x28
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f000 feba 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay);
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <LCD16X2_CMD+0x180>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <LCD16X2_CMD+0x184>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a2b      	ldr	r2, [pc, #172]	@ (800088c <LCD16X2_CMD+0x188>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	0c9a      	lsrs	r2, r3, #18
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4619      	mov	r1, r3
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <LCD16X2_CMD+0x184>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a25      	ldr	r2, [pc, #148]	@ (800088c <LCD16X2_CMD+0x188>)
 80007f6:	fba2 2303 	umull	r2, r3, r2, r3
 80007fa:	0c9b      	lsrs	r3, r3, #18
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	1acb      	subs	r3, r1, r3
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <LCD16X2_CMD+0x180>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	429a      	cmp	r2, r3
 800080e:	d8f8      	bhi.n	8000802 <LCD16X2_CMD+0xfe>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <LCD16X2_CMD+0x17c>)
 8000814:	2134      	movs	r1, #52	@ 0x34
 8000816:	fb01 f303 	mul.w	r3, r1, r3
 800081a:	4413      	add	r3, r2
 800081c:	3324      	adds	r3, #36	@ 0x24
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <LCD16X2_CMD+0x17c>)
 8000824:	2134      	movs	r1, #52	@ 0x34
 8000826:	fb01 f303 	mul.w	r3, r1, r3
 800082a:	4413      	add	r3, r2
 800082c:	3328      	adds	r3, #40	@ 0x28
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	f000 fe88 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay*2);
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <LCD16X2_CMD+0x180>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <LCD16X2_CMD+0x184>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <LCD16X2_CMD+0x188>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	0c9a      	lsrs	r2, r3, #18
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4619      	mov	r1, r3
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <LCD16X2_CMD+0x184>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0c      	ldr	r2, [pc, #48]	@ (800088c <LCD16X2_CMD+0x188>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	0c9b      	lsrs	r3, r3, #18
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	1acb      	subs	r3, r1, r3
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <LCD16X2_CMD+0x180>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f8      	bhi.n	8000866 <LCD16X2_CMD+0x162>
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08002030 	.word	0x08002030
 8000884:	e000e010 	.word	0xe000e010
 8000888:	20000000 	.word	0x20000000
 800088c:	431bde83 	.word	0x431bde83

08000890 <LCD16X2_Clear>:


void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff30 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff2b 	bl	8000704 <LCD16X2_CMD>
	DELAY_MS(2);
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e01f      	b.n	80008f4 <LCD16X2_Clear+0x64>
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <LCD16X2_Clear+0x74>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <LCD16X2_Clear+0x78>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a13      	ldr	r2, [pc, #76]	@ (800090c <LCD16X2_Clear+0x7c>)
 80008c0:	fba2 2303 	umull	r2, r3, r2, r3
 80008c4:	0c9b      	lsrs	r3, r3, #18
 80008c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ca:	fb03 f202 	mul.w	r2, r3, r2
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <LCD16X2_Clear+0x78>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	490e      	ldr	r1, [pc, #56]	@ (800090c <LCD16X2_Clear+0x7c>)
 80008d4:	fba1 1303 	umull	r1, r3, r1, r3
 80008d8:	0c9b      	lsrs	r3, r3, #18
 80008da:	085b      	lsrs	r3, r3, #1
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <LCD16X2_Clear+0x74>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d8f8      	bhi.n	80008e0 <LCD16X2_Clear+0x50>
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d9dc      	bls.n	80008b4 <LCD16X2_Clear+0x24>
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	e000e010 	.word	0xe000e010
 8000908:	20000000 	.word	0x20000000
 800090c:	431bde83 	.word	0x431bde83

08000910 <LCD16X2_Set_Cursor>:


void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	460b      	mov	r3, r1
 800091c:	71bb      	strb	r3, [r7, #6]
 800091e:	4613      	mov	r3, r2
 8000920:	717b      	strb	r3, [r7, #5]
	unsigned char Temp, Low4, High4;
	if(r == 1)
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d115      	bne.n	8000954 <LCD16X2_Set_Cursor+0x44>
	{
		Temp 	= 0x80 + c -1; //0x80 is used to move the cursor
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	337f      	adds	r3, #127	@ 0x7f
 800092c:	73fb      	strb	r3, [r7, #15]
		High4 	= Temp >> 4;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	73bb      	strb	r3, [r7, #14]
		Low4 	= Temp & 0x0F;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	737b      	strb	r3, [r7, #13]
		LCD16X2_CMD(LCD16X2_Index, High4);
 800093c:	7bba      	ldrb	r2, [r7, #14]
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fede 	bl	8000704 <LCD16X2_CMD>
		LCD16X2_CMD(LCD16X2_Index, Low4);
 8000948:	7b7a      	ldrb	r2, [r7, #13]
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fed8 	bl	8000704 <LCD16X2_CMD>
	}
	if(r == 2)
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d115      	bne.n	8000986 <LCD16X2_Set_Cursor+0x76>
	{
		Temp 	= 0xC0 + c -1; //0x80 is used to move the cursor
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	3b41      	subs	r3, #65	@ 0x41
 800095e:	73fb      	strb	r3, [r7, #15]
		High4 	= Temp >> 4;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	73bb      	strb	r3, [r7, #14]
		Low4 	= Temp & 0x0F;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	737b      	strb	r3, [r7, #13]
		LCD16X2_CMD(LCD16X2_Index, High4);
 800096e:	7bba      	ldrb	r2, [r7, #14]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fec5 	bl	8000704 <LCD16X2_CMD>
		LCD16X2_CMD(LCD16X2_Index, Low4);
 800097a:	7b7a      	ldrb	r2, [r7, #13]
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff febf 	bl	8000704 <LCD16X2_CMD>
	}
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <LCD16X2_Init>:


void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	@ 0x38
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	//ACc. to datasheet, you have to wait at least 40ms after power up before interaction
	while(HAL_GetTick() < 50);
 800099a:	bf00      	nop
 800099c:	f000 fb14 	bl	8000fc8 <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b31      	cmp	r3, #49	@ 0x31
 80009a4:	d9fa      	bls.n	800099c <LCD16X2_Init+0xc>
	//The init. procedure as described in datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a7c      	ldr	r2, [pc, #496]	@ (8000b9c <LCD16X2_Init+0x20c>)
 80009aa:	2134      	movs	r1, #52	@ 0x34
 80009ac:	fb01 f303 	mul.w	r3, r1, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	332c      	adds	r3, #44	@ 0x2c
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a78      	ldr	r2, [pc, #480]	@ (8000b9c <LCD16X2_Init+0x20c>)
 80009ba:	2134      	movs	r1, #52	@ 0x34
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	3330      	adds	r3, #48	@ 0x30
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f000 fdbd 	bl	8001548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a72      	ldr	r2, [pc, #456]	@ (8000b9c <LCD16X2_Init+0x20c>)
 80009d2:	2134      	movs	r1, #52	@ 0x34
 80009d4:	fb01 f303 	mul.w	r3, r1, r3
 80009d8:	4413      	add	r3, r2
 80009da:	3324      	adds	r3, #36	@ 0x24
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a6e      	ldr	r2, [pc, #440]	@ (8000b9c <LCD16X2_Init+0x20c>)
 80009e2:	2134      	movs	r1, #52	@ 0x34
 80009e4:	fb01 f303 	mul.w	r3, r1, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	3328      	adds	r3, #40	@ 0x28
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	f000 fda9 	bl	8001548 <HAL_GPIO_WritePin>
	//Init in 4-bit mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fdbc 	bl	8000578 <LCD16X2_DATA>
	DELAY_MS(150);
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a04:	e01f      	b.n	8000a46 <LCD16X2_Init+0xb6>
 8000a06:	4b66      	ldr	r3, [pc, #408]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	4b65      	ldr	r3, [pc, #404]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a65      	ldr	r2, [pc, #404]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a1c:	fb03 f202 	mul.w	r2, r3, r2
 8000a20:	4b60      	ldr	r3, [pc, #384]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4960      	ldr	r1, [pc, #384]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000a26:	fba1 1303 	umull	r1, r3, r1, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f8      	bhi.n	8000a32 <LCD16X2_Init+0xa2>
 8000a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a42:	3301      	adds	r3, #1
 8000a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a48:	2b95      	cmp	r3, #149	@ 0x95
 8000a4a:	d9dc      	bls.n	8000a06 <LCD16X2_Init+0x76>
	LCD16X2_CMD(LCD16X2_Index, 0x03);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2103      	movs	r1, #3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe57 	bl	8000704 <LCD16X2_CMD>
	DELAY_MS(5);
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a5a:	e01f      	b.n	8000a9c <LCD16X2_Init+0x10c>
 8000a5c:	4b50      	ldr	r3, [pc, #320]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b50      	ldr	r3, [pc, #320]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a50      	ldr	r2, [pc, #320]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	0c9b      	lsrs	r3, r3, #18
 8000a6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a72:	fb03 f202 	mul.w	r2, r3, r2
 8000a76:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	494b      	ldr	r1, [pc, #300]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000a7c:	fba1 1303 	umull	r1, r3, r1, r3
 8000a80:	0c9b      	lsrs	r3, r3, #18
 8000a82:	085b      	lsrs	r3, r3, #1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	4b45      	ldr	r3, [pc, #276]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d8f8      	bhi.n	8000a88 <LCD16X2_Init+0xf8>
 8000a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a98:	3301      	adds	r3, #1
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d9dc      	bls.n	8000a5c <LCD16X2_Init+0xcc>
	LCD16X2_CMD(LCD16X2_Index, 0x03);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fe2c 	bl	8000704 <LCD16X2_CMD>
	DELAY_MS(5);
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ab0:	e01f      	b.n	8000af2 <LCD16X2_Init+0x162>
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	0c9b      	lsrs	r3, r3, #18
 8000ac4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ac8:	fb03 f202 	mul.w	r2, r3, r2
 8000acc:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4935      	ldr	r1, [pc, #212]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	4b30      	ldr	r3, [pc, #192]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	6a3a      	ldr	r2, [r7, #32]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f8      	bhi.n	8000ade <LCD16X2_Init+0x14e>
 8000aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aee:	3301      	adds	r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d9dc      	bls.n	8000ab2 <LCD16X2_Init+0x122>
	LCD16X2_CMD(LCD16X2_Index, 0x03);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2103      	movs	r1, #3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe01 	bl	8000704 <LCD16X2_CMD>
	DELAY_US(150);
 8000b02:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a26      	ldr	r2, [pc, #152]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	0c9b      	lsrs	r3, r3, #18
 8000b14:	2296      	movs	r2, #150	@ 0x96
 8000b16:	fb03 f202 	mul.w	r2, r3, r2
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <LCD16X2_Init+0x214>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4922      	ldr	r1, [pc, #136]	@ (8000ba8 <LCD16X2_Init+0x218>)
 8000b20:	fba1 1303 	umull	r1, r3, r1, r3
 8000b24:	0c9b      	lsrs	r3, r3, #18
 8000b26:	085b      	lsrs	r3, r3, #1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <LCD16X2_Init+0x210>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d8f8      	bhi.n	8000b2c <LCD16X2_Init+0x19c>

	LCD16X2_CMD(LCD16X2_Index, 0x02);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fde0 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x02);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2102      	movs	r1, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fddb 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x08);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2108      	movs	r1, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fdd6 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x00);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fdd1 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x0C);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	210c      	movs	r1, #12
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fdcc 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x00);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fdc7 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x06);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2106      	movs	r1, #6
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fdc2 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x00);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdbd 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x01);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fdb8 	bl	8000704 <LCD16X2_CMD>
}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	@ 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08002030 	.word	0x08002030
 8000ba0:	e000e010 	.word	0xe000e010
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	431bde83 	.word	0x431bde83

08000bac <LCD16X2_Write_Char>:


void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	@ 0x40
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
	char Low4, High4;
	Low4 	= Data & 0x0F;
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	High4 	= Data & 0xF0;
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4aaa      	ldr	r2, [pc, #680]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000bd4:	2134      	movs	r1, #52	@ 0x34
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	332c      	adds	r3, #44	@ 0x2c
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4aa6      	ldr	r2, [pc, #664]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000be4:	2134      	movs	r1, #52	@ 0x34
 8000be6:	fb01 f303 	mul.w	r3, r1, r3
 8000bea:	4413      	add	r3, r2
 8000bec:	3330      	adds	r3, #48	@ 0x30
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f000 fca8 	bl	8001548 <HAL_GPIO_WritePin>

	LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8000bf8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcb7 	bl	8000578 <LCD16X2_DATA>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a9b      	ldr	r2, [pc, #620]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000c0e:	2134      	movs	r1, #52	@ 0x34
 8000c10:	fb01 f303 	mul.w	r3, r1, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	3324      	adds	r3, #36	@ 0x24
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a97      	ldr	r2, [pc, #604]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000c1e:	2134      	movs	r1, #52	@ 0x34
 8000c20:	fb01 f303 	mul.w	r3, r1, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	3328      	adds	r3, #40	@ 0x28
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f000 fc8b 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay);
 8000c32:	4b93      	ldr	r3, [pc, #588]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c38:	4b92      	ldr	r3, [pc, #584]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a92      	ldr	r2, [pc, #584]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	0c9a      	lsrs	r2, r3, #18
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a8d      	ldr	r2, [pc, #564]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	0c9b      	lsrs	r3, r3, #18
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	1acb      	subs	r3, r1, r3
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c60:	4b87      	ldr	r3, [pc, #540]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d8f8      	bhi.n	8000c60 <LCD16X2_Write_Char+0xb4>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a82      	ldr	r2, [pc, #520]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000c72:	2134      	movs	r1, #52	@ 0x34
 8000c74:	fb01 f303 	mul.w	r3, r1, r3
 8000c78:	4413      	add	r3, r2
 8000c7a:	3324      	adds	r3, #36	@ 0x24
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4a7e      	ldr	r2, [pc, #504]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000c82:	2134      	movs	r1, #52	@ 0x34
 8000c84:	fb01 f303 	mul.w	r3, r1, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	3328      	adds	r3, #40	@ 0x28
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	f000 fc59 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay);
 8000c96:	4b7a      	ldr	r3, [pc, #488]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c9c:	4b79      	ldr	r3, [pc, #484]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a79      	ldr	r2, [pc, #484]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9a      	lsrs	r2, r3, #18
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4b74      	ldr	r3, [pc, #464]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a74      	ldr	r2, [pc, #464]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9b      	lsrs	r3, r3, #18
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cc4:	4b6e      	ldr	r3, [pc, #440]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d8f8      	bhi.n	8000cc4 <LCD16X2_Write_Char+0x118>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4a69      	ldr	r2, [pc, #420]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000cd6:	2134      	movs	r1, #52	@ 0x34
 8000cd8:	fb01 f303 	mul.w	r3, r1, r3
 8000cdc:	4413      	add	r3, r2
 8000cde:	3324      	adds	r3, #36	@ 0x24
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a65      	ldr	r2, [pc, #404]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000ce6:	2134      	movs	r1, #52	@ 0x34
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	3328      	adds	r3, #40	@ 0x28
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f000 fc27 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay*2);
 8000cfa:	4b61      	ldr	r3, [pc, #388]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d00:	4b60      	ldr	r3, [pc, #384]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a60      	ldr	r2, [pc, #384]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9a      	lsrs	r2, r3, #18
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4619      	mov	r1, r3
 8000d16:	4b5b      	ldr	r3, [pc, #364]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	0c9b      	lsrs	r3, r3, #18
 8000d22:	085b      	lsrs	r3, r3, #1
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d28:	4b55      	ldr	r3, [pc, #340]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d8f8      	bhi.n	8000d28 <LCD16X2_Write_Char+0x17c>

	LCD16X2_DATA(LCD16X2_Index, Low4);
 8000d36:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fc1a 	bl	8000578 <LCD16X2_DATA>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a4d      	ldr	r2, [pc, #308]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000d48:	2134      	movs	r1, #52	@ 0x34
 8000d4a:	fb01 f303 	mul.w	r3, r1, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	3324      	adds	r3, #36	@ 0x24
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a49      	ldr	r2, [pc, #292]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000d58:	2134      	movs	r1, #52	@ 0x34
 8000d5a:	fb01 f303 	mul.w	r3, r1, r3
 8000d5e:	4413      	add	r3, r2
 8000d60:	3328      	adds	r3, #40	@ 0x28
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	f000 fbee 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay);
 8000d6c:	4b44      	ldr	r3, [pc, #272]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	4b44      	ldr	r3, [pc, #272]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a44      	ldr	r2, [pc, #272]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9a      	lsrs	r2, r3, #18
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4619      	mov	r1, r3
 8000d88:	4b3e      	ldr	r3, [pc, #248]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	0c9b      	lsrs	r3, r3, #18
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	4b39      	ldr	r3, [pc, #228]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	6a3a      	ldr	r2, [r7, #32]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f8      	bhi.n	8000d9a <LCD16X2_Write_Char+0x1ee>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4a34      	ldr	r2, [pc, #208]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000dac:	2134      	movs	r1, #52	@ 0x34
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	4413      	add	r3, r2
 8000db4:	3324      	adds	r3, #36	@ 0x24
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4a30      	ldr	r2, [pc, #192]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000dbc:	2134      	movs	r1, #52	@ 0x34
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3328      	adds	r3, #40	@ 0x28
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f000 fbbc 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay);
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2b      	ldr	r2, [pc, #172]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	0c9a      	lsrs	r2, r3, #18
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4619      	mov	r1, r3
 8000dec:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9b      	lsrs	r3, r3, #18
 8000df8:	085b      	lsrs	r3, r3, #1
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f8      	bhi.n	8000dfe <LCD16X2_Write_Char+0x252>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000e10:	2134      	movs	r1, #52	@ 0x34
 8000e12:	fb01 f303 	mul.w	r3, r1, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	3324      	adds	r3, #36	@ 0x24
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <LCD16X2_Write_Char+0x2d0>)
 8000e20:	2134      	movs	r1, #52	@ 0x34
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	4413      	add	r3, r2
 8000e28:	3328      	adds	r3, #40	@ 0x28
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f000 fb8a 	bl	8001548 <HAL_GPIO_WritePin>
	DELAY_US(LCD_Delay*2);
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9a      	lsrs	r2, r3, #18
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <LCD16X2_Write_Char+0x2d8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <LCD16X2_Write_Char+0x2dc>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <LCD16X2_Write_Char+0x2d4>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f8      	bhi.n	8000e62 <LCD16X2_Write_Char+0x2b6>
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3740      	adds	r7, #64	@ 0x40
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08002030 	.word	0x08002030
 8000e80:	e000e010 	.word	0xe000e010
 8000e84:	20000000 	.word	0x20000000
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <LCD16X2_Write_String>:


void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; str[i] != '\0' ; i++ )
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e00b      	b.n	8000eb6 <LCD16X2_Write_String+0x2a>
	{
		LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe7e 	bl	8000bac <LCD16X2_Write_Char>
	for(int i = 0 ; str[i] != '\0' ; i++ )
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1ed      	bne.n	8000e9e <LCD16X2_Write_String+0x12>
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LCD16X2_SL>:


void LCD16X2_SL(uint8_t LCD16X2_Index)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0x01);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fc12 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x08);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fc0d 	bl	8000704 <LCD16X2_CMD>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <LCD16X2_SR>:


void LCD16X2_SR(uint8_t LCD16X2_Index)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0x01);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbff 	bl	8000704 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x0C);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	210c      	movs	r1, #12
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fbfa 	bl	8000704 <LCD16X2_CMD>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_Init+0x28>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_Init+0x28>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f947 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fa50 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f95f 	bl	8001226 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f927 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_IncTick+0x1c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a03      	ldr	r2, [pc, #12]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000070 	.word	0x20000070

08000fc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	@ (8000fd8 <HAL_GetTick+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000070 	.word	0x20000070

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff0 	bl	8000fc8 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffe0 	bl	8000fc8 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4906      	ldr	r1, [pc, #24]	@ (80010bc <__NVIC_EnableIRQ+0x34>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	@ (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	@ (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	@ 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff90 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff2d 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff42 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff90 	bl	8001114 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5f 	bl	80010c0 <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff35 	bl	8001088 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b08b      	sub	sp, #44	@ 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	e169      	b.n	8001528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001254:	2201      	movs	r2, #1
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8158 	bne.w	8001522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a9a      	ldr	r2, [pc, #616]	@ (80014e0 <HAL_GPIO_Init+0x2a0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d05e      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 800127c:	4a98      	ldr	r2, [pc, #608]	@ (80014e0 <HAL_GPIO_Init+0x2a0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d875      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 8001282:	4a98      	ldr	r2, [pc, #608]	@ (80014e4 <HAL_GPIO_Init+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d058      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 8001288:	4a96      	ldr	r2, [pc, #600]	@ (80014e4 <HAL_GPIO_Init+0x2a4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d86f      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 800128e:	4a96      	ldr	r2, [pc, #600]	@ (80014e8 <HAL_GPIO_Init+0x2a8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d052      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 8001294:	4a94      	ldr	r2, [pc, #592]	@ (80014e8 <HAL_GPIO_Init+0x2a8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d869      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 800129a:	4a94      	ldr	r2, [pc, #592]	@ (80014ec <HAL_GPIO_Init+0x2ac>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d04c      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 80012a0:	4a92      	ldr	r2, [pc, #584]	@ (80014ec <HAL_GPIO_Init+0x2ac>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d863      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012a6:	4a92      	ldr	r2, [pc, #584]	@ (80014f0 <HAL_GPIO_Init+0x2b0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d046      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 80012ac:	4a90      	ldr	r2, [pc, #576]	@ (80014f0 <HAL_GPIO_Init+0x2b0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d85d      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d82a      	bhi.n	800130c <HAL_GPIO_Init+0xcc>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d859      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012ba:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <HAL_GPIO_Init+0x80>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	0800133b 	.word	0x0800133b
 80012c4:	08001315 	.word	0x08001315
 80012c8:	08001327 	.word	0x08001327
 80012cc:	08001369 	.word	0x08001369
 80012d0:	0800136f 	.word	0x0800136f
 80012d4:	0800136f 	.word	0x0800136f
 80012d8:	0800136f 	.word	0x0800136f
 80012dc:	0800136f 	.word	0x0800136f
 80012e0:	0800136f 	.word	0x0800136f
 80012e4:	0800136f 	.word	0x0800136f
 80012e8:	0800136f 	.word	0x0800136f
 80012ec:	0800136f 	.word	0x0800136f
 80012f0:	0800136f 	.word	0x0800136f
 80012f4:	0800136f 	.word	0x0800136f
 80012f8:	0800136f 	.word	0x0800136f
 80012fc:	0800136f 	.word	0x0800136f
 8001300:	0800136f 	.word	0x0800136f
 8001304:	0800131d 	.word	0x0800131d
 8001308:	08001331 	.word	0x08001331
 800130c:	4a79      	ldr	r2, [pc, #484]	@ (80014f4 <HAL_GPIO_Init+0x2b4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001312:	e02c      	b.n	800136e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e029      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	3304      	adds	r3, #4
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e024      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	3308      	adds	r3, #8
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e01f      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	330c      	adds	r3, #12
 8001336:	623b      	str	r3, [r7, #32]
          break;
 8001338:	e01a      	b.n	8001370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001342:	2304      	movs	r3, #4
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e013      	b.n	8001370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	611a      	str	r2, [r3, #16]
          break;
 800135a:	e009      	b.n	8001370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	615a      	str	r2, [r3, #20]
          break;
 8001366:	e003      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x130>
          break;
 800136e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2bff      	cmp	r3, #255	@ 0xff
 8001374:	d801      	bhi.n	800137a <HAL_GPIO_Init+0x13a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	e001      	b.n	800137e <HAL_GPIO_Init+0x13e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3304      	adds	r3, #4
 800137e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	@ 0xff
 8001384:	d802      	bhi.n	800138c <HAL_GPIO_Init+0x14c>
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x152>
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	3b08      	subs	r3, #8
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	210f      	movs	r1, #15
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	6a39      	ldr	r1, [r7, #32]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80b1 	beq.w	8001522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c0:	4b4d      	ldr	r3, [pc, #308]	@ (80014f8 <HAL_GPIO_Init+0x2b8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	@ (80014f8 <HAL_GPIO_Init+0x2b8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_GPIO_Init+0x2b8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d8:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <HAL_GPIO_Init+0x2bc>)
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a40      	ldr	r2, [pc, #256]	@ (8001500 <HAL_GPIO_Init+0x2c0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d013      	beq.n	800142c <HAL_GPIO_Init+0x1ec>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3f      	ldr	r2, [pc, #252]	@ (8001504 <HAL_GPIO_Init+0x2c4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d00d      	beq.n	8001428 <HAL_GPIO_Init+0x1e8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3e      	ldr	r2, [pc, #248]	@ (8001508 <HAL_GPIO_Init+0x2c8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d007      	beq.n	8001424 <HAL_GPIO_Init+0x1e4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a3d      	ldr	r2, [pc, #244]	@ (800150c <HAL_GPIO_Init+0x2cc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_GPIO_Init+0x1e0>
 800141c:	2303      	movs	r3, #3
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001420:	2304      	movs	r3, #4
 8001422:	e004      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001424:	2302      	movs	r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 800142c:	2300      	movs	r3, #0
 800142e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800143e:	492f      	ldr	r1, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x2bc>)
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	492c      	ldr	r1, [pc, #176]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	4928      	ldr	r1, [pc, #160]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	4922      	ldr	r1, [pc, #136]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	491e      	ldr	r1, [pc, #120]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4918      	ldr	r1, [pc, #96]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	4914      	ldr	r1, [pc, #80]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d021      	beq.n	8001514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	490e      	ldr	r1, [pc, #56]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e021      	b.n	8001522 <HAL_GPIO_Init+0x2e2>
 80014de:	bf00      	nop
 80014e0:	10320000 	.word	0x10320000
 80014e4:	10310000 	.word	0x10310000
 80014e8:	10220000 	.word	0x10220000
 80014ec:	10210000 	.word	0x10210000
 80014f0:	10120000 	.word	0x10120000
 80014f4:	10110000 	.word	0x10110000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000
 8001500:	40010800 	.word	0x40010800
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40011000 	.word	0x40011000
 800150c:	40011400 	.word	0x40011400
 8001510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	43db      	mvns	r3, r3
 800151c:	4909      	ldr	r1, [pc, #36]	@ (8001544 <HAL_GPIO_Init+0x304>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f ae8e 	bne.w	8001254 <HAL_GPIO_Init+0x14>
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	372c      	adds	r7, #44	@ 0x2c
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f806 	bl	80015a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e272      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8087 	beq.w	80016ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015dc:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d00c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d112      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
 80015f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001600:	d10b      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x12c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d168      	bne.n	80016e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e24c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x76>
 8001624:	4b80      	ldr	r3, [pc, #512]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a7f      	ldr	r2, [pc, #508]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e02e      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b7b      	ldr	r3, [pc, #492]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7a      	ldr	r2, [pc, #488]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b78      	ldr	r3, [pc, #480]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a77      	ldr	r2, [pc, #476]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0xbc>
 800165e:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a71      	ldr	r2, [pc, #452]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6f      	ldr	r3, [pc, #444]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001678:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6a      	ldr	r2, [pc, #424]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b68      	ldr	r3, [pc, #416]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a67      	ldr	r2, [pc, #412]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fc96 	bl	8000fc8 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc92 	bl	8000fc8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e200      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe4>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc82 	bl	8000fc8 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc7e 	bl	8000fc8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	@ 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1ec      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x10c>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001702:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
 800170e:	4b46      	ldr	r3, [pc, #280]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b43      	ldr	r3, [pc, #268]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4939      	ldr	r1, [pc, #228]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b36      	ldr	r3, [pc, #216]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fc37 	bl	8000fc8 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc33 	bl	8000fc8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4927      	ldr	r1, [pc, #156]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc16 	bl	8000fc8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc12 	bl	8000fc8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e180      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03a      	beq.n	8001840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_RCC_OscConfig+0x274>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fbf6 	bl	8000fc8 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fbf2 	bl	8000fc8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e160      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 face 	bl	8001da0 <RCC_Delay>
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_RCC_OscConfig+0x274>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fbdc 	bl	8000fc8 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fbd8 	bl	8000fc8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d908      	bls.n	8001834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e146      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	42420000 	.word	0x42420000
 8001830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b92      	ldr	r3, [pc, #584]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e9      	bne.n	8001814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a6 	beq.w	800199a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b8b      	ldr	r3, [pc, #556]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a87      	ldr	r2, [pc, #540]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b85      	ldr	r3, [pc, #532]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b82      	ldr	r3, [pc, #520]	@ (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b7f      	ldr	r3, [pc, #508]	@ (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fb99 	bl	8000fc8 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fb95 	bl	8000fc8 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	@ 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e103      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b75      	ldr	r3, [pc, #468]	@ (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x312>
 80018c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	e02d      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x334>
 80018d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a69      	ldr	r2, [pc, #420]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b67      	ldr	r3, [pc, #412]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a66      	ldr	r2, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e01c      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x356>
 80018f8:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a60      	ldr	r2, [pc, #384]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	4b5e      	ldr	r3, [pc, #376]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a5d      	ldr	r2, [pc, #372]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 8001912:	4b5b      	ldr	r3, [pc, #364]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a5a      	ldr	r2, [pc, #360]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b58      	ldr	r3, [pc, #352]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a57      	ldr	r2, [pc, #348]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d015      	beq.n	800195e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb49 	bl	8000fc8 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff fb45 	bl	8000fc8 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0b1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b4b      	ldr	r3, [pc, #300]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCC_OscConfig+0x37e>
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fb33 	bl	8000fc8 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fb2f 	bl	8000fc8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e09b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a3b      	ldr	r2, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d061      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d146      	bne.n	8001a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fb03 	bl	8000fc8 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff faff 	bl	8000fc8 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e06d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ee:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4921      	ldr	r1, [pc, #132]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a19      	ldr	r1, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	430b      	orrs	r3, r1
 8001a12:	491b      	ldr	r1, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fad3 	bl	8000fc8 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff facf 	bl	8000fc8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46a>
 8001a44:	e035      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fabc 	bl	8000fc8 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fab8 	bl	8000fc8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e026      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x498>
 8001a72:	e01e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e019      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_OscConfig+0x500>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4965      	ldr	r1, [pc, #404]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff fa0a 	bl	8000fc8 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff fa06 	bl	8000fc8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4922      	ldr	r1, [pc, #136]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1cc>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f968 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002018 	.word	0x08002018
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x36>
 8001cc2:	e027      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	613b      	str	r3, [r7, #16]
      break;
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	0c5b      	lsrs	r3, r3, #17
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf6:	fb03 f202 	mul.w	r2, r3, r2
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e004      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0c      	ldr	r2, [pc, #48]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	613b      	str	r3, [r7, #16]
      break;
 8001d12:	e002      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d16:	613b      	str	r3, [r7, #16]
      break;
 8001d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1a:	693b      	ldr	r3, [r7, #16]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	007a1200 	.word	0x007a1200
 8001d30:	08002064 	.word	0x08002064
 8001d34:	08002074 	.word	0x08002074
 8001d38:	003d0900 	.word	0x003d0900

08001d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b02      	ldr	r3, [pc, #8]	@ (8001d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff2 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08002028 	.word	0x08002028

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	@ (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08002028 	.word	0x08002028

08001da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <RCC_Delay+0x34>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <RCC_Delay+0x38>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0a5b      	lsrs	r3, r3, #9
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dbc:	bf00      	nop
  }
  while (Delay --);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	60fa      	str	r2, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f9      	bne.n	8001dbc <RCC_Delay+0x1c>
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e042      	b.n	8001e74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fb1a 	bl	800043c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	@ 0x24
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f82b 	bl	8001e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001eb6:	f023 030c 	bic.w	r3, r3, #12
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2c      	ldr	r2, [pc, #176]	@ (8001f90 <UART_SetConfig+0x114>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ee4:	f7ff ff48 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	e002      	b.n	8001ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001eec:	f7ff ff30 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8001ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009a      	lsls	r2, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <UART_SetConfig+0x118>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	0119      	lsls	r1, r3, #4
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009a      	lsls	r2, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f28:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <UART_SetConfig+0x118>)
 8001f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2064      	movs	r0, #100	@ 0x64
 8001f32:	fb00 f303 	mul.w	r3, r0, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	3332      	adds	r3, #50	@ 0x32
 8001f3c:	4a15      	ldr	r2, [pc, #84]	@ (8001f94 <UART_SetConfig+0x118>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f48:	4419      	add	r1, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009a      	lsls	r2, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <UART_SetConfig+0x118>)
 8001f62:	fba3 0302 	umull	r0, r3, r3, r2
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2064      	movs	r0, #100	@ 0x64
 8001f6a:	fb00 f303 	mul.w	r3, r0, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	3332      	adds	r3, #50	@ 0x32
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <UART_SetConfig+0x118>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	440a      	add	r2, r1
 8001f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40013800 	.word	0x40013800
 8001f94:	51eb851f 	.word	0x51eb851f

08001f98 <memset>:
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4402      	add	r2, r0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <memset+0xa>
 8001fa0:	4770      	bx	lr
 8001fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fa6:	e7f9      	b.n	8001f9c <memset+0x4>

08001fa8 <__libc_init_array>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	2600      	movs	r6, #0
 8001fac:	4d0c      	ldr	r5, [pc, #48]	@ (8001fe0 <__libc_init_array+0x38>)
 8001fae:	4c0d      	ldr	r4, [pc, #52]	@ (8001fe4 <__libc_init_array+0x3c>)
 8001fb0:	1b64      	subs	r4, r4, r5
 8001fb2:	10a4      	asrs	r4, r4, #2
 8001fb4:	42a6      	cmp	r6, r4
 8001fb6:	d109      	bne.n	8001fcc <__libc_init_array+0x24>
 8001fb8:	f000 f81a 	bl	8001ff0 <_init>
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	4d0a      	ldr	r5, [pc, #40]	@ (8001fe8 <__libc_init_array+0x40>)
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fec <__libc_init_array+0x44>)
 8001fc2:	1b64      	subs	r4, r4, r5
 8001fc4:	10a4      	asrs	r4, r4, #2
 8001fc6:	42a6      	cmp	r6, r4
 8001fc8:	d105      	bne.n	8001fd6 <__libc_init_array+0x2e>
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
 8001fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd0:	4798      	blx	r3
 8001fd2:	3601      	adds	r6, #1
 8001fd4:	e7ee      	b.n	8001fb4 <__libc_init_array+0xc>
 8001fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fda:	4798      	blx	r3
 8001fdc:	3601      	adds	r6, #1
 8001fde:	e7f2      	b.n	8001fc6 <__libc_init_array+0x1e>
 8001fe0:	08002078 	.word	0x08002078
 8001fe4:	08002078 	.word	0x08002078
 8001fe8:	08002078 	.word	0x08002078
 8001fec:	0800207c 	.word	0x0800207c

08001ff0 <_init>:
 8001ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff2:	bf00      	nop
 8001ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff6:	bc08      	pop	{r3}
 8001ff8:	469e      	mov	lr, r3
 8001ffa:	4770      	bx	lr

08001ffc <_fini>:
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffe:	bf00      	nop
 8002000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002002:	bc08      	pop	{r3}
 8002004:	469e      	mov	lr, r3
 8002006:	4770      	bx	lr
