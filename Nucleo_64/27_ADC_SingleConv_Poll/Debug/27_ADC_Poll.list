
27_ADC_Poll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d34  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec0  08003ec0  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec0  08003ec0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec0  08003ec0  00004ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ec4  08003ec4  00004ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ec8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  08003f24  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08003f24  000052a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf0e  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0b  00000000  00000000  00011f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00013ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  00014bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a94  00000000  00000000  00015615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f313  00000000  00000000  0002d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da59  00000000  00000000  0003c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000c9e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cda60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e28 	.word	0x08003e28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003e28 	.word	0x08003e28

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint16_t AD_RES = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fbb7 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f847 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f9ab 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000162:	f000 f97f 	bl	8000464 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000166:	f000 f89d 	bl	80002a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800016a:	f000 f8d9 	bl	8000320 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800016e:	2100      	movs	r1, #0
 8000170:	4818      	ldr	r0, [pc, #96]	@ (80001d4 <main+0x88>)
 8000172:	f002 f9f9 	bl	8002568 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000176:	4818      	ldr	r0, [pc, #96]	@ (80001d8 <main+0x8c>)
 8000178:	f001 f858 	bl	800122c <HAL_ADCEx_Calibration_Start>

  TIM1->CCR1 = 65000;
 800017c:	4b17      	ldr	r3, [pc, #92]	@ (80001dc <main+0x90>)
 800017e:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8000182:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(2000);
 8000184:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000188:	f000 fc00 	bl	800098c <HAL_Delay>
  TIM1->CCR1 = 0;
 800018c:	4b13      	ldr	r3, [pc, #76]	@ (80001dc <main+0x90>)
 800018e:	2200      	movs	r2, #0
 8000190:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Start ADC
	  HAL_ADC_Start(&hadc1);
 8000192:	4811      	ldr	r0, [pc, #68]	@ (80001d8 <main+0x8c>)
 8000194:	f000 fcf6 	bl	8000b84 <HAL_ADC_Start>

	  //Poll ADC1 Peripheral & timeout=1ms
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000198:	2101      	movs	r1, #1
 800019a:	480f      	ldr	r0, [pc, #60]	@ (80001d8 <main+0x8c>)
 800019c:	f000 fda0 	bl	8000ce0 <HAL_ADC_PollForConversion>

	  //Read ADC Conversion & Map it to PWM dutycycle
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 80001a0:	480d      	ldr	r0, [pc, #52]	@ (80001d8 <main+0x8c>)
 80001a2:	f000 fea3 	bl	8000eec <HAL_ADC_GetValue>
 80001a6:	4603      	mov	r3, r0
 80001a8:	80fb      	strh	r3, [r7, #6]
	  TIM1->CCR1 = (AD_RES<<4);
 80001aa:	88fb      	ldrh	r3, [r7, #6]
 80001ac:	4a0b      	ldr	r2, [pc, #44]	@ (80001dc <main+0x90>)
 80001ae:	011b      	lsls	r3, r3, #4
 80001b0:	6353      	str	r3, [r2, #52]	@ 0x34

	  sprintf(MSG, "ADC: %d\n\r", AD_RES);
 80001b2:	88fb      	ldrh	r3, [r7, #6]
 80001b4:	461a      	mov	r2, r3
 80001b6:	490a      	ldr	r1, [pc, #40]	@ (80001e0 <main+0x94>)
 80001b8:	480a      	ldr	r0, [pc, #40]	@ (80001e4 <main+0x98>)
 80001ba:	f003 f985 	bl	80034c8 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80001be:	2364      	movs	r3, #100	@ 0x64
 80001c0:	2220      	movs	r2, #32
 80001c2:	4908      	ldr	r1, [pc, #32]	@ (80001e4 <main+0x98>)
 80001c4:	4808      	ldr	r0, [pc, #32]	@ (80001e8 <main+0x9c>)
 80001c6:	f002 ffaa 	bl	800311e <HAL_UART_Transmit>

	  HAL_Delay(10);
 80001ca:	200a      	movs	r0, #10
 80001cc:	f000 fbde 	bl	800098c <HAL_Delay>
  {
 80001d0:	bf00      	nop
 80001d2:	e7de      	b.n	8000192 <main+0x46>
 80001d4:	200000a8 	.word	0x200000a8
 80001d8:	20000078 	.word	0x20000078
 80001dc:	40012c00 	.word	0x40012c00
 80001e0:	08003e40 	.word	0x08003e40
 80001e4:	20000138 	.word	0x20000138
 80001e8:	200000f0 	.word	0x200000f0

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	@ 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f984 	bl	8003508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000238:	f44f 13a0 	mov.w	r3, #1310720	@ 0x140000
 800023c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fb6c 	bl	8001920 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024e:	f000 f9a1 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fdd8 	bl	8001e24 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 f98b 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000282:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 ff58 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000296:	f000 f97d 	bl	8000594 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3750      	adds	r7, #80	@ 0x50
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002b6:	4a19      	ldr	r2, [pc, #100]	@ (800031c <MX_ADC1_Init+0x78>)
 80002b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ba:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c6:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002ce:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e0:	480d      	ldr	r0, [pc, #52]	@ (8000318 <MX_ADC1_Init+0x74>)
 80002e2:	f000 fb77 	bl	80009d4 <HAL_ADC_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002ec:	f000 f952 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002f0:	2307      	movs	r3, #7
 80002f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_ADC1_Init+0x74>)
 8000302:	f000 fdff 	bl	8000f04 <HAL_ADC_ConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800030c:	f000 f942 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000078 	.word	0x20000078
 800031c:	40012400 	.word	0x40012400

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	@ 0x58
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2220      	movs	r2, #32
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f003 f8d5 	bl	8003508 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800035e:	4b3f      	ldr	r3, [pc, #252]	@ (800045c <MX_TIM1_Init+0x13c>)
 8000360:	4a3f      	ldr	r2, [pc, #252]	@ (8000460 <MX_TIM1_Init+0x140>)
 8000362:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000364:	4b3d      	ldr	r3, [pc, #244]	@ (800045c <MX_TIM1_Init+0x13c>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b3c      	ldr	r3, [pc, #240]	@ (800045c <MX_TIM1_Init+0x13c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000370:	4b3a      	ldr	r3, [pc, #232]	@ (800045c <MX_TIM1_Init+0x13c>)
 8000372:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b38      	ldr	r3, [pc, #224]	@ (800045c <MX_TIM1_Init+0x13c>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800037e:	4b37      	ldr	r3, [pc, #220]	@ (800045c <MX_TIM1_Init+0x13c>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000384:	4b35      	ldr	r3, [pc, #212]	@ (800045c <MX_TIM1_Init+0x13c>)
 8000386:	2280      	movs	r2, #128	@ 0x80
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038a:	4834      	ldr	r0, [pc, #208]	@ (800045c <MX_TIM1_Init+0x13c>)
 800038c:	f002 f844 	bl	8002418 <HAL_TIM_Base_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000396:	f000 f8fd 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800039e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003a4:	4619      	mov	r1, r3
 80003a6:	482d      	ldr	r0, [pc, #180]	@ (800045c <MX_TIM1_Init+0x13c>)
 80003a8:	f002 fa42 	bl	8002830 <HAL_TIM_ConfigClockSource>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003b2:	f000 f8ef 	bl	8000594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b6:	4829      	ldr	r0, [pc, #164]	@ (800045c <MX_TIM1_Init+0x13c>)
 80003b8:	f002 f87d 	bl	80024b6 <HAL_TIM_PWM_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003c2:	f000 f8e7 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003d2:	4619      	mov	r1, r3
 80003d4:	4821      	ldr	r0, [pc, #132]	@ (800045c <MX_TIM1_Init+0x13c>)
 80003d6:	f002 fda3 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003e0:	f000 f8d8 	bl	8000594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	2360      	movs	r3, #96	@ 0x60
 80003e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003f0:	2300      	movs	r3, #0
 80003f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80003f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	4814      	ldr	r0, [pc, #80]	@ (800045c <MX_TIM1_Init+0x13c>)
 800040c:	f002 f94e 	bl	80026ac <HAL_TIM_PWM_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000416:	f000 f8bd 	bl	8000594 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800042e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000432:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4807      	ldr	r0, [pc, #28]	@ (800045c <MX_TIM1_Init+0x13c>)
 800043e:	f002 fdcd 	bl	8002fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000448:	f000 f8a4 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800044c:	4803      	ldr	r0, [pc, #12]	@ (800045c <MX_TIM1_Init+0x13c>)
 800044e:	f000 f933 	bl	80006b8 <HAL_TIM_MspPostInit>

}
 8000452:	bf00      	nop
 8000454:	3758      	adds	r7, #88	@ 0x58
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200000a8 	.word	0x200000a8
 8000460:	40012c00 	.word	0x40012c00

08000464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 800046a:	4a12      	ldr	r2, [pc, #72]	@ (80004b4 <MX_USART2_UART_Init+0x50>)
 800046c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046e:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000470:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_USART2_UART_Init+0x4c>)
 800049c:	f002 fdef 	bl	800307e <HAL_UART_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004a6:	f000 f875 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000f0 	.word	0x200000f0
 80004b4:	40004400 	.word	0x40004400

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004d2:	f043 0310 	orr.w	r3, r3, #16
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0310 	and.w	r3, r3, #16
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e4:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a26      	ldr	r2, [pc, #152]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a20      	ldr	r2, [pc, #128]	@ (8000584 <MX_GPIO_Init+0xcc>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1a      	ldr	r2, [pc, #104]	@ (8000584 <MX_GPIO_Init+0xcc>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2120      	movs	r1, #32
 8000530:	4815      	ldr	r0, [pc, #84]	@ (8000588 <MX_GPIO_Init+0xd0>)
 8000532:	f001 f9bb 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053c:	4b13      	ldr	r3, [pc, #76]	@ (800058c <MX_GPIO_Init+0xd4>)
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4811      	ldr	r0, [pc, #68]	@ (8000590 <MX_GPIO_Init+0xd8>)
 800054c:	f001 f82a 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000550:	2320      	movs	r3, #32
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <MX_GPIO_Init+0xd0>)
 8000568:	f001 f81c 	bl	80015a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	2028      	movs	r0, #40	@ 0x28
 8000572:	f000 ffe0 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000576:	2028      	movs	r0, #40	@ 0x28
 8000578:	f000 fff9 	bl	800156e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057c:	bf00      	nop
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800
 800058c:	10110000 	.word	0x10110000
 8000590:	40011000 	.word	0x40011000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <HAL_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <HAL_MspInit+0x5c>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_MspInit+0x60>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <HAL_MspInit+0x60>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <HAL_ADC_MspInit+0x6c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d121      	bne.n	8000668 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <HAL_ADC_MspInit+0x70>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <HAL_ADC_MspInit+0x70>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <HAL_ADC_MspInit+0x70>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <HAL_ADC_MspInit+0x70>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a0c      	ldr	r2, [pc, #48]	@ (8000674 <HAL_ADC_MspInit+0x70>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_ADC_MspInit+0x70>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_ADC_MspInit+0x74>)
 8000664:	f000 ff9e 	bl	80015a4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40012400 	.word	0x40012400
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_TIM_Base_MspInit+0x34>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d10b      	bne.n	80006a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 8000694:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40012c00 	.word	0x40012c00
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <HAL_TIM_MspPostInit+0x5c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d118      	bne.n	800070a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <HAL_TIM_MspPostInit+0x60>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <HAL_TIM_MspPostInit+0x60>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <HAL_TIM_MspPostInit+0x60>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <HAL_TIM_MspPostInit+0x64>)
 8000706:	f000 ff4d 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40012c00 	.word	0x40012c00
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <HAL_UART_MspInit+0x70>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d123      	bne.n	8000788 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <HAL_UART_MspInit+0x74>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <HAL_UART_MspInit+0x74>)
 8000746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074a:	61d3      	str	r3, [r2, #28]
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <HAL_UART_MspInit+0x74>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_UART_MspInit+0x74>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <HAL_UART_MspInit+0x74>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <HAL_UART_MspInit+0x74>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000770:	230c      	movs	r3, #12
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <HAL_UART_MspInit+0x78>)
 8000784:	f000 ff0e 	bl	80015a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40004400 	.word	0x40004400
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8b2 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007fc:	f001 f86e 	bl	80018dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f002 fe70 	bl	8003518 <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20005000 	.word	0x20005000
 8000864:	00000400 	.word	0x00000400
 8000868:	20000158 	.word	0x20000158
 800086c:	200002a8 	.word	0x200002a8

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff fff8 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000882:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000898:	4c09      	ldr	r4, [pc, #36]	@ (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f002 fe3d 	bl	8003524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fc4f 	bl	800014c <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008b8:	08003ec8 	.word	0x08003ec8
  ldr r2, =_sbss
 80008bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c0:	200002a8 	.word	0x200002a8

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 fe21 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fe5c 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fe39 	bl	800158a <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 fe01 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	@ (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	2000015c 	.word	0x2000015c

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	@ (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	2000015c 	.word	0x2000015c

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fff0 	bl	8000978 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffe0 	bl	8000978 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d101      	bne.n	80009f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e0be      	b.n	8000b74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d109      	bne.n	8000a18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fdf6 	bl	8000604 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 fbc5 	bl	80011a8 <ADC_ConversionStop_Disable>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f040 8099 	bne.w	8000b62 <HAL_ADC_Init+0x18e>
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f040 8095 	bne.w	8000b62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a40:	f023 0302 	bic.w	r3, r3, #2
 8000a44:	f043 0202 	orr.w	r2, r3, #2
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7b1b      	ldrb	r3, [r3, #12]
 8000a5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a6c:	d003      	beq.n	8000a76 <HAL_ADC_Init+0xa2>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d102      	bne.n	8000a7c <HAL_ADC_Init+0xa8>
 8000a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7a:	e000      	b.n	8000a7e <HAL_ADC_Init+0xaa>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7d1b      	ldrb	r3, [r3, #20]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d119      	bne.n	8000ac0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	035a      	lsls	r2, r3, #13
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	e00b      	b.n	8000ac0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aac:	f043 0220 	orr.w	r2, r3, #32
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab8:	f043 0201 	orr.w	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <HAL_ADC_Init+0x1a8>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000af0:	d003      	beq.n	8000afa <HAL_ADC_Init+0x126>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d104      	bne.n	8000b04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	051b      	lsls	r3, r3, #20
 8000b02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_ADC_Init+0x1ac>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d10b      	bne.n	8000b40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b32:	f023 0303 	bic.w	r3, r3, #3
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b3e:	e018      	b.n	8000b72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b44:	f023 0312 	bic.w	r3, r3, #18
 8000b48:	f043 0210 	orr.w	r2, r3, #16
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b60:	e007      	b.n	8000b72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b66:	f043 0210 	orr.w	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b80:	ff1f0efe 	.word	0xff1f0efe

08000b84 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <HAL_ADC_Start+0x1a>
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	e098      	b.n	8000cd0 <HAL_ADC_Start+0x14c>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 faa4 	bl	80010f4 <ADC_Enable>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8087 	bne.w	8000cc6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a41      	ldr	r2, [pc, #260]	@ (8000cd8 <HAL_ADC_Start+0x154>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d105      	bne.n	8000be2 <HAL_ADC_Start+0x5e>
 8000bd6:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <HAL_ADC_Start+0x158>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d115      	bne.n	8000c0e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d026      	beq.n	8000c4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c0c:	e01d      	b.n	8000c4a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000cdc <HAL_ADC_Start+0x158>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d004      	beq.n	8000c2e <HAL_ADC_Start+0xaa>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd8 <HAL_ADC_Start+0x154>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10d      	bne.n	8000c4a <HAL_ADC_Start+0xc6>
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <HAL_ADC_Start+0x158>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c42:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5a:	f023 0206 	bic.w	r2, r3, #6
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c62:	e002      	b.n	8000c6a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f06f 0202 	mvn.w	r2, #2
 8000c7a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c8a:	d113      	bne.n	8000cb4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c90:	4a11      	ldr	r2, [pc, #68]	@ (8000cd8 <HAL_ADC_Start+0x154>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d105      	bne.n	8000ca2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_ADC_Start+0x158>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d108      	bne.n	8000cb4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	e00c      	b.n	8000cce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	e003      	b.n	8000cce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40012800 	.word	0x40012800
 8000cdc:	40012400 	.word	0x40012400

08000ce0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000cf6:	f7ff fe3f 	bl	8000978 <HAL_GetTick>
 8000cfa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0e:	f043 0220 	orr.w	r2, r3, #32
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0d3      	b.n	8000eca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d131      	bne.n	8000d94 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d36:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d12a      	bne.n	8000d94 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d3e:	e021      	b.n	8000d84 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d46:	d01d      	beq.n	8000d84 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d007      	beq.n	8000d5e <HAL_ADC_PollForConversion+0x7e>
 8000d4e:	f7ff fe13 	bl	8000978 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d212      	bcs.n	8000d84 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10b      	bne.n	8000d84 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d70:	f043 0204 	orr.w	r2, r3, #4
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e0a2      	b.n	8000eca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0d6      	beq.n	8000d40 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d92:	e070      	b.n	8000e76 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d94:	4b4f      	ldr	r3, [pc, #316]	@ (8000ed4 <HAL_ADC_PollForConversion+0x1f4>)
 8000d96:	681c      	ldr	r4, [r3, #0]
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f001 fa87 	bl	80022ac <HAL_RCCEx_GetPeriphCLKFreq>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6919      	ldr	r1, [r3, #16]
 8000daa:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed8 <HAL_ADC_PollForConversion+0x1f8>)
 8000dac:	400b      	ands	r3, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d118      	bne.n	8000de4 <HAL_ADC_PollForConversion+0x104>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68d9      	ldr	r1, [r3, #12]
 8000db8:	4b48      	ldr	r3, [pc, #288]	@ (8000edc <HAL_ADC_PollForConversion+0x1fc>)
 8000dba:	400b      	ands	r3, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_ADC_PollForConversion+0x104>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6919      	ldr	r1, [r3, #16]
 8000dc6:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <HAL_ADC_PollForConversion+0x200>)
 8000dc8:	400b      	ands	r3, r1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d108      	bne.n	8000de0 <HAL_ADC_PollForConversion+0x100>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68d9      	ldr	r1, [r3, #12]
 8000dd4:	4b43      	ldr	r3, [pc, #268]	@ (8000ee4 <HAL_ADC_PollForConversion+0x204>)
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <HAL_ADC_PollForConversion+0x100>
 8000ddc:	2314      	movs	r3, #20
 8000dde:	e020      	b.n	8000e22 <HAL_ADC_PollForConversion+0x142>
 8000de0:	2329      	movs	r3, #41	@ 0x29
 8000de2:	e01e      	b.n	8000e22 <HAL_ADC_PollForConversion+0x142>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6919      	ldr	r1, [r3, #16]
 8000dea:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee0 <HAL_ADC_PollForConversion+0x200>)
 8000dec:	400b      	ands	r3, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d106      	bne.n	8000e00 <HAL_ADC_PollForConversion+0x120>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68d9      	ldr	r1, [r3, #12]
 8000df8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <HAL_ADC_PollForConversion+0x204>)
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00d      	beq.n	8000e1c <HAL_ADC_PollForConversion+0x13c>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6919      	ldr	r1, [r3, #16]
 8000e06:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <HAL_ADC_PollForConversion+0x208>)
 8000e08:	400b      	ands	r3, r1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d108      	bne.n	8000e20 <HAL_ADC_PollForConversion+0x140>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68d9      	ldr	r1, [r3, #12]
 8000e14:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <HAL_ADC_PollForConversion+0x208>)
 8000e16:	400b      	ands	r3, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_ADC_PollForConversion+0x140>
 8000e1c:	2354      	movs	r3, #84	@ 0x54
 8000e1e:	e000      	b.n	8000e22 <HAL_ADC_PollForConversion+0x142>
 8000e20:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e22:	fb02 f303 	mul.w	r3, r2, r3
 8000e26:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e28:	e021      	b.n	8000e6e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d01a      	beq.n	8000e68 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <HAL_ADC_PollForConversion+0x168>
 8000e38:	f7ff fd9e 	bl	8000978 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d20f      	bcs.n	8000e68 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d90b      	bls.n	8000e68 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e54:	f043 0204 	orr.w	r2, r3, #4
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e030      	b.n	8000eca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d8d9      	bhi.n	8000e2a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f06f 0212 	mvn.w	r2, #18
 8000e7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e96:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e9a:	d115      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d111      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d105      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	f043 0201 	orr.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	24924924 	.word	0x24924924
 8000edc:	00924924 	.word	0x00924924
 8000ee0:	12492492 	.word	0x12492492
 8000ee4:	00492492 	.word	0x00492492
 8000ee8:	00249249 	.word	0x00249249

08000eec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x20>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e0dc      	b.n	80010de <HAL_ADC_ConfigChannel+0x1da>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b06      	cmp	r3, #6
 8000f32:	d81c      	bhi.n	8000f6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	3b05      	subs	r3, #5
 8000f46:	221f      	movs	r2, #31
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4019      	ands	r1, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b05      	subs	r3, #5
 8000f60:	fa00 f203 	lsl.w	r2, r0, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6c:	e03c      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b0c      	cmp	r3, #12
 8000f74:	d81c      	bhi.n	8000fb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	3b23      	subs	r3, #35	@ 0x23
 8000f88:	221f      	movs	r2, #31
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4019      	ands	r1, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3b23      	subs	r3, #35	@ 0x23
 8000fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fae:	e01b      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b41      	subs	r3, #65	@ 0x41
 8000fc2:	221f      	movs	r2, #31
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4019      	ands	r1, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b41      	subs	r3, #65	@ 0x41
 8000fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d91c      	bls.n	800102a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68d9      	ldr	r1, [r3, #12]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	3b1e      	subs	r3, #30
 8001002:	2207      	movs	r2, #7
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	4019      	ands	r1, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6898      	ldr	r0, [r3, #8]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	3b1e      	subs	r3, #30
 800101c:	fa00 f203 	lsl.w	r2, r0, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	e019      	b.n	800105e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6919      	ldr	r1, [r3, #16]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	2207      	movs	r2, #7
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	4019      	ands	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6898      	ldr	r0, [r3, #8]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	fa00 f203 	lsl.w	r2, r0, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d003      	beq.n	800106e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800106a:	2b11      	cmp	r3, #17
 800106c:	d132      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1d      	ldr	r2, [pc, #116]	@ (80010e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d125      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d126      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001094:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b10      	cmp	r3, #16
 800109c:	d11a      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_ADC_ConfigChannel+0x1e8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	0c9a      	lsrs	r2, r3, #18
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010b4:	e002      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f9      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x1b2>
 80010c2:	e007      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c8:	f043 0220 	orr.w	r2, r3, #32
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40012400 	.word	0x40012400
 80010ec:	20000000 	.word	0x20000000
 80010f0:	431bde83 	.word	0x431bde83

080010f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b01      	cmp	r3, #1
 8001110:	d040      	beq.n	8001194 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <ADC_Enable+0xac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <ADC_Enable+0xb0>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	0c9b      	lsrs	r3, r3, #18
 800112e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001130:	e002      	b.n	8001138 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3b01      	subs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800113e:	f7ff fc1b 	bl	8000978 <HAL_GetTick>
 8001142:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	e01f      	b.n	8001186 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001146:	f7ff fc17 	bl	8000978 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d918      	bls.n	8001186 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d011      	beq.n	8001186 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001166:	f043 0210 	orr.w	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e007      	b.n	8001196 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d1d8      	bne.n	8001146 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12e      	bne.n	8001220 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011d2:	f7ff fbd1 	bl	8000978 <HAL_GetTick>
 80011d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	e01b      	b.n	8001212 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011da:	f7ff fbcd 	bl	8000978 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d914      	bls.n	8001212 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10d      	bne.n	8001212 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e007      	b.n	8001222 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d0dc      	beq.n	80011da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADCEx_Calibration_Start+0x1e>
 8001246:	2302      	movs	r3, #2
 8001248:	e097      	b.n	800137a <HAL_ADCEx_Calibration_Start+0x14e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa8 	bl	80011a8 <ADC_ConversionStop_Disable>
 8001258:	4603      	mov	r3, r0
 800125a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff49 	bl	80010f4 <ADC_Enable>
 8001262:	4603      	mov	r3, r0
 8001264:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 8081 	bne.w	8001370 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001272:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001276:	f023 0302 	bic.w	r3, r3, #2
 800127a:	f043 0202 	orr.w	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001282:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <HAL_ADCEx_Calibration_Start+0x158>)
 8001284:	681c      	ldr	r4, [r3, #0]
 8001286:	2002      	movs	r0, #2
 8001288:	f001 f810 	bl	80022ac <HAL_RCCEx_GetPeriphCLKFreq>
 800128c:	4603      	mov	r3, r0
 800128e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001292:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001294:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001296:	e002      	b.n	800129e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3b01      	subs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f9      	bne.n	8001298 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012b4:	f7ff fb60 	bl	8000978 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012ba:	e01b      	b.n	80012f4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012bc:	f7ff fb5c 	bl	8000978 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d914      	bls.n	80012f4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00d      	beq.n	80012f4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	f023 0312 	bic.w	r3, r3, #18
 80012e0:	f043 0210 	orr.w	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e042      	b.n	800137a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1dc      	bne.n	80012bc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001312:	f7ff fb31 	bl	8000978 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001318:	e01b      	b.n	8001352 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800131a:	f7ff fb2d 	bl	8000978 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b0a      	cmp	r3, #10
 8001326:	d914      	bls.n	8001352 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f023 0312 	bic.w	r3, r3, #18
 800133e:	f043 0210 	orr.w	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e013      	b.n	800137a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1dc      	bne.n	800131a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	f023 0303 	bic.w	r3, r3, #3
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4906      	ldr	r1, [pc, #24]	@ (8001420 <__NVIC_EnableIRQ+0x34>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff90 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff2d 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff42 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff35 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b08b      	sub	sp, #44	@ 0x2c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e169      	b.n	800188c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015b8:	2201      	movs	r2, #1
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8158 	bne.w	8001886 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a9a      	ldr	r2, [pc, #616]	@ (8001844 <HAL_GPIO_Init+0x2a0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d05e      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015e0:	4a98      	ldr	r2, [pc, #608]	@ (8001844 <HAL_GPIO_Init+0x2a0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d875      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015e6:	4a98      	ldr	r2, [pc, #608]	@ (8001848 <HAL_GPIO_Init+0x2a4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d058      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015ec:	4a96      	ldr	r2, [pc, #600]	@ (8001848 <HAL_GPIO_Init+0x2a4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d86f      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015f2:	4a96      	ldr	r2, [pc, #600]	@ (800184c <HAL_GPIO_Init+0x2a8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d052      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015f8:	4a94      	ldr	r2, [pc, #592]	@ (800184c <HAL_GPIO_Init+0x2a8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d869      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015fe:	4a94      	ldr	r2, [pc, #592]	@ (8001850 <HAL_GPIO_Init+0x2ac>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d04c      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001604:	4a92      	ldr	r2, [pc, #584]	@ (8001850 <HAL_GPIO_Init+0x2ac>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d863      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800160a:	4a92      	ldr	r2, [pc, #584]	@ (8001854 <HAL_GPIO_Init+0x2b0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d046      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001610:	4a90      	ldr	r2, [pc, #576]	@ (8001854 <HAL_GPIO_Init+0x2b0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d85d      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 8001616:	2b12      	cmp	r3, #18
 8001618:	d82a      	bhi.n	8001670 <HAL_GPIO_Init+0xcc>
 800161a:	2b12      	cmp	r3, #18
 800161c:	d859      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800161e:	a201      	add	r2, pc, #4	@ (adr r2, 8001624 <HAL_GPIO_Init+0x80>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800169f 	.word	0x0800169f
 8001628:	08001679 	.word	0x08001679
 800162c:	0800168b 	.word	0x0800168b
 8001630:	080016cd 	.word	0x080016cd
 8001634:	080016d3 	.word	0x080016d3
 8001638:	080016d3 	.word	0x080016d3
 800163c:	080016d3 	.word	0x080016d3
 8001640:	080016d3 	.word	0x080016d3
 8001644:	080016d3 	.word	0x080016d3
 8001648:	080016d3 	.word	0x080016d3
 800164c:	080016d3 	.word	0x080016d3
 8001650:	080016d3 	.word	0x080016d3
 8001654:	080016d3 	.word	0x080016d3
 8001658:	080016d3 	.word	0x080016d3
 800165c:	080016d3 	.word	0x080016d3
 8001660:	080016d3 	.word	0x080016d3
 8001664:	080016d3 	.word	0x080016d3
 8001668:	08001681 	.word	0x08001681
 800166c:	08001695 	.word	0x08001695
 8001670:	4a79      	ldr	r2, [pc, #484]	@ (8001858 <HAL_GPIO_Init+0x2b4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001676:	e02c      	b.n	80016d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e029      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	3304      	adds	r3, #4
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e024      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	3308      	adds	r3, #8
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e01f      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	330c      	adds	r3, #12
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e01a      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a6:	2304      	movs	r3, #4
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e013      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	611a      	str	r2, [r3, #16]
          break;
 80016be:	e009      	b.n	80016d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	615a      	str	r2, [r3, #20]
          break;
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          break;
 80016d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	@ 0xff
 80016d8:	d801      	bhi.n	80016de <HAL_GPIO_Init+0x13a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_Init+0x13e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	@ 0xff
 80016e8:	d802      	bhi.n	80016f0 <HAL_GPIO_Init+0x14c>
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x152>
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	3b08      	subs	r3, #8
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	210f      	movs	r1, #15
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	431a      	orrs	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80b1 	beq.w	8001886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001724:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <HAL_GPIO_Init+0x2b8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a4c      	ldr	r2, [pc, #304]	@ (800185c <HAL_GPIO_Init+0x2b8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_GPIO_Init+0x2b8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173c:	4a48      	ldr	r2, [pc, #288]	@ (8001860 <HAL_GPIO_Init+0x2bc>)
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a40      	ldr	r2, [pc, #256]	@ (8001864 <HAL_GPIO_Init+0x2c0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_Init+0x1ec>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3f      	ldr	r2, [pc, #252]	@ (8001868 <HAL_GPIO_Init+0x2c4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1e8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3e      	ldr	r2, [pc, #248]	@ (800186c <HAL_GPIO_Init+0x2c8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1e4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3d      	ldr	r2, [pc, #244]	@ (8001870 <HAL_GPIO_Init+0x2cc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1e0>
 8001780:	2303      	movs	r3, #3
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001784:	2304      	movs	r3, #4
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001790:	2300      	movs	r3, #0
 8001792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a2:	492f      	ldr	r1, [pc, #188]	@ (8001860 <HAL_GPIO_Init+0x2bc>)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	492c      	ldr	r1, [pc, #176]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4928      	ldr	r1, [pc, #160]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e4:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	4922      	ldr	r1, [pc, #136]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	491e      	ldr	r1, [pc, #120]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4918      	ldr	r1, [pc, #96]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	4914      	ldr	r1, [pc, #80]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d021      	beq.n	8001878 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	490e      	ldr	r1, [pc, #56]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e021      	b.n	8001886 <HAL_GPIO_Init+0x2e2>
 8001842:	bf00      	nop
 8001844:	10320000 	.word	0x10320000
 8001848:	10310000 	.word	0x10310000
 800184c:	10220000 	.word	0x10220000
 8001850:	10210000 	.word	0x10210000
 8001854:	10120000 	.word	0x10120000
 8001858:	10110000 	.word	0x10110000
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40011000 	.word	0x40011000
 8001870:	40011400 	.word	0x40011400
 8001874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	43db      	mvns	r3, r3
 8001880:	4909      	ldr	r1, [pc, #36]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 8001882:	4013      	ands	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f ae8e 	bne.w	80015b8 <HAL_GPIO_Init+0x14>
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	372c      	adds	r7, #44	@ 0x2c
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f806 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e272      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8087 	beq.w	8001a4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001940:	4b92      	ldr	r3, [pc, #584]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b04      	cmp	r3, #4
 800194a:	d00c      	beq.n	8001966 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800194c:	4b8f      	ldr	r3, [pc, #572]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d112      	bne.n	800197e <HAL_RCC_OscConfig+0x5e>
 8001958:	4b8c      	ldr	r3, [pc, #560]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001964:	d10b      	bne.n	800197e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d06c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x12c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d168      	bne.n	8001a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e24c      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x76>
 8001988:	4b80      	ldr	r3, [pc, #512]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e02e      	b.n	80019f4 <HAL_RCC_OscConfig+0xd4>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x98>
 800199e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7a      	ldr	r2, [pc, #488]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b78      	ldr	r3, [pc, #480]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a77      	ldr	r2, [pc, #476]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xd4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0xbc>
 80019c2:	4b72      	ldr	r3, [pc, #456]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a71      	ldr	r2, [pc, #452]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b6f      	ldr	r3, [pc, #444]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6e      	ldr	r2, [pc, #440]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xd4>
 80019dc:	4b6b      	ldr	r3, [pc, #428]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b68      	ldr	r3, [pc, #416]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a67      	ldr	r2, [pc, #412]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe ffbc 	bl	8000978 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7fe ffb8 	bl	8000978 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e200      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xe4>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe ffa8 	bl	8000978 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7fe ffa4 	bl	8000978 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1ec      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	4b53      	ldr	r3, [pc, #332]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x10c>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d063      	beq.n	8001b22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a66:	4b49      	ldr	r3, [pc, #292]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d11c      	bne.n	8001aac <HAL_RCC_OscConfig+0x18c>
 8001a72:	4b46      	ldr	r3, [pc, #280]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	4b43      	ldr	r3, [pc, #268]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e1c0      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b3d      	ldr	r3, [pc, #244]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4939      	ldr	r1, [pc, #228]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7fe ff5d 	bl	8000978 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7fe ff59 	bl	8000978 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1a1      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4927      	ldr	r1, [pc, #156]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7fe ff3c 	bl	8000978 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7fe ff38 	bl	8000978 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e180      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d03a      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d019      	beq.n	8001b6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7fe ff1c 	bl	8000978 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7fe ff18 	bl	8000978 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e160      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 face 	bl	8002104 <RCC_Delay>
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ff02 	bl	8000978 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b76:	e00f      	b.n	8001b98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7fe fefe 	bl	8000978 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d908      	bls.n	8001b98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e146      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	42420000 	.word	0x42420000
 8001b94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	4b92      	ldr	r3, [pc, #584]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e9      	bne.n	8001b78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a6 	beq.w	8001cfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10d      	bne.n	8001bde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b88      	ldr	r3, [pc, #544]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a87      	ldr	r2, [pc, #540]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b85      	ldr	r3, [pc, #532]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b82      	ldr	r3, [pc, #520]	@ (8001de8 <HAL_RCC_OscConfig+0x4c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bea:	4b7f      	ldr	r3, [pc, #508]	@ (8001de8 <HAL_RCC_OscConfig+0x4c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7e      	ldr	r2, [pc, #504]	@ (8001de8 <HAL_RCC_OscConfig+0x4c8>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe febf 	bl	8000978 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7fe febb 	bl	8000978 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b64      	cmp	r3, #100	@ 0x64
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e103      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	4b75      	ldr	r3, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x4c8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x312>
 8001c24:	4b6f      	ldr	r3, [pc, #444]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a6e      	ldr	r2, [pc, #440]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e02d      	b.n	8001c8e <HAL_RCC_OscConfig+0x36e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x334>
 8001c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a69      	ldr	r2, [pc, #420]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	4b67      	ldr	r3, [pc, #412]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4a66      	ldr	r2, [pc, #408]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	f023 0304 	bic.w	r3, r3, #4
 8001c50:	6213      	str	r3, [r2, #32]
 8001c52:	e01c      	b.n	8001c8e <HAL_RCC_OscConfig+0x36e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d10c      	bne.n	8001c76 <HAL_RCC_OscConfig+0x356>
 8001c5c:	4b61      	ldr	r3, [pc, #388]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a60      	ldr	r2, [pc, #384]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	4b5e      	ldr	r3, [pc, #376]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e00b      	b.n	8001c8e <HAL_RCC_OscConfig+0x36e>
 8001c76:	4b5b      	ldr	r3, [pc, #364]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b58      	ldr	r3, [pc, #352]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a57      	ldr	r2, [pc, #348]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d015      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fe6f 	bl	8000978 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fe6b 	bl	8000978 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0b1      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ee      	beq.n	8001c9e <HAL_RCC_OscConfig+0x37e>
 8001cc0:	e014      	b.n	8001cec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fe59 	bl	8000978 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe fe55 	bl	8000978 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e09b      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	4b40      	ldr	r3, [pc, #256]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d105      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8087 	beq.w	8001e16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	4b36      	ldr	r3, [pc, #216]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d061      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d146      	bne.n	8001daa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe fe29 	bl	8000978 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe fe25 	bl	8000978 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e06d      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4921      	ldr	r1, [pc, #132]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a19      	ldr	r1, [r3, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	430b      	orrs	r3, r1
 8001d76:	491b      	ldr	r1, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe fdf9 	bl	8000978 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe fdf5 	bl	8000978 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e03d      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x46a>
 8001da8:	e035      	b.n	8001e16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fde2 	bl	8000978 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe fdde 	bl	8000978 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e026      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x498>
 8001dd6:	e01e      	b.n	8001e16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e019      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
 8001dec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_RCC_OscConfig+0x500>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0d0      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d910      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b67      	ldr	r3, [pc, #412]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0207 	bic.w	r2, r3, #7
 8001e4e:	4965      	ldr	r1, [pc, #404]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b63      	ldr	r3, [pc, #396]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0b8      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e80:	4b59      	ldr	r3, [pc, #356]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a58      	ldr	r2, [pc, #352]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e98:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ea2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b50      	ldr	r3, [pc, #320]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	494d      	ldr	r1, [pc, #308]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d040      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b47      	ldr	r3, [pc, #284]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d115      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e07f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e073      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06b      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f02:	4b39      	ldr	r3, [pc, #228]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f023 0203 	bic.w	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4936      	ldr	r1, [pc, #216]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fd30 	bl	8000978 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7fe fd2c 	bl	8000978 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e053      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 020c 	and.w	r2, r3, #12
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1eb      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d210      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4922      	ldr	r1, [pc, #136]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e032      	b.n	8001fda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4916      	ldr	r1, [pc, #88]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	490e      	ldr	r1, [pc, #56]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb2:	f000 f821 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	490a      	ldr	r1, [pc, #40]	@ (8001fec <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	5ccb      	ldrb	r3, [r1, r3]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fc8e 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08003e4c 	.word	0x08003e4c
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_RCC_GetSysClockFreq+0x94>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x30>
 8002022:	2b08      	cmp	r3, #8
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x36>
 8002026:	e027      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x98>)
 800202a:	613b      	str	r3, [r7, #16]
      break;
 800202c:	e027      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d010      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_RCC_GetSysClockFreq+0x94>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	0c5b      	lsrs	r3, r3, #17
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	fb03 f202 	mul.w	r2, r3, r2
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e004      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a0c      	ldr	r2, [pc, #48]	@ (800209c <HAL_RCC_GetSysClockFreq+0xa4>)
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	613b      	str	r3, [r7, #16]
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x98>)
 800207a:	613b      	str	r3, [r7, #16]
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	693b      	ldr	r3, [r7, #16]
}
 8002080:	4618      	mov	r0, r3
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	007a1200 	.word	0x007a1200
 8002094:	08003e64 	.word	0x08003e64
 8002098:	08003e74 	.word	0x08003e74
 800209c:	003d0900 	.word	0x003d0900

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b02      	ldr	r3, [pc, #8]	@ (80020b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff2 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08003e5c 	.word	0x08003e5c

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0adb      	lsrs	r3, r3, #11
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003e5c 	.word	0x08003e5c

08002104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <RCC_Delay+0x34>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <RCC_Delay+0x38>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0a5b      	lsrs	r3, r3, #9
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002120:	bf00      	nop
  }
  while (Delay --);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	60fa      	str	r2, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f9      	bne.n	8002120 <RCC_Delay+0x1c>
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000
 800213c:	10624dd3 	.word	0x10624dd3

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d07d      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002160:	4b4f      	ldr	r3, [pc, #316]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10d      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4b4c      	ldr	r3, [pc, #304]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4a4b      	ldr	r2, [pc, #300]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002176:	61d3      	str	r3, [r2, #28]
 8002178:	4b49      	ldr	r3, [pc, #292]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002184:	2301      	movs	r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b46      	ldr	r3, [pc, #280]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d118      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002194:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a42      	ldr	r2, [pc, #264]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a0:	f7fe fbea 	bl	8000978 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	e008      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a8:	f7fe fbe6 	bl	8000978 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	@ 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e06d      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b3a      	ldr	r3, [pc, #232]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021c6:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d02e      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d027      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021e4:	4b2e      	ldr	r3, [pc, #184]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ee:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021f4:	4b2c      	ldr	r3, [pc, #176]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021fa:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d014      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fbb5 	bl	8000978 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fbb1 	bl	8000978 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e036      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4917      	ldr	r1, [pc, #92]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	4313      	orrs	r3, r2
 8002244:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	490b      	ldr	r1, [pc, #44]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4904      	ldr	r1, [pc, #16]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42420440 	.word	0x42420440

080022ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	f200 808a 	bhi.w	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d045      	beq.n	8002368 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d075      	beq.n	80023ce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80022e2:	e082      	b.n	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80022e4:	4b46      	ldr	r3, [pc, #280]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80022ea:	4b45      	ldr	r3, [pc, #276]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d07b      	beq.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a41      	ldr	r2, [pc, #260]	@ (8002404 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	4a3b      	ldr	r2, [pc, #236]	@ (8002408 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002328:	4a38      	ldr	r2, [pc, #224]	@ (800240c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e004      	b.n	8002344 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4a34      	ldr	r2, [pc, #208]	@ (8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002344:	4b2e      	ldr	r3, [pc, #184]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002350:	d102      	bne.n	8002358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	61bb      	str	r3, [r7, #24]
      break;
 8002356:	e04a      	b.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
      break;
 8002366:	e042      	b.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002378:	d108      	bne.n	800238c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	e01f      	b.n	80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002396:	d109      	bne.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80023a4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e00f      	b.n	80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023b6:	d11c      	bne.n	80023f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d016      	beq.n	80023f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80023c4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80023c8:	61bb      	str	r3, [r7, #24]
      break;
 80023ca:	e012      	b.n	80023f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80023cc:	e011      	b.n	80023f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80023ce:	f7ff fe85 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	0b9b      	lsrs	r3, r3, #14
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	3301      	adds	r3, #1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	61bb      	str	r3, [r7, #24]
      break;
 80023e8:	e004      	b.n	80023f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80023ea:	bf00      	nop
 80023ec:	e002      	b.n	80023f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80023f2:	bf00      	nop
    }
  }
  return (frequency);
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	08003e78 	.word	0x08003e78
 8002408:	08003e88 	.word	0x08003e88
 800240c:	007a1200 	.word	0x007a1200
 8002410:	003d0900 	.word	0x003d0900
 8002414:	aaaaaaab 	.word	0xaaaaaaab

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe f91c 	bl	800067c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 fab2 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e041      	b.n	800254c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f839 	bl	8002554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f000 fa63 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
	...

08002568 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_TIM_PWM_Start+0x24>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e022      	b.n	80025d2 <HAL_TIM_PWM_Start+0x6a>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b04      	cmp	r3, #4
 8002590:	d109      	bne.n	80025a6 <HAL_TIM_PWM_Start+0x3e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	e015      	b.n	80025d2 <HAL_TIM_PWM_Start+0x6a>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d109      	bne.n	80025c0 <HAL_TIM_PWM_Start+0x58>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e008      	b.n	80025d2 <HAL_TIM_PWM_Start+0x6a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e05e      	b.n	8002698 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0x82>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025e8:	e013      	b.n	8002612 <HAL_TIM_PWM_Start+0xaa>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start+0x92>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025f8:	e00b      	b.n	8002612 <HAL_TIM_PWM_Start+0xaa>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d104      	bne.n	800260a <HAL_TIM_PWM_Start+0xa2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002608:	e003      	b.n	8002612 <HAL_TIM_PWM_Start+0xaa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fc5c 	bl	8002ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1e      	ldr	r2, [pc, #120]	@ (80026a0 <HAL_TIM_PWM_Start+0x138>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d107      	bne.n	800263a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <HAL_TIM_PWM_Start+0x138>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_TIM_PWM_Start+0xfa>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800264c:	d009      	beq.n	8002662 <HAL_TIM_PWM_Start+0xfa>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <HAL_TIM_PWM_Start+0x13c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_TIM_PWM_Start+0xfa>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <HAL_TIM_PWM_Start+0x140>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d111      	bne.n	8002686 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b06      	cmp	r3, #6
 8002672:	d010      	beq.n	8002696 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002684:	e007      	b.n	8002696 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40000800 	.word	0x40000800

080026ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e0ae      	b.n	8002828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	f200 809f 	bhi.w	8002818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026da:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	08002715 	.word	0x08002715
 80026e4:	08002819 	.word	0x08002819
 80026e8:	08002819 	.word	0x08002819
 80026ec:	08002819 	.word	0x08002819
 80026f0:	08002755 	.word	0x08002755
 80026f4:	08002819 	.word	0x08002819
 80026f8:	08002819 	.word	0x08002819
 80026fc:	08002819 	.word	0x08002819
 8002700:	08002797 	.word	0x08002797
 8002704:	08002819 	.word	0x08002819
 8002708:	08002819 	.word	0x08002819
 800270c:	08002819 	.word	0x08002819
 8002710:	080027d7 	.word	0x080027d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f9be 	bl	8002a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0208 	orr.w	r2, r2, #8
 800272e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6999      	ldr	r1, [r3, #24]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	619a      	str	r2, [r3, #24]
      break;
 8002752:	e064      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fa04 	bl	8002b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800276e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800277e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6999      	ldr	r1, [r3, #24]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	021a      	lsls	r2, r3, #8
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	619a      	str	r2, [r3, #24]
      break;
 8002794:	e043      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fa4d 	bl	8002c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0208 	orr.w	r2, r2, #8
 80027b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0204 	bic.w	r2, r2, #4
 80027c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69d9      	ldr	r1, [r3, #28]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
      break;
 80027d4:	e023      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fa97 	bl	8002d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	021a      	lsls	r2, r3, #8
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	61da      	str	r2, [r3, #28]
      break;
 8002816:	e002      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
      break;
 800281c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_TIM_ConfigClockSource+0x1c>
 8002848:	2302      	movs	r3, #2
 800284a:	e0b4      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x186>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800286a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002884:	d03e      	beq.n	8002904 <HAL_TIM_ConfigClockSource+0xd4>
 8002886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288a:	f200 8087 	bhi.w	800299c <HAL_TIM_ConfigClockSource+0x16c>
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	f000 8086 	beq.w	80029a2 <HAL_TIM_ConfigClockSource+0x172>
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289a:	d87f      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b70      	cmp	r3, #112	@ 0x70
 800289e:	d01a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0xa6>
 80028a0:	2b70      	cmp	r3, #112	@ 0x70
 80028a2:	d87b      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b60      	cmp	r3, #96	@ 0x60
 80028a6:	d050      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x11a>
 80028a8:	2b60      	cmp	r3, #96	@ 0x60
 80028aa:	d877      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b50      	cmp	r3, #80	@ 0x50
 80028ae:	d03c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0xfa>
 80028b0:	2b50      	cmp	r3, #80	@ 0x50
 80028b2:	d873      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d058      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x13a>
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d86f      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b30      	cmp	r3, #48	@ 0x30
 80028be:	d064      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	2b30      	cmp	r3, #48	@ 0x30
 80028c2:	d86b      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d060      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d867      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05c      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d05a      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	e062      	b.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028e6:	f000 fad8 	bl	8002e9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	609a      	str	r2, [r3, #8]
      break;
 8002902:	e04f      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002914:	f000 fac1 	bl	8002e9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002926:	609a      	str	r2, [r3, #8]
      break;
 8002928:	e03c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	461a      	mov	r2, r3
 8002938:	f000 fa38 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2150      	movs	r1, #80	@ 0x50
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fa8f 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002948:	e02c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002956:	461a      	mov	r2, r3
 8002958:	f000 fa56 	bl	8002e08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2160      	movs	r1, #96	@ 0x60
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fa7f 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002968:	e01c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	461a      	mov	r2, r3
 8002978:	f000 fa18 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2140      	movs	r1, #64	@ 0x40
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fa6f 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002988:	e00c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 fa66 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 800299a:	e003      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      break;
 80029a0:	e000      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <TIM_Base_SetConfig+0xd0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a94 <TIM_Base_SetConfig+0xd4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002a98 <TIM_Base_SetConfig+0xd8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a22      	ldr	r2, [pc, #136]	@ (8002a90 <TIM_Base_SetConfig+0xd0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <TIM_Base_SetConfig+0xd4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a98 <TIM_Base_SetConfig+0xd8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a90 <TIM_Base_SetConfig+0xd0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f023 0201 	bic.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	611a      	str	r2, [r3, #16]
  }
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800

08002a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f023 0201 	bic.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0302 	bic.w	r3, r3, #2
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b64 <TIM_OC1_SetConfig+0xc8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10c      	bne.n	8002b12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f023 0308 	bic.w	r3, r3, #8
 8002afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <TIM_OC1_SetConfig+0xc8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d111      	bne.n	8002b3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	621a      	str	r2, [r3, #32]
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00

08002b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 0210 	bic.w	r2, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 0320 	bic.w	r3, r3, #32
 8002bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <TIM_OC2_SetConfig+0xd0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10d      	bne.n	8002be4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002be2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <TIM_OC2_SetConfig+0xd0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d113      	bne.n	8002c14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012c00 	.word	0x40012c00

08002c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <TIM_OC3_SetConfig+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10d      	bne.n	8002cb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <TIM_OC3_SetConfig+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d113      	bne.n	8002ce6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00

08002d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002da8 <TIM_OC4_SetConfig+0x98>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d109      	bne.n	8002d84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	40012c00 	.word	0x40012c00

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 030a 	bic.w	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f023 0210 	bic.w	r2, r3, #16
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	031b      	lsls	r3, r3, #12
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f043 0307 	orr.w	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	609a      	str	r2, [r3, #8]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2201      	movs	r2, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e046      	b.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00e      	beq.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f84:	d009      	beq.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a10      	ldr	r2, [pc, #64]	@ (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10c      	bne.n	8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800

08002fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e03d      	b.n	8003074 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e042      	b.n	8003116 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd fb3b 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2224      	movs	r2, #36	@ 0x24
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f972 	bl	80033ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b08a      	sub	sp, #40	@ 0x28
 8003122:	af02      	add	r7, sp, #8
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	d175      	bne.n	800322a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_UART_Transmit+0x2c>
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06e      	b.n	800322c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	@ 0x21
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315c:	f7fd fc0c 	bl	8000978 <HAL_GetTick>
 8003160:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003176:	d108      	bne.n	800318a <HAL_UART_Transmit+0x6c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e003      	b.n	8003192 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003192:	e02e      	b.n	80031f2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f848 	bl	8003234 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e03a      	b.n	800322c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3302      	adds	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e007      	b.n	80031e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1cb      	bne.n	8003194 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	2140      	movs	r1, #64	@ 0x40
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f814 	bl	8003234 <UART_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e006      	b.n	800322c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003244:	e03b      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d037      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fd fb93 	bl	8000978 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <UART_WaitOnFlagUntilTimeout+0x30>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e03a      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d023      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0x8a>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b80      	cmp	r3, #128	@ 0x80
 800327a:	d020      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0x8a>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	d01d      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d116      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f81d 	bl	80032e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2208      	movs	r2, #8
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d0b4      	beq.n	8003246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b095      	sub	sp, #84	@ 0x54
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800330e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3314      	adds	r3, #20
 8003328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	61fb      	str	r3, [r7, #28]
   return(result);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	2b01      	cmp	r3, #1
 800335c:	d119      	bne.n	8003392 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	60bb      	str	r3, [r7, #8]
   return(result);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f023 0310 	bic.w	r3, r3, #16
 8003374:	647b      	str	r3, [r7, #68]	@ 0x44
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800337e:	61ba      	str	r2, [r7, #24]
 8003380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	613b      	str	r3, [r7, #16]
   return(result);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033a0:	bf00      	nop
 80033a2:	3754      	adds	r7, #84	@ 0x54
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
	...

080033ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033e6:	f023 030c 	bic.w	r3, r3, #12
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2c      	ldr	r2, [pc, #176]	@ (80034c0 <UART_SetConfig+0x114>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d103      	bne.n	800341c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003414:	f7fe fe62 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	e002      	b.n	8003422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7fe fe4a 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <UART_SetConfig+0x118>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	0119      	lsls	r1, r3, #4
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fbb2 f2f3 	udiv	r2, r2, r3
 8003458:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <UART_SetConfig+0x118>)
 800345a:	fba3 0302 	umull	r0, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2064      	movs	r0, #100	@ 0x64
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	@ 0x32
 800346c:	4a15      	ldr	r2, [pc, #84]	@ (80034c4 <UART_SetConfig+0x118>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003478:	4419      	add	r1, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <UART_SetConfig+0x118>)
 8003492:	fba3 0302 	umull	r0, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2064      	movs	r0, #100	@ 0x64
 800349a:	fb00 f303 	mul.w	r3, r0, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	3332      	adds	r3, #50	@ 0x32
 80034a4:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <UART_SetConfig+0x118>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	440a      	add	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40013800 	.word	0x40013800
 80034c4:	51eb851f 	.word	0x51eb851f

080034c8 <siprintf>:
 80034c8:	b40e      	push	{r1, r2, r3}
 80034ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80034ce:	b500      	push	{lr}
 80034d0:	b09c      	sub	sp, #112	@ 0x70
 80034d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80034d4:	9002      	str	r0, [sp, #8]
 80034d6:	9006      	str	r0, [sp, #24]
 80034d8:	9107      	str	r1, [sp, #28]
 80034da:	9104      	str	r1, [sp, #16]
 80034dc:	4808      	ldr	r0, [pc, #32]	@ (8003500 <siprintf+0x38>)
 80034de:	4909      	ldr	r1, [pc, #36]	@ (8003504 <siprintf+0x3c>)
 80034e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80034e4:	9105      	str	r1, [sp, #20]
 80034e6:	6800      	ldr	r0, [r0, #0]
 80034e8:	a902      	add	r1, sp, #8
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	f000 f992 	bl	8003814 <_svfiprintf_r>
 80034f0:	2200      	movs	r2, #0
 80034f2:	9b02      	ldr	r3, [sp, #8]
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	b01c      	add	sp, #112	@ 0x70
 80034f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80034fc:	b003      	add	sp, #12
 80034fe:	4770      	bx	lr
 8003500:	2000000c 	.word	0x2000000c
 8003504:	ffff0208 	.word	0xffff0208

08003508 <memset>:
 8003508:	4603      	mov	r3, r0
 800350a:	4402      	add	r2, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <memset+0xa>
 8003510:	4770      	bx	lr
 8003512:	f803 1b01 	strb.w	r1, [r3], #1
 8003516:	e7f9      	b.n	800350c <memset+0x4>

08003518 <__errno>:
 8003518:	4b01      	ldr	r3, [pc, #4]	@ (8003520 <__errno+0x8>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000000c 	.word	0x2000000c

08003524 <__libc_init_array>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	2600      	movs	r6, #0
 8003528:	4d0c      	ldr	r5, [pc, #48]	@ (800355c <__libc_init_array+0x38>)
 800352a:	4c0d      	ldr	r4, [pc, #52]	@ (8003560 <__libc_init_array+0x3c>)
 800352c:	1b64      	subs	r4, r4, r5
 800352e:	10a4      	asrs	r4, r4, #2
 8003530:	42a6      	cmp	r6, r4
 8003532:	d109      	bne.n	8003548 <__libc_init_array+0x24>
 8003534:	f000 fc78 	bl	8003e28 <_init>
 8003538:	2600      	movs	r6, #0
 800353a:	4d0a      	ldr	r5, [pc, #40]	@ (8003564 <__libc_init_array+0x40>)
 800353c:	4c0a      	ldr	r4, [pc, #40]	@ (8003568 <__libc_init_array+0x44>)
 800353e:	1b64      	subs	r4, r4, r5
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	42a6      	cmp	r6, r4
 8003544:	d105      	bne.n	8003552 <__libc_init_array+0x2e>
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	f855 3b04 	ldr.w	r3, [r5], #4
 800354c:	4798      	blx	r3
 800354e:	3601      	adds	r6, #1
 8003550:	e7ee      	b.n	8003530 <__libc_init_array+0xc>
 8003552:	f855 3b04 	ldr.w	r3, [r5], #4
 8003556:	4798      	blx	r3
 8003558:	3601      	adds	r6, #1
 800355a:	e7f2      	b.n	8003542 <__libc_init_array+0x1e>
 800355c:	08003ec0 	.word	0x08003ec0
 8003560:	08003ec0 	.word	0x08003ec0
 8003564:	08003ec0 	.word	0x08003ec0
 8003568:	08003ec4 	.word	0x08003ec4

0800356c <__retarget_lock_acquire_recursive>:
 800356c:	4770      	bx	lr

0800356e <__retarget_lock_release_recursive>:
 800356e:	4770      	bx	lr

08003570 <_free_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4605      	mov	r5, r0
 8003574:	2900      	cmp	r1, #0
 8003576:	d040      	beq.n	80035fa <_free_r+0x8a>
 8003578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800357c:	1f0c      	subs	r4, r1, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	bfb8      	it	lt
 8003582:	18e4      	addlt	r4, r4, r3
 8003584:	f000 f8de 	bl	8003744 <__malloc_lock>
 8003588:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <_free_r+0x8c>)
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	b933      	cbnz	r3, 800359c <_free_r+0x2c>
 800358e:	6063      	str	r3, [r4, #4]
 8003590:	6014      	str	r4, [r2, #0]
 8003592:	4628      	mov	r0, r5
 8003594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003598:	f000 b8da 	b.w	8003750 <__malloc_unlock>
 800359c:	42a3      	cmp	r3, r4
 800359e:	d908      	bls.n	80035b2 <_free_r+0x42>
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	1821      	adds	r1, r4, r0
 80035a4:	428b      	cmp	r3, r1
 80035a6:	bf01      	itttt	eq
 80035a8:	6819      	ldreq	r1, [r3, #0]
 80035aa:	685b      	ldreq	r3, [r3, #4]
 80035ac:	1809      	addeq	r1, r1, r0
 80035ae:	6021      	streq	r1, [r4, #0]
 80035b0:	e7ed      	b.n	800358e <_free_r+0x1e>
 80035b2:	461a      	mov	r2, r3
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b10b      	cbz	r3, 80035bc <_free_r+0x4c>
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	d9fa      	bls.n	80035b2 <_free_r+0x42>
 80035bc:	6811      	ldr	r1, [r2, #0]
 80035be:	1850      	adds	r0, r2, r1
 80035c0:	42a0      	cmp	r0, r4
 80035c2:	d10b      	bne.n	80035dc <_free_r+0x6c>
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	4401      	add	r1, r0
 80035c8:	1850      	adds	r0, r2, r1
 80035ca:	4283      	cmp	r3, r0
 80035cc:	6011      	str	r1, [r2, #0]
 80035ce:	d1e0      	bne.n	8003592 <_free_r+0x22>
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4408      	add	r0, r1
 80035d6:	6010      	str	r0, [r2, #0]
 80035d8:	6053      	str	r3, [r2, #4]
 80035da:	e7da      	b.n	8003592 <_free_r+0x22>
 80035dc:	d902      	bls.n	80035e4 <_free_r+0x74>
 80035de:	230c      	movs	r3, #12
 80035e0:	602b      	str	r3, [r5, #0]
 80035e2:	e7d6      	b.n	8003592 <_free_r+0x22>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	1821      	adds	r1, r4, r0
 80035e8:	428b      	cmp	r3, r1
 80035ea:	bf01      	itttt	eq
 80035ec:	6819      	ldreq	r1, [r3, #0]
 80035ee:	685b      	ldreq	r3, [r3, #4]
 80035f0:	1809      	addeq	r1, r1, r0
 80035f2:	6021      	streq	r1, [r4, #0]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	6054      	str	r4, [r2, #4]
 80035f8:	e7cb      	b.n	8003592 <_free_r+0x22>
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	200002a4 	.word	0x200002a4

08003600 <sbrk_aligned>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4e0f      	ldr	r6, [pc, #60]	@ (8003640 <sbrk_aligned+0x40>)
 8003604:	460c      	mov	r4, r1
 8003606:	6831      	ldr	r1, [r6, #0]
 8003608:	4605      	mov	r5, r0
 800360a:	b911      	cbnz	r1, 8003612 <sbrk_aligned+0x12>
 800360c:	f000 fbaa 	bl	8003d64 <_sbrk_r>
 8003610:	6030      	str	r0, [r6, #0]
 8003612:	4621      	mov	r1, r4
 8003614:	4628      	mov	r0, r5
 8003616:	f000 fba5 	bl	8003d64 <_sbrk_r>
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	d103      	bne.n	8003626 <sbrk_aligned+0x26>
 800361e:	f04f 34ff 	mov.w	r4, #4294967295
 8003622:	4620      	mov	r0, r4
 8003624:	bd70      	pop	{r4, r5, r6, pc}
 8003626:	1cc4      	adds	r4, r0, #3
 8003628:	f024 0403 	bic.w	r4, r4, #3
 800362c:	42a0      	cmp	r0, r4
 800362e:	d0f8      	beq.n	8003622 <sbrk_aligned+0x22>
 8003630:	1a21      	subs	r1, r4, r0
 8003632:	4628      	mov	r0, r5
 8003634:	f000 fb96 	bl	8003d64 <_sbrk_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d1f2      	bne.n	8003622 <sbrk_aligned+0x22>
 800363c:	e7ef      	b.n	800361e <sbrk_aligned+0x1e>
 800363e:	bf00      	nop
 8003640:	200002a0 	.word	0x200002a0

08003644 <_malloc_r>:
 8003644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003648:	1ccd      	adds	r5, r1, #3
 800364a:	f025 0503 	bic.w	r5, r5, #3
 800364e:	3508      	adds	r5, #8
 8003650:	2d0c      	cmp	r5, #12
 8003652:	bf38      	it	cc
 8003654:	250c      	movcc	r5, #12
 8003656:	2d00      	cmp	r5, #0
 8003658:	4606      	mov	r6, r0
 800365a:	db01      	blt.n	8003660 <_malloc_r+0x1c>
 800365c:	42a9      	cmp	r1, r5
 800365e:	d904      	bls.n	800366a <_malloc_r+0x26>
 8003660:	230c      	movs	r3, #12
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	2000      	movs	r0, #0
 8003666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800366a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003740 <_malloc_r+0xfc>
 800366e:	f000 f869 	bl	8003744 <__malloc_lock>
 8003672:	f8d8 3000 	ldr.w	r3, [r8]
 8003676:	461c      	mov	r4, r3
 8003678:	bb44      	cbnz	r4, 80036cc <_malloc_r+0x88>
 800367a:	4629      	mov	r1, r5
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff ffbf 	bl	8003600 <sbrk_aligned>
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	4604      	mov	r4, r0
 8003686:	d158      	bne.n	800373a <_malloc_r+0xf6>
 8003688:	f8d8 4000 	ldr.w	r4, [r8]
 800368c:	4627      	mov	r7, r4
 800368e:	2f00      	cmp	r7, #0
 8003690:	d143      	bne.n	800371a <_malloc_r+0xd6>
 8003692:	2c00      	cmp	r4, #0
 8003694:	d04b      	beq.n	800372e <_malloc_r+0xea>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	4639      	mov	r1, r7
 800369a:	4630      	mov	r0, r6
 800369c:	eb04 0903 	add.w	r9, r4, r3
 80036a0:	f000 fb60 	bl	8003d64 <_sbrk_r>
 80036a4:	4581      	cmp	r9, r0
 80036a6:	d142      	bne.n	800372e <_malloc_r+0xea>
 80036a8:	6821      	ldr	r1, [r4, #0]
 80036aa:	4630      	mov	r0, r6
 80036ac:	1a6d      	subs	r5, r5, r1
 80036ae:	4629      	mov	r1, r5
 80036b0:	f7ff ffa6 	bl	8003600 <sbrk_aligned>
 80036b4:	3001      	adds	r0, #1
 80036b6:	d03a      	beq.n	800372e <_malloc_r+0xea>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	442b      	add	r3, r5
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	f8d8 3000 	ldr.w	r3, [r8]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	bb62      	cbnz	r2, 8003720 <_malloc_r+0xdc>
 80036c6:	f8c8 7000 	str.w	r7, [r8]
 80036ca:	e00f      	b.n	80036ec <_malloc_r+0xa8>
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	1b52      	subs	r2, r2, r5
 80036d0:	d420      	bmi.n	8003714 <_malloc_r+0xd0>
 80036d2:	2a0b      	cmp	r2, #11
 80036d4:	d917      	bls.n	8003706 <_malloc_r+0xc2>
 80036d6:	1961      	adds	r1, r4, r5
 80036d8:	42a3      	cmp	r3, r4
 80036da:	6025      	str	r5, [r4, #0]
 80036dc:	bf18      	it	ne
 80036de:	6059      	strne	r1, [r3, #4]
 80036e0:	6863      	ldr	r3, [r4, #4]
 80036e2:	bf08      	it	eq
 80036e4:	f8c8 1000 	streq.w	r1, [r8]
 80036e8:	5162      	str	r2, [r4, r5]
 80036ea:	604b      	str	r3, [r1, #4]
 80036ec:	4630      	mov	r0, r6
 80036ee:	f000 f82f 	bl	8003750 <__malloc_unlock>
 80036f2:	f104 000b 	add.w	r0, r4, #11
 80036f6:	1d23      	adds	r3, r4, #4
 80036f8:	f020 0007 	bic.w	r0, r0, #7
 80036fc:	1ac2      	subs	r2, r0, r3
 80036fe:	bf1c      	itt	ne
 8003700:	1a1b      	subne	r3, r3, r0
 8003702:	50a3      	strne	r3, [r4, r2]
 8003704:	e7af      	b.n	8003666 <_malloc_r+0x22>
 8003706:	6862      	ldr	r2, [r4, #4]
 8003708:	42a3      	cmp	r3, r4
 800370a:	bf0c      	ite	eq
 800370c:	f8c8 2000 	streq.w	r2, [r8]
 8003710:	605a      	strne	r2, [r3, #4]
 8003712:	e7eb      	b.n	80036ec <_malloc_r+0xa8>
 8003714:	4623      	mov	r3, r4
 8003716:	6864      	ldr	r4, [r4, #4]
 8003718:	e7ae      	b.n	8003678 <_malloc_r+0x34>
 800371a:	463c      	mov	r4, r7
 800371c:	687f      	ldr	r7, [r7, #4]
 800371e:	e7b6      	b.n	800368e <_malloc_r+0x4a>
 8003720:	461a      	mov	r2, r3
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	42a3      	cmp	r3, r4
 8003726:	d1fb      	bne.n	8003720 <_malloc_r+0xdc>
 8003728:	2300      	movs	r3, #0
 800372a:	6053      	str	r3, [r2, #4]
 800372c:	e7de      	b.n	80036ec <_malloc_r+0xa8>
 800372e:	230c      	movs	r3, #12
 8003730:	4630      	mov	r0, r6
 8003732:	6033      	str	r3, [r6, #0]
 8003734:	f000 f80c 	bl	8003750 <__malloc_unlock>
 8003738:	e794      	b.n	8003664 <_malloc_r+0x20>
 800373a:	6005      	str	r5, [r0, #0]
 800373c:	e7d6      	b.n	80036ec <_malloc_r+0xa8>
 800373e:	bf00      	nop
 8003740:	200002a4 	.word	0x200002a4

08003744 <__malloc_lock>:
 8003744:	4801      	ldr	r0, [pc, #4]	@ (800374c <__malloc_lock+0x8>)
 8003746:	f7ff bf11 	b.w	800356c <__retarget_lock_acquire_recursive>
 800374a:	bf00      	nop
 800374c:	2000029c 	.word	0x2000029c

08003750 <__malloc_unlock>:
 8003750:	4801      	ldr	r0, [pc, #4]	@ (8003758 <__malloc_unlock+0x8>)
 8003752:	f7ff bf0c 	b.w	800356e <__retarget_lock_release_recursive>
 8003756:	bf00      	nop
 8003758:	2000029c 	.word	0x2000029c

0800375c <__ssputs_r>:
 800375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	461f      	mov	r7, r3
 8003762:	688e      	ldr	r6, [r1, #8]
 8003764:	4682      	mov	sl, r0
 8003766:	42be      	cmp	r6, r7
 8003768:	460c      	mov	r4, r1
 800376a:	4690      	mov	r8, r2
 800376c:	680b      	ldr	r3, [r1, #0]
 800376e:	d82d      	bhi.n	80037cc <__ssputs_r+0x70>
 8003770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003778:	d026      	beq.n	80037c8 <__ssputs_r+0x6c>
 800377a:	6965      	ldr	r5, [r4, #20]
 800377c:	6909      	ldr	r1, [r1, #16]
 800377e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003782:	eba3 0901 	sub.w	r9, r3, r1
 8003786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800378a:	1c7b      	adds	r3, r7, #1
 800378c:	444b      	add	r3, r9
 800378e:	106d      	asrs	r5, r5, #1
 8003790:	429d      	cmp	r5, r3
 8003792:	bf38      	it	cc
 8003794:	461d      	movcc	r5, r3
 8003796:	0553      	lsls	r3, r2, #21
 8003798:	d527      	bpl.n	80037ea <__ssputs_r+0x8e>
 800379a:	4629      	mov	r1, r5
 800379c:	f7ff ff52 	bl	8003644 <_malloc_r>
 80037a0:	4606      	mov	r6, r0
 80037a2:	b360      	cbz	r0, 80037fe <__ssputs_r+0xa2>
 80037a4:	464a      	mov	r2, r9
 80037a6:	6921      	ldr	r1, [r4, #16]
 80037a8:	f000 fafa 	bl	8003da0 <memcpy>
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b6:	81a3      	strh	r3, [r4, #12]
 80037b8:	6126      	str	r6, [r4, #16]
 80037ba:	444e      	add	r6, r9
 80037bc:	6026      	str	r6, [r4, #0]
 80037be:	463e      	mov	r6, r7
 80037c0:	6165      	str	r5, [r4, #20]
 80037c2:	eba5 0509 	sub.w	r5, r5, r9
 80037c6:	60a5      	str	r5, [r4, #8]
 80037c8:	42be      	cmp	r6, r7
 80037ca:	d900      	bls.n	80037ce <__ssputs_r+0x72>
 80037cc:	463e      	mov	r6, r7
 80037ce:	4632      	mov	r2, r6
 80037d0:	4641      	mov	r1, r8
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	f000 faac 	bl	8003d30 <memmove>
 80037d8:	2000      	movs	r0, #0
 80037da:	68a3      	ldr	r3, [r4, #8]
 80037dc:	1b9b      	subs	r3, r3, r6
 80037de:	60a3      	str	r3, [r4, #8]
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	4433      	add	r3, r6
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ea:	462a      	mov	r2, r5
 80037ec:	f000 fae6 	bl	8003dbc <_realloc_r>
 80037f0:	4606      	mov	r6, r0
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d1e0      	bne.n	80037b8 <__ssputs_r+0x5c>
 80037f6:	4650      	mov	r0, sl
 80037f8:	6921      	ldr	r1, [r4, #16]
 80037fa:	f7ff feb9 	bl	8003570 <_free_r>
 80037fe:	230c      	movs	r3, #12
 8003800:	f8ca 3000 	str.w	r3, [sl]
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f04f 30ff 	mov.w	r0, #4294967295
 800380a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	e7e9      	b.n	80037e6 <__ssputs_r+0x8a>
	...

08003814 <_svfiprintf_r>:
 8003814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003818:	4698      	mov	r8, r3
 800381a:	898b      	ldrh	r3, [r1, #12]
 800381c:	4607      	mov	r7, r0
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	460d      	mov	r5, r1
 8003822:	4614      	mov	r4, r2
 8003824:	b09d      	sub	sp, #116	@ 0x74
 8003826:	d510      	bpl.n	800384a <_svfiprintf_r+0x36>
 8003828:	690b      	ldr	r3, [r1, #16]
 800382a:	b973      	cbnz	r3, 800384a <_svfiprintf_r+0x36>
 800382c:	2140      	movs	r1, #64	@ 0x40
 800382e:	f7ff ff09 	bl	8003644 <_malloc_r>
 8003832:	6028      	str	r0, [r5, #0]
 8003834:	6128      	str	r0, [r5, #16]
 8003836:	b930      	cbnz	r0, 8003846 <_svfiprintf_r+0x32>
 8003838:	230c      	movs	r3, #12
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	b01d      	add	sp, #116	@ 0x74
 8003842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003846:	2340      	movs	r3, #64	@ 0x40
 8003848:	616b      	str	r3, [r5, #20]
 800384a:	2300      	movs	r3, #0
 800384c:	9309      	str	r3, [sp, #36]	@ 0x24
 800384e:	2320      	movs	r3, #32
 8003850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003854:	2330      	movs	r3, #48	@ 0x30
 8003856:	f04f 0901 	mov.w	r9, #1
 800385a:	f8cd 800c 	str.w	r8, [sp, #12]
 800385e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80039f8 <_svfiprintf_r+0x1e4>
 8003862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003866:	4623      	mov	r3, r4
 8003868:	469a      	mov	sl, r3
 800386a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800386e:	b10a      	cbz	r2, 8003874 <_svfiprintf_r+0x60>
 8003870:	2a25      	cmp	r2, #37	@ 0x25
 8003872:	d1f9      	bne.n	8003868 <_svfiprintf_r+0x54>
 8003874:	ebba 0b04 	subs.w	fp, sl, r4
 8003878:	d00b      	beq.n	8003892 <_svfiprintf_r+0x7e>
 800387a:	465b      	mov	r3, fp
 800387c:	4622      	mov	r2, r4
 800387e:	4629      	mov	r1, r5
 8003880:	4638      	mov	r0, r7
 8003882:	f7ff ff6b 	bl	800375c <__ssputs_r>
 8003886:	3001      	adds	r0, #1
 8003888:	f000 80a7 	beq.w	80039da <_svfiprintf_r+0x1c6>
 800388c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800388e:	445a      	add	r2, fp
 8003890:	9209      	str	r2, [sp, #36]	@ 0x24
 8003892:	f89a 3000 	ldrb.w	r3, [sl]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 809f 	beq.w	80039da <_svfiprintf_r+0x1c6>
 800389c:	2300      	movs	r3, #0
 800389e:	f04f 32ff 	mov.w	r2, #4294967295
 80038a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038a6:	f10a 0a01 	add.w	sl, sl, #1
 80038aa:	9304      	str	r3, [sp, #16]
 80038ac:	9307      	str	r3, [sp, #28]
 80038ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80038b4:	4654      	mov	r4, sl
 80038b6:	2205      	movs	r2, #5
 80038b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038bc:	484e      	ldr	r0, [pc, #312]	@ (80039f8 <_svfiprintf_r+0x1e4>)
 80038be:	f000 fa61 	bl	8003d84 <memchr>
 80038c2:	9a04      	ldr	r2, [sp, #16]
 80038c4:	b9d8      	cbnz	r0, 80038fe <_svfiprintf_r+0xea>
 80038c6:	06d0      	lsls	r0, r2, #27
 80038c8:	bf44      	itt	mi
 80038ca:	2320      	movmi	r3, #32
 80038cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038d0:	0711      	lsls	r1, r2, #28
 80038d2:	bf44      	itt	mi
 80038d4:	232b      	movmi	r3, #43	@ 0x2b
 80038d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038da:	f89a 3000 	ldrb.w	r3, [sl]
 80038de:	2b2a      	cmp	r3, #42	@ 0x2a
 80038e0:	d015      	beq.n	800390e <_svfiprintf_r+0xfa>
 80038e2:	4654      	mov	r4, sl
 80038e4:	2000      	movs	r0, #0
 80038e6:	f04f 0c0a 	mov.w	ip, #10
 80038ea:	9a07      	ldr	r2, [sp, #28]
 80038ec:	4621      	mov	r1, r4
 80038ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038f2:	3b30      	subs	r3, #48	@ 0x30
 80038f4:	2b09      	cmp	r3, #9
 80038f6:	d94b      	bls.n	8003990 <_svfiprintf_r+0x17c>
 80038f8:	b1b0      	cbz	r0, 8003928 <_svfiprintf_r+0x114>
 80038fa:	9207      	str	r2, [sp, #28]
 80038fc:	e014      	b.n	8003928 <_svfiprintf_r+0x114>
 80038fe:	eba0 0308 	sub.w	r3, r0, r8
 8003902:	fa09 f303 	lsl.w	r3, r9, r3
 8003906:	4313      	orrs	r3, r2
 8003908:	46a2      	mov	sl, r4
 800390a:	9304      	str	r3, [sp, #16]
 800390c:	e7d2      	b.n	80038b4 <_svfiprintf_r+0xa0>
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	1d19      	adds	r1, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	9103      	str	r1, [sp, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfbb      	ittet	lt
 800391a:	425b      	neglt	r3, r3
 800391c:	f042 0202 	orrlt.w	r2, r2, #2
 8003920:	9307      	strge	r3, [sp, #28]
 8003922:	9307      	strlt	r3, [sp, #28]
 8003924:	bfb8      	it	lt
 8003926:	9204      	strlt	r2, [sp, #16]
 8003928:	7823      	ldrb	r3, [r4, #0]
 800392a:	2b2e      	cmp	r3, #46	@ 0x2e
 800392c:	d10a      	bne.n	8003944 <_svfiprintf_r+0x130>
 800392e:	7863      	ldrb	r3, [r4, #1]
 8003930:	2b2a      	cmp	r3, #42	@ 0x2a
 8003932:	d132      	bne.n	800399a <_svfiprintf_r+0x186>
 8003934:	9b03      	ldr	r3, [sp, #12]
 8003936:	3402      	adds	r4, #2
 8003938:	1d1a      	adds	r2, r3, #4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	9203      	str	r2, [sp, #12]
 800393e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003942:	9305      	str	r3, [sp, #20]
 8003944:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80039fc <_svfiprintf_r+0x1e8>
 8003948:	2203      	movs	r2, #3
 800394a:	4650      	mov	r0, sl
 800394c:	7821      	ldrb	r1, [r4, #0]
 800394e:	f000 fa19 	bl	8003d84 <memchr>
 8003952:	b138      	cbz	r0, 8003964 <_svfiprintf_r+0x150>
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	9b04      	ldr	r3, [sp, #16]
 8003958:	eba0 000a 	sub.w	r0, r0, sl
 800395c:	4082      	lsls	r2, r0
 800395e:	4313      	orrs	r3, r2
 8003960:	3401      	adds	r4, #1
 8003962:	9304      	str	r3, [sp, #16]
 8003964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003968:	2206      	movs	r2, #6
 800396a:	4825      	ldr	r0, [pc, #148]	@ (8003a00 <_svfiprintf_r+0x1ec>)
 800396c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003970:	f000 fa08 	bl	8003d84 <memchr>
 8003974:	2800      	cmp	r0, #0
 8003976:	d036      	beq.n	80039e6 <_svfiprintf_r+0x1d2>
 8003978:	4b22      	ldr	r3, [pc, #136]	@ (8003a04 <_svfiprintf_r+0x1f0>)
 800397a:	bb1b      	cbnz	r3, 80039c4 <_svfiprintf_r+0x1b0>
 800397c:	9b03      	ldr	r3, [sp, #12]
 800397e:	3307      	adds	r3, #7
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	3308      	adds	r3, #8
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800398a:	4433      	add	r3, r6
 800398c:	9309      	str	r3, [sp, #36]	@ 0x24
 800398e:	e76a      	b.n	8003866 <_svfiprintf_r+0x52>
 8003990:	460c      	mov	r4, r1
 8003992:	2001      	movs	r0, #1
 8003994:	fb0c 3202 	mla	r2, ip, r2, r3
 8003998:	e7a8      	b.n	80038ec <_svfiprintf_r+0xd8>
 800399a:	2300      	movs	r3, #0
 800399c:	f04f 0c0a 	mov.w	ip, #10
 80039a0:	4619      	mov	r1, r3
 80039a2:	3401      	adds	r4, #1
 80039a4:	9305      	str	r3, [sp, #20]
 80039a6:	4620      	mov	r0, r4
 80039a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039ac:	3a30      	subs	r2, #48	@ 0x30
 80039ae:	2a09      	cmp	r2, #9
 80039b0:	d903      	bls.n	80039ba <_svfiprintf_r+0x1a6>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0c6      	beq.n	8003944 <_svfiprintf_r+0x130>
 80039b6:	9105      	str	r1, [sp, #20]
 80039b8:	e7c4      	b.n	8003944 <_svfiprintf_r+0x130>
 80039ba:	4604      	mov	r4, r0
 80039bc:	2301      	movs	r3, #1
 80039be:	fb0c 2101 	mla	r1, ip, r1, r2
 80039c2:	e7f0      	b.n	80039a6 <_svfiprintf_r+0x192>
 80039c4:	ab03      	add	r3, sp, #12
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	462a      	mov	r2, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a08 <_svfiprintf_r+0x1f4>)
 80039ce:	a904      	add	r1, sp, #16
 80039d0:	f3af 8000 	nop.w
 80039d4:	1c42      	adds	r2, r0, #1
 80039d6:	4606      	mov	r6, r0
 80039d8:	d1d6      	bne.n	8003988 <_svfiprintf_r+0x174>
 80039da:	89ab      	ldrh	r3, [r5, #12]
 80039dc:	065b      	lsls	r3, r3, #25
 80039de:	f53f af2d 	bmi.w	800383c <_svfiprintf_r+0x28>
 80039e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039e4:	e72c      	b.n	8003840 <_svfiprintf_r+0x2c>
 80039e6:	ab03      	add	r3, sp, #12
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	462a      	mov	r2, r5
 80039ec:	4638      	mov	r0, r7
 80039ee:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <_svfiprintf_r+0x1f4>)
 80039f0:	a904      	add	r1, sp, #16
 80039f2:	f000 f87d 	bl	8003af0 <_printf_i>
 80039f6:	e7ed      	b.n	80039d4 <_svfiprintf_r+0x1c0>
 80039f8:	08003e8a 	.word	0x08003e8a
 80039fc:	08003e90 	.word	0x08003e90
 8003a00:	08003e94 	.word	0x08003e94
 8003a04:	00000000 	.word	0x00000000
 8003a08:	0800375d 	.word	0x0800375d

08003a0c <_printf_common>:
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	4616      	mov	r6, r2
 8003a12:	4698      	mov	r8, r3
 8003a14:	688a      	ldr	r2, [r1, #8]
 8003a16:	690b      	ldr	r3, [r1, #16]
 8003a18:	4607      	mov	r7, r0
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bfb8      	it	lt
 8003a1e:	4613      	movlt	r3, r2
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a26:	460c      	mov	r4, r1
 8003a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a2c:	b10a      	cbz	r2, 8003a32 <_printf_common+0x26>
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	0699      	lsls	r1, r3, #26
 8003a36:	bf42      	ittt	mi
 8003a38:	6833      	ldrmi	r3, [r6, #0]
 8003a3a:	3302      	addmi	r3, #2
 8003a3c:	6033      	strmi	r3, [r6, #0]
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	f015 0506 	ands.w	r5, r5, #6
 8003a44:	d106      	bne.n	8003a54 <_printf_common+0x48>
 8003a46:	f104 0a19 	add.w	sl, r4, #25
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	6832      	ldr	r2, [r6, #0]
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dc2b      	bgt.n	8003aac <_printf_common+0xa0>
 8003a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	3b00      	subs	r3, #0
 8003a5c:	bf18      	it	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d430      	bmi.n	8003ac6 <_printf_common+0xba>
 8003a64:	4641      	mov	r1, r8
 8003a66:	4638      	mov	r0, r7
 8003a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a6c:	47c8      	blx	r9
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d023      	beq.n	8003aba <_printf_common+0xae>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	6922      	ldr	r2, [r4, #16]
 8003a76:	f003 0306 	and.w	r3, r3, #6
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf14      	ite	ne
 8003a7e:	2500      	movne	r5, #0
 8003a80:	6833      	ldreq	r3, [r6, #0]
 8003a82:	f04f 0600 	mov.w	r6, #0
 8003a86:	bf08      	it	eq
 8003a88:	68e5      	ldreq	r5, [r4, #12]
 8003a8a:	f104 041a 	add.w	r4, r4, #26
 8003a8e:	bf08      	it	eq
 8003a90:	1aed      	subeq	r5, r5, r3
 8003a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a96:	bf08      	it	eq
 8003a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	bfc4      	itt	gt
 8003aa0:	1a9b      	subgt	r3, r3, r2
 8003aa2:	18ed      	addgt	r5, r5, r3
 8003aa4:	42b5      	cmp	r5, r6
 8003aa6:	d11a      	bne.n	8003ade <_printf_common+0xd2>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e008      	b.n	8003abe <_printf_common+0xb2>
 8003aac:	2301      	movs	r3, #1
 8003aae:	4652      	mov	r2, sl
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	47c8      	blx	r9
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d103      	bne.n	8003ac2 <_printf_common+0xb6>
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	3501      	adds	r5, #1
 8003ac4:	e7c1      	b.n	8003a4a <_printf_common+0x3e>
 8003ac6:	2030      	movs	r0, #48	@ 0x30
 8003ac8:	18e1      	adds	r1, r4, r3
 8003aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ad4:	4422      	add	r2, r4
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003adc:	e7c2      	b.n	8003a64 <_printf_common+0x58>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	4641      	mov	r1, r8
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	47c8      	blx	r9
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d0e6      	beq.n	8003aba <_printf_common+0xae>
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7d9      	b.n	8003aa4 <_printf_common+0x98>

08003af0 <_printf_i>:
 8003af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003af4:	7e0f      	ldrb	r7, [r1, #24]
 8003af6:	4691      	mov	r9, r2
 8003af8:	2f78      	cmp	r7, #120	@ 0x78
 8003afa:	4680      	mov	r8, r0
 8003afc:	460c      	mov	r4, r1
 8003afe:	469a      	mov	sl, r3
 8003b00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b06:	d807      	bhi.n	8003b18 <_printf_i+0x28>
 8003b08:	2f62      	cmp	r7, #98	@ 0x62
 8003b0a:	d80a      	bhi.n	8003b22 <_printf_i+0x32>
 8003b0c:	2f00      	cmp	r7, #0
 8003b0e:	f000 80d3 	beq.w	8003cb8 <_printf_i+0x1c8>
 8003b12:	2f58      	cmp	r7, #88	@ 0x58
 8003b14:	f000 80ba 	beq.w	8003c8c <_printf_i+0x19c>
 8003b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b20:	e03a      	b.n	8003b98 <_printf_i+0xa8>
 8003b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b26:	2b15      	cmp	r3, #21
 8003b28:	d8f6      	bhi.n	8003b18 <_printf_i+0x28>
 8003b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8003b30 <_printf_i+0x40>)
 8003b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b30:	08003b89 	.word	0x08003b89
 8003b34:	08003b9d 	.word	0x08003b9d
 8003b38:	08003b19 	.word	0x08003b19
 8003b3c:	08003b19 	.word	0x08003b19
 8003b40:	08003b19 	.word	0x08003b19
 8003b44:	08003b19 	.word	0x08003b19
 8003b48:	08003b9d 	.word	0x08003b9d
 8003b4c:	08003b19 	.word	0x08003b19
 8003b50:	08003b19 	.word	0x08003b19
 8003b54:	08003b19 	.word	0x08003b19
 8003b58:	08003b19 	.word	0x08003b19
 8003b5c:	08003c9f 	.word	0x08003c9f
 8003b60:	08003bc7 	.word	0x08003bc7
 8003b64:	08003c59 	.word	0x08003c59
 8003b68:	08003b19 	.word	0x08003b19
 8003b6c:	08003b19 	.word	0x08003b19
 8003b70:	08003cc1 	.word	0x08003cc1
 8003b74:	08003b19 	.word	0x08003b19
 8003b78:	08003bc7 	.word	0x08003bc7
 8003b7c:	08003b19 	.word	0x08003b19
 8003b80:	08003b19 	.word	0x08003b19
 8003b84:	08003c61 	.word	0x08003c61
 8003b88:	6833      	ldr	r3, [r6, #0]
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6032      	str	r2, [r6, #0]
 8003b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e09e      	b.n	8003cda <_printf_i+0x1ea>
 8003b9c:	6833      	ldr	r3, [r6, #0]
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	1d19      	adds	r1, r3, #4
 8003ba2:	6031      	str	r1, [r6, #0]
 8003ba4:	0606      	lsls	r6, r0, #24
 8003ba6:	d501      	bpl.n	8003bac <_printf_i+0xbc>
 8003ba8:	681d      	ldr	r5, [r3, #0]
 8003baa:	e003      	b.n	8003bb4 <_printf_i+0xc4>
 8003bac:	0645      	lsls	r5, r0, #25
 8003bae:	d5fb      	bpl.n	8003ba8 <_printf_i+0xb8>
 8003bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	da03      	bge.n	8003bc0 <_printf_i+0xd0>
 8003bb8:	232d      	movs	r3, #45	@ 0x2d
 8003bba:	426d      	negs	r5, r5
 8003bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bc0:	230a      	movs	r3, #10
 8003bc2:	4859      	ldr	r0, [pc, #356]	@ (8003d28 <_printf_i+0x238>)
 8003bc4:	e011      	b.n	8003bea <_printf_i+0xfa>
 8003bc6:	6821      	ldr	r1, [r4, #0]
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	0608      	lsls	r0, r1, #24
 8003bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bd0:	d402      	bmi.n	8003bd8 <_printf_i+0xe8>
 8003bd2:	0649      	lsls	r1, r1, #25
 8003bd4:	bf48      	it	mi
 8003bd6:	b2ad      	uxthmi	r5, r5
 8003bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bda:	6033      	str	r3, [r6, #0]
 8003bdc:	bf14      	ite	ne
 8003bde:	230a      	movne	r3, #10
 8003be0:	2308      	moveq	r3, #8
 8003be2:	4851      	ldr	r0, [pc, #324]	@ (8003d28 <_printf_i+0x238>)
 8003be4:	2100      	movs	r1, #0
 8003be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bea:	6866      	ldr	r6, [r4, #4]
 8003bec:	2e00      	cmp	r6, #0
 8003bee:	bfa8      	it	ge
 8003bf0:	6821      	ldrge	r1, [r4, #0]
 8003bf2:	60a6      	str	r6, [r4, #8]
 8003bf4:	bfa4      	itt	ge
 8003bf6:	f021 0104 	bicge.w	r1, r1, #4
 8003bfa:	6021      	strge	r1, [r4, #0]
 8003bfc:	b90d      	cbnz	r5, 8003c02 <_printf_i+0x112>
 8003bfe:	2e00      	cmp	r6, #0
 8003c00:	d04b      	beq.n	8003c9a <_printf_i+0x1aa>
 8003c02:	4616      	mov	r6, r2
 8003c04:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c08:	fb03 5711 	mls	r7, r3, r1, r5
 8003c0c:	5dc7      	ldrb	r7, [r0, r7]
 8003c0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c12:	462f      	mov	r7, r5
 8003c14:	42bb      	cmp	r3, r7
 8003c16:	460d      	mov	r5, r1
 8003c18:	d9f4      	bls.n	8003c04 <_printf_i+0x114>
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d10b      	bne.n	8003c36 <_printf_i+0x146>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	07df      	lsls	r7, r3, #31
 8003c22:	d508      	bpl.n	8003c36 <_printf_i+0x146>
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	6861      	ldr	r1, [r4, #4]
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	bfde      	ittt	le
 8003c2c:	2330      	movle	r3, #48	@ 0x30
 8003c2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c36:	1b92      	subs	r2, r2, r6
 8003c38:	6122      	str	r2, [r4, #16]
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4640      	mov	r0, r8
 8003c40:	f8cd a000 	str.w	sl, [sp]
 8003c44:	aa03      	add	r2, sp, #12
 8003c46:	f7ff fee1 	bl	8003a0c <_printf_common>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d14a      	bne.n	8003ce4 <_printf_i+0x1f4>
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	b004      	add	sp, #16
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	f043 0320 	orr.w	r3, r3, #32
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	2778      	movs	r7, #120	@ 0x78
 8003c62:	4832      	ldr	r0, [pc, #200]	@ (8003d2c <_printf_i+0x23c>)
 8003c64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	6831      	ldr	r1, [r6, #0]
 8003c6c:	061f      	lsls	r7, r3, #24
 8003c6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c72:	d402      	bmi.n	8003c7a <_printf_i+0x18a>
 8003c74:	065f      	lsls	r7, r3, #25
 8003c76:	bf48      	it	mi
 8003c78:	b2ad      	uxthmi	r5, r5
 8003c7a:	6031      	str	r1, [r6, #0]
 8003c7c:	07d9      	lsls	r1, r3, #31
 8003c7e:	bf44      	itt	mi
 8003c80:	f043 0320 	orrmi.w	r3, r3, #32
 8003c84:	6023      	strmi	r3, [r4, #0]
 8003c86:	b11d      	cbz	r5, 8003c90 <_printf_i+0x1a0>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	e7ab      	b.n	8003be4 <_printf_i+0xf4>
 8003c8c:	4826      	ldr	r0, [pc, #152]	@ (8003d28 <_printf_i+0x238>)
 8003c8e:	e7e9      	b.n	8003c64 <_printf_i+0x174>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	e7f6      	b.n	8003c88 <_printf_i+0x198>
 8003c9a:	4616      	mov	r6, r2
 8003c9c:	e7bd      	b.n	8003c1a <_printf_i+0x12a>
 8003c9e:	6833      	ldr	r3, [r6, #0]
 8003ca0:	6825      	ldr	r5, [r4, #0]
 8003ca2:	1d18      	adds	r0, r3, #4
 8003ca4:	6961      	ldr	r1, [r4, #20]
 8003ca6:	6030      	str	r0, [r6, #0]
 8003ca8:	062e      	lsls	r6, r5, #24
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	d501      	bpl.n	8003cb2 <_printf_i+0x1c2>
 8003cae:	6019      	str	r1, [r3, #0]
 8003cb0:	e002      	b.n	8003cb8 <_printf_i+0x1c8>
 8003cb2:	0668      	lsls	r0, r5, #25
 8003cb4:	d5fb      	bpl.n	8003cae <_printf_i+0x1be>
 8003cb6:	8019      	strh	r1, [r3, #0]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4616      	mov	r6, r2
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	e7bc      	b.n	8003c3a <_printf_i+0x14a>
 8003cc0:	6833      	ldr	r3, [r6, #0]
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	6032      	str	r2, [r6, #0]
 8003cc8:	681e      	ldr	r6, [r3, #0]
 8003cca:	6862      	ldr	r2, [r4, #4]
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f000 f859 	bl	8003d84 <memchr>
 8003cd2:	b108      	cbz	r0, 8003cd8 <_printf_i+0x1e8>
 8003cd4:	1b80      	subs	r0, r0, r6
 8003cd6:	6060      	str	r0, [r4, #4]
 8003cd8:	6863      	ldr	r3, [r4, #4]
 8003cda:	6123      	str	r3, [r4, #16]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ce2:	e7aa      	b.n	8003c3a <_printf_i+0x14a>
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4640      	mov	r0, r8
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	47d0      	blx	sl
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d0ad      	beq.n	8003c4e <_printf_i+0x15e>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	079b      	lsls	r3, r3, #30
 8003cf6:	d413      	bmi.n	8003d20 <_printf_i+0x230>
 8003cf8:	68e0      	ldr	r0, [r4, #12]
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	4298      	cmp	r0, r3
 8003cfe:	bfb8      	it	lt
 8003d00:	4618      	movlt	r0, r3
 8003d02:	e7a6      	b.n	8003c52 <_printf_i+0x162>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4632      	mov	r2, r6
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	47d0      	blx	sl
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d09d      	beq.n	8003c4e <_printf_i+0x15e>
 8003d12:	3501      	adds	r5, #1
 8003d14:	68e3      	ldr	r3, [r4, #12]
 8003d16:	9903      	ldr	r1, [sp, #12]
 8003d18:	1a5b      	subs	r3, r3, r1
 8003d1a:	42ab      	cmp	r3, r5
 8003d1c:	dcf2      	bgt.n	8003d04 <_printf_i+0x214>
 8003d1e:	e7eb      	b.n	8003cf8 <_printf_i+0x208>
 8003d20:	2500      	movs	r5, #0
 8003d22:	f104 0619 	add.w	r6, r4, #25
 8003d26:	e7f5      	b.n	8003d14 <_printf_i+0x224>
 8003d28:	08003e9b 	.word	0x08003e9b
 8003d2c:	08003eac 	.word	0x08003eac

08003d30 <memmove>:
 8003d30:	4288      	cmp	r0, r1
 8003d32:	b510      	push	{r4, lr}
 8003d34:	eb01 0402 	add.w	r4, r1, r2
 8003d38:	d902      	bls.n	8003d40 <memmove+0x10>
 8003d3a:	4284      	cmp	r4, r0
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	d807      	bhi.n	8003d50 <memmove+0x20>
 8003d40:	1e43      	subs	r3, r0, #1
 8003d42:	42a1      	cmp	r1, r4
 8003d44:	d008      	beq.n	8003d58 <memmove+0x28>
 8003d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d4e:	e7f8      	b.n	8003d42 <memmove+0x12>
 8003d50:	4601      	mov	r1, r0
 8003d52:	4402      	add	r2, r0
 8003d54:	428a      	cmp	r2, r1
 8003d56:	d100      	bne.n	8003d5a <memmove+0x2a>
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d62:	e7f7      	b.n	8003d54 <memmove+0x24>

08003d64 <_sbrk_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	2300      	movs	r3, #0
 8003d68:	4d05      	ldr	r5, [pc, #20]	@ (8003d80 <_sbrk_r+0x1c>)
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	f7fc fd48 	bl	8000804 <_sbrk>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_sbrk_r+0x1a>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_sbrk_r+0x1a>
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	20000298 	.word	0x20000298

08003d84 <memchr>:
 8003d84:	4603      	mov	r3, r0
 8003d86:	b510      	push	{r4, lr}
 8003d88:	b2c9      	uxtb	r1, r1
 8003d8a:	4402      	add	r2, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	d101      	bne.n	8003d96 <memchr+0x12>
 8003d92:	2000      	movs	r0, #0
 8003d94:	e003      	b.n	8003d9e <memchr+0x1a>
 8003d96:	7804      	ldrb	r4, [r0, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	428c      	cmp	r4, r1
 8003d9c:	d1f6      	bne.n	8003d8c <memchr+0x8>
 8003d9e:	bd10      	pop	{r4, pc}

08003da0 <memcpy>:
 8003da0:	440a      	add	r2, r1
 8003da2:	4291      	cmp	r1, r2
 8003da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003da8:	d100      	bne.n	8003dac <memcpy+0xc>
 8003daa:	4770      	bx	lr
 8003dac:	b510      	push	{r4, lr}
 8003dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003db8:	d1f9      	bne.n	8003dae <memcpy+0xe>
 8003dba:	bd10      	pop	{r4, pc}

08003dbc <_realloc_r>:
 8003dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc0:	4680      	mov	r8, r0
 8003dc2:	4615      	mov	r5, r2
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	b921      	cbnz	r1, 8003dd2 <_realloc_r+0x16>
 8003dc8:	4611      	mov	r1, r2
 8003dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dce:	f7ff bc39 	b.w	8003644 <_malloc_r>
 8003dd2:	b92a      	cbnz	r2, 8003de0 <_realloc_r+0x24>
 8003dd4:	f7ff fbcc 	bl	8003570 <_free_r>
 8003dd8:	2400      	movs	r4, #0
 8003dda:	4620      	mov	r0, r4
 8003ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de0:	f000 f81a 	bl	8003e18 <_malloc_usable_size_r>
 8003de4:	4285      	cmp	r5, r0
 8003de6:	4606      	mov	r6, r0
 8003de8:	d802      	bhi.n	8003df0 <_realloc_r+0x34>
 8003dea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003dee:	d8f4      	bhi.n	8003dda <_realloc_r+0x1e>
 8003df0:	4629      	mov	r1, r5
 8003df2:	4640      	mov	r0, r8
 8003df4:	f7ff fc26 	bl	8003644 <_malloc_r>
 8003df8:	4607      	mov	r7, r0
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d0ec      	beq.n	8003dd8 <_realloc_r+0x1c>
 8003dfe:	42b5      	cmp	r5, r6
 8003e00:	462a      	mov	r2, r5
 8003e02:	4621      	mov	r1, r4
 8003e04:	bf28      	it	cs
 8003e06:	4632      	movcs	r2, r6
 8003e08:	f7ff ffca 	bl	8003da0 <memcpy>
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	4640      	mov	r0, r8
 8003e10:	f7ff fbae 	bl	8003570 <_free_r>
 8003e14:	463c      	mov	r4, r7
 8003e16:	e7e0      	b.n	8003dda <_realloc_r+0x1e>

08003e18 <_malloc_usable_size_r>:
 8003e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1c:	1f18      	subs	r0, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bfbc      	itt	lt
 8003e22:	580b      	ldrlt	r3, [r1, r0]
 8003e24:	18c0      	addlt	r0, r0, r3
 8003e26:	4770      	bx	lr

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
