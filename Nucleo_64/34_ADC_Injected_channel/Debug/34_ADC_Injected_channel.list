
34_ADC_Injected_channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007198  08007198  00008198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007558  08007558  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007560  08007560  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007560  08007560  00008560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007564  08007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007568  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d4  0800773c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800773c  0000942c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc8a  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d9  00000000  00000000  00016e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00019060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad4  00000000  00000000  00019e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001916a  00000000  00000000  0001a914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd58  00000000  00000000  00033a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091254  00000000  00000000  000437d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000d4a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000d95a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800717c 	.word	0x0800717c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800717c 	.word	0x0800717c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fcb8 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f878 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f9fa 	bl	8000f2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 f9ce 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b3c:	f000 f932 	bl	8000da4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000b40:	f000 f8cc 	bl	8000cdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Start PWM: TIM1(CH2)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b44:	2104      	movs	r1, #4
 8000b46:	482e      	ldr	r0, [pc, #184]	@ (8000c00 <main+0xd8>)
 8000b48:	f002 fe16 	bl	8003778 <HAL_TIM_PWM_Start>
  //Start output compare(CH1)
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	482c      	ldr	r0, [pc, #176]	@ (8000c00 <main+0xd8>)
 8000b50:	f002 fd18 	bl	8003584 <HAL_TIM_OC_Start>
  //Set the OC1 trigger point to the middle of the PWM waveform
  TIM1->CCR1 = 1;
 8000b54:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <main+0xdc>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
  //Start ADC conversion (regular channel, continuous mode, polling)
  HAL_ADC_Start(&hadc1);
 8000b5a:	482b      	ldr	r0, [pc, #172]	@ (8000c08 <main+0xe0>)
 8000b5c:	f000 fdfe 	bl	800175c <HAL_ADC_Start>
  //Start ADC conversion (injected channel, Tim1-PWM-Triggered, Interrupt)
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b60:	4829      	ldr	r0, [pc, #164]	@ (8000c08 <main+0xe0>)
 8000b62:	f001 fa21 	bl	8001fa8 <HAL_ADCEx_InjectedStart_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Poll ADC1 peripheral & timeout = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000b66:	2101      	movs	r1, #1
 8000b68:	4827      	ldr	r0, [pc, #156]	@ (8000c08 <main+0xe0>)
 8000b6a:	f000 fea5 	bl	80018b8 <HAL_ADC_PollForConversion>
	  //Read  the ADC regular channel (CH7)
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8000b6e:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <main+0xe0>)
 8000b70:	f000 ffa8 	bl	8001ac4 <HAL_ADC_GetValue>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <main+0xe4>)
 8000b7a:	801a      	strh	r2, [r3, #0]
	  //Update the PWM DutyCycle using ADC value (potentiometer on CH7)
	  TIM1->CCR2 = AD_RES;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <main+0xe4>)
 8000b7e:	881a      	ldrh	r2, [r3, #0]
 8000b80:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <main+0xdc>)
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38

	  //Convert the injected ADC channel reading to I_dc
	  I_dc = ((InjADC_Reading*3.30)/4.095);
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <main+0xe8>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fc3a 	bl	8000404 <__aeabi_i2d>
 8000b90:	a317      	add	r3, pc, #92	@ (adr r3, 8000bf0 <main+0xc8>)
 8000b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b96:	f7ff fc9f 	bl	80004d8 <__aeabi_dmul>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	a315      	add	r3, pc, #84	@ (adr r3, 8000bf8 <main+0xd0>)
 8000ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba8:	f7ff fdc0 	bl	800072c <__aeabi_ddiv>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f7ff ff68 	bl	8000a88 <__aeabi_d2f>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a16      	ldr	r2, [pc, #88]	@ (8000c14 <main+0xec>)
 8000bbc:	6013      	str	r3, [r2, #0]

	  //print the current measurement to serial port
	  sprintf(UART2_TxBuffer,"I_dc = %f mA\r\n", I_dc);
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <main+0xec>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc30 	bl	8000428 <__aeabi_f2d>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4912      	ldr	r1, [pc, #72]	@ (8000c18 <main+0xf0>)
 8000bce:	4813      	ldr	r0, [pc, #76]	@ (8000c1c <main+0xf4>)
 8000bd0:	f004 f99e 	bl	8004f10 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)UART2_TxBuffer, sizeof(UART2_TxBuffer), 10);
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	221e      	movs	r2, #30
 8000bd8:	4910      	ldr	r1, [pc, #64]	@ (8000c1c <main+0xf4>)
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <main+0xf8>)
 8000bdc:	f003 faa5 	bl	800412a <HAL_UART_Transmit>

	  HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fcbf 	bl	8001564 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000be6:	bf00      	nop
 8000be8:	e7bd      	b.n	8000b66 <main+0x3e>
 8000bea:	bf00      	nop
 8000bec:	f3af 8000 	nop.w
 8000bf0:	66666666 	.word	0x66666666
 8000bf4:	400a6666 	.word	0x400a6666
 8000bf8:	ae147ae1 	.word	0xae147ae1
 8000bfc:	40106147 	.word	0x40106147
 8000c00:	20000220 	.word	0x20000220
 8000c04:	40012c00 	.word	0x40012c00
 8000c08:	200001f0 	.word	0x200001f0
 8000c0c:	200002d0 	.word	0x200002d0
 8000c10:	200002ce 	.word	0x200002ce
 8000c14:	200002d4 	.word	0x200002d4
 8000c18:	08007198 	.word	0x08007198
 8000c1c:	200002b0 	.word	0x200002b0
 8000c20:	20000268 	.word	0x20000268

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	@ 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2e:	2228      	movs	r2, #40	@ 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 f9cf 	bl	8004fd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	2301      	movs	r3, #1
 8000c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c70:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 feb6 	bl	80029ec <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c86:	f000 f9d3 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 f922 	bl	8002ef0 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cb2:	f000 f9bd 	bl	8001030 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 faa2 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cce:	f000 f9af 	bl	8001030 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	@ 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d00:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d02:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <MX_ADC1_Init+0xc4>)
 8000d04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b25      	ldr	r3, [pc, #148]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d1a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2c:	481b      	ldr	r0, [pc, #108]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d2e:	f000 fc3d 	bl	80015ac <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000d38:	f000 f97a 	bl	8001030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d50:	f000 ff96 	bl	8001c80 <HAL_ADC_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000d5a:	f000 f969 	bl	8001030 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <MX_ADC1_Init+0xc0>)
 8000d84:	f001 f9cc 	bl	8002120 <HAL_ADCEx_InjectedConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000d8e:	f000 f94f 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001f0 	.word	0x200001f0
 8000da0:	40012400 	.word	0x40012400

08000da4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b092      	sub	sp, #72	@ 0x48
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000daa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2220      	movs	r2, #32
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 f901 	bl	8004fd6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed4 <MX_TIM1_Init+0x130>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dda:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000de0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000de2:	2220      	movs	r2, #32
 8000de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000de8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000dec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df4:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e00:	4833      	ldr	r0, [pc, #204]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000e02:	f002 fb6f 	bl	80034e4 <HAL_TIM_OC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e0c:	f000 f910 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e10:	482f      	ldr	r0, [pc, #188]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000e12:	f002 fc59 	bl	80036c8 <HAL_TIM_PWM_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f908 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000e20:	2330      	movs	r3, #48	@ 0x30
 8000e22:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4828      	ldr	r0, [pc, #160]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000e30:	f003 f87c 	bl	8003f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000e3a:	f000 f8f9 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	481b      	ldr	r0, [pc, #108]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000e64:	f002 fd2a 	bl	80038bc <HAL_TIM_OC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000e6e:	f000 f8df 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e72:	2360      	movs	r3, #96	@ 0x60
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4814      	ldr	r0, [pc, #80]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000e80:	f002 fd78 	bl	8003974 <HAL_TIM_PWM_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000e8a:	f000 f8d1 	bl	8001030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000eb2:	f003 f899 	bl	8003fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000ebc:	f000 f8b8 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <MX_TIM1_Init+0x12c>)
 8000ec2:	f000 f94f 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000ec6:	bf00      	nop
 8000ec8:	3748      	adds	r7, #72	@ 0x48
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000220 	.word	0x20000220
 8000ed4:	40012c00 	.word	0x40012c00

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <MX_USART2_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f10:	f003 f8bb 	bl	800408a <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f000 f889 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000268 	.word	0x20000268
 8000f28:	40004400 	.word	0x40004400

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f5e:	f043 0320 	orr.w	r3, r3, #32
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a20      	ldr	r2, [pc, #128]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_GPIO_Init+0xcc>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4815      	ldr	r0, [pc, #84]	@ (8000ffc <MX_GPIO_Init+0xd0>)
 8000fa6:	f001 fce7 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <MX_GPIO_Init+0xd4>)
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4811      	ldr	r0, [pc, #68]	@ (8001004 <MX_GPIO_Init+0xd8>)
 8000fc0:	f001 fb56 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <MX_GPIO_Init+0xd0>)
 8000fdc:	f001 fb48 	bl	8002670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2028      	movs	r0, #40	@ 0x28
 8000fe6:	f001 fb0c 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fea:	2028      	movs	r0, #40	@ 0x28
 8000fec:	f001 fb25 	bl	800263a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	10110000 	.word	0x10110000
 8001004:	40011000 	.word	0x40011000

08001008 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	InjADC_Reading = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001010:	2101      	movs	r1, #1
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8001014:	f001 f856 	bl	80020c4 <HAL_ADCEx_InjectedGetValue>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 800101e:	801a      	strh	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001f0 	.word	0x200001f0
 800102c:	200002ce 	.word	0x200002ce

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <Error_Handler+0x8>

0800103c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_MspInit+0x5c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <HAL_MspInit+0x5c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_MspInit+0x5c>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_MspInit+0x5c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_MspInit+0x5c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_MspInit+0x5c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_MspInit+0x60>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_MspInit+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000

080010a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a18      	ldr	r2, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0x7c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d129      	bne.n	8001114 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a16      	ldr	r2, [pc, #88]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80010f0:	2390      	movs	r3, #144	@ 0x90
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4809      	ldr	r0, [pc, #36]	@ (8001124 <HAL_ADC_MspInit+0x84>)
 8001100:	f001 fab6 	bl	8002670 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2012      	movs	r0, #18
 800110a:	f001 fa7a 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800110e:	2012      	movs	r0, #18
 8001110:	f001 fa93 	bl	800263a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40012400 	.word	0x40012400
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800

08001128 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a09      	ldr	r2, [pc, #36]	@ (800115c <HAL_TIM_OC_MspInit+0x34>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10b      	bne.n	8001152 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_TIM_OC_MspInit+0x38>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <HAL_TIM_OC_MspInit+0x38>)
 8001140:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_TIM_OC_MspInit+0x38>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_TIM_MspPostInit+0x5c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d118      	bne.n	80011b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <HAL_TIM_MspPostInit+0x60>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_TIM_MspPostInit+0x60>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_TIM_MspPostInit+0x60>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_TIM_MspPostInit+0x64>)
 80011b2:	f001 fa5d 	bl	8002670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a15      	ldr	r2, [pc, #84]	@ (800123c <HAL_UART_MspInit+0x70>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d123      	bne.n	8001234 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_UART_MspInit+0x74>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <HAL_UART_MspInit+0x74>)
 80011f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f6:	61d3      	str	r3, [r2, #28]
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_UART_MspInit+0x74>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <HAL_UART_MspInit+0x74>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <HAL_UART_MspInit+0x74>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_UART_MspInit+0x74>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800121c:	230c      	movs	r3, #12
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <HAL_UART_MspInit+0x78>)
 8001230:	f001 fa1e 	bl	8002670 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004400 	.word	0x40004400
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <NMI_Handler+0x4>

08001250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <MemManage_Handler+0x4>

08001260 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <UsageFault_Handler+0x4>

08001270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f948 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <ADC1_2_IRQHandler+0x10>)
 80012a6:	f000 fc19 	bl	8001adc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200001f0 	.word	0x200001f0

080012b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012bc:	f001 fb74 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return 1;
 80012c8:	2301      	movs	r3, #1
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <_kill>:

int _kill(int pid, int sig)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012dc:	f003 fece 	bl	800507c <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2216      	movs	r2, #22
 80012e4:	601a      	str	r2, [r3, #0]
  return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_exit>:

void _exit (int status)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012fa:	f04f 31ff 	mov.w	r1, #4294967295
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffe7 	bl	80012d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <_exit+0x12>

08001308 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131a:	f3af 8000 	nop.w
 800131e:	4601      	mov	r1, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf0      	blt.n	800131a <_read+0x12>
  }

  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e009      	b.n	8001368 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf1      	blt.n	8001354 <_write+0x12>
  }
  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_close>:

int _close(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a0:	605a      	str	r2, [r3, #4]
  return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <_isatty>:

int _isatty(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f003 fe36 	bl	800507c <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20005000 	.word	0x20005000
 800143c:	00000400 	.word	0x00000400
 8001440:	200002d8 	.word	0x200002d8
 8001444:	20000430 	.word	0x20000430

08001448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff fff8 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145a:	490c      	ldr	r1, [pc, #48]	@ (800148c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800145c:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001470:	4c09      	ldr	r4, [pc, #36]	@ (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f003 fe03 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff fb51 	bl	8000b28 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001490:	08007568 	.word	0x08007568
  ldr r2, =_sbss
 8001494:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001498:	2000042c 	.word	0x2000042c

0800149c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <CAN1_RX1_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f001 f89b 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fdbe 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f8b3 	bl	8002656 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f001 f87b 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	@ (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000008 	.word	0x20000008
 800154c:	200002dc 	.word	0x200002dc

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	@ (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200002dc 	.word	0x200002dc

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fff0 	bl	8001550 <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffe0 	bl	8001550 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0be      	b.n	800174c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fd58 	bl	80010a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fc97 	bl	8001f24 <ADC_ConversionStop_Disable>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8099 	bne.w	800173a <HAL_ADC_Init+0x18e>
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8095 	bne.w	800173a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001618:	f023 0302 	bic.w	r3, r3, #2
 800161c:	f043 0202 	orr.w	r2, r3, #2
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800162c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7b1b      	ldrb	r3, [r3, #12]
 8001632:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001634:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4313      	orrs	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001644:	d003      	beq.n	800164e <HAL_ADC_Init+0xa2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <HAL_ADC_Init+0xa8>
 800164e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001652:	e000      	b.n	8001656 <HAL_ADC_Init+0xaa>
 8001654:	2300      	movs	r3, #0
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7d1b      	ldrb	r3, [r3, #20]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d119      	bne.n	8001698 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	3b01      	subs	r3, #1
 8001672:	035a      	lsls	r2, r3, #13
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e00b      	b.n	8001698 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	f043 0220 	orr.w	r2, r3, #32
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <HAL_ADC_Init+0x1a8>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_Init+0x126>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d104      	bne.n	80016dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	051b      	lsls	r3, r3, #20
 80016da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_ADC_Init+0x1ac>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10b      	bne.n	8001718 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001716:	e018      	b.n	800174a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	f023 0312 	bic.w	r3, r3, #18
 8001720:	f043 0210 	orr.w	r2, r3, #16
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001738:	e007      	b.n	800174a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	ffe1f7fd 	.word	0xffe1f7fd
 8001758:	ff1f0efe 	.word	0xff1f0efe

0800175c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Start+0x1a>
 8001772:	2302      	movs	r3, #2
 8001774:	e098      	b.n	80018a8 <HAL_ADC_Start+0x14c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fb76 	bl	8001e70 <ADC_Enable>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 8087 	bne.w	800189e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a41      	ldr	r2, [pc, #260]	@ (80018b0 <HAL_ADC_Start+0x154>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_Start+0x5e>
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_ADC_Start+0x158>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d115      	bne.n	80017e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d026      	beq.n	8001822 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e4:	e01d      	b.n	8001822 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a2f      	ldr	r2, [pc, #188]	@ (80018b4 <HAL_ADC_Start+0x158>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d004      	beq.n	8001806 <HAL_ADC_Start+0xaa>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2b      	ldr	r2, [pc, #172]	@ (80018b0 <HAL_ADC_Start+0x154>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10d      	bne.n	8001822 <HAL_ADC_Start+0xc6>
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_ADC_Start+0x158>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	f023 0206 	bic.w	r2, r3, #6
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c
 800183a:	e002      	b.n	8001842 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0202 	mvn.w	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800185e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001862:	d113      	bne.n	800188c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001868:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_ADC_Start+0x154>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d105      	bne.n	800187a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_ADC_Start+0x158>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	e00c      	b.n	80018a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e003      	b.n	80018a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40012800 	.word	0x40012800
 80018b4:	40012400 	.word	0x40012400

080018b8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80018ce:	f7ff fe3f 	bl	8001550 <HAL_GetTick>
 80018d2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	f043 0220 	orr.w	r2, r3, #32
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0d3      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d131      	bne.n	800196c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	d12a      	bne.n	800196c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001916:	e021      	b.n	800195c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d01d      	beq.n	800195c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_PollForConversion+0x7e>
 8001926:	f7ff fe13 	bl	8001550 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d212      	bcs.n	800195c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0a2      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0d6      	beq.n	8001918 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800196a:	e070      	b.n	8001a4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800196c:	4b4f      	ldr	r3, [pc, #316]	@ (8001aac <HAL_ADC_PollForConversion+0x1f4>)
 800196e:	681c      	ldr	r4, [r3, #0]
 8001970:	2002      	movs	r0, #2
 8001972:	f001 fd01 	bl	8003378 <HAL_RCCEx_GetPeriphCLKFreq>
 8001976:	4603      	mov	r3, r0
 8001978:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6919      	ldr	r1, [r3, #16]
 8001982:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <HAL_ADC_PollForConversion+0x1f8>)
 8001984:	400b      	ands	r3, r1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_ADC_PollForConversion+0x104>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68d9      	ldr	r1, [r3, #12]
 8001990:	4b48      	ldr	r3, [pc, #288]	@ (8001ab4 <HAL_ADC_PollForConversion+0x1fc>)
 8001992:	400b      	ands	r3, r1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <HAL_ADC_PollForConversion+0x104>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6919      	ldr	r1, [r3, #16]
 800199e:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <HAL_ADC_PollForConversion+0x200>)
 80019a0:	400b      	ands	r3, r1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d108      	bne.n	80019b8 <HAL_ADC_PollForConversion+0x100>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68d9      	ldr	r1, [r3, #12]
 80019ac:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <HAL_ADC_PollForConversion+0x204>)
 80019ae:	400b      	ands	r3, r1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_PollForConversion+0x100>
 80019b4:	2314      	movs	r3, #20
 80019b6:	e020      	b.n	80019fa <HAL_ADC_PollForConversion+0x142>
 80019b8:	2329      	movs	r3, #41	@ 0x29
 80019ba:	e01e      	b.n	80019fa <HAL_ADC_PollForConversion+0x142>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6919      	ldr	r1, [r3, #16]
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_ADC_PollForConversion+0x200>)
 80019c4:	400b      	ands	r3, r1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x120>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68d9      	ldr	r1, [r3, #12]
 80019d0:	4b3a      	ldr	r3, [pc, #232]	@ (8001abc <HAL_ADC_PollForConversion+0x204>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00d      	beq.n	80019f4 <HAL_ADC_PollForConversion+0x13c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6919      	ldr	r1, [r3, #16]
 80019de:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <HAL_ADC_PollForConversion+0x208>)
 80019e0:	400b      	ands	r3, r1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d108      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x140>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68d9      	ldr	r1, [r3, #12]
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_ADC_PollForConversion+0x208>)
 80019ee:	400b      	ands	r3, r1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x140>
 80019f4:	2354      	movs	r3, #84	@ 0x54
 80019f6:	e000      	b.n	80019fa <HAL_ADC_PollForConversion+0x142>
 80019f8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a00:	e021      	b.n	8001a46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d01a      	beq.n	8001a40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_ADC_PollForConversion+0x168>
 8001a10:	f7ff fd9e 	bl	8001550 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d20f      	bcs.n	8001a40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d90b      	bls.n	8001a40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	f043 0204 	orr.w	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e030      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d8d9      	bhi.n	8001a02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f06f 0212 	mvn.w	r2, #18
 8001a56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a72:	d115      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	24924924 	.word	0x24924924
 8001ab4:	00924924 	.word	0x00924924
 8001ab8:	12492492 	.word	0x12492492
 8001abc:	00492492 	.word	0x00492492
 8001ac0:	00249249 	.word	0x00249249

08001ac4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d03e      	beq.n	8001b7c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d039      	beq.n	8001b7c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b2a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b2e:	d11d      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d119      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0220 	bic.w	r2, r2, #32
 8001b46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f874 	bl	8001c5a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f06f 0212 	mvn.w	r2, #18
 8001b7a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d04d      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d048      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001bb2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001bb6:	d012      	beq.n	8001bde <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d125      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001bd0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bd4:	d11d      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d119      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff f9f8 	bl	8001008 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 020c 	mvn.w	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f812 	bl	8001c6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0201 	mvn.w	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x20>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e0dc      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x1da>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d81c      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b05      	subs	r3, #5
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b05      	subs	r3, #5
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce8:	e03c      	b.n	8001d64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d81c      	bhi.n	8001d2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3b23      	subs	r3, #35	@ 0x23
 8001d04:	221f      	movs	r2, #31
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4019      	ands	r1, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b23      	subs	r3, #35	@ 0x23
 8001d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d2a:	e01b      	b.n	8001d64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b41      	subs	r3, #65	@ 0x41
 8001d3e:	221f      	movs	r2, #31
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4019      	ands	r1, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	3b41      	subs	r3, #65	@ 0x41
 8001d58:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	d91c      	bls.n	8001da6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b1e      	subs	r3, #30
 8001d7e:	2207      	movs	r2, #7
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4019      	ands	r1, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6898      	ldr	r0, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	3b1e      	subs	r3, #30
 8001d98:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e019      	b.n	8001dda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6919      	ldr	r1, [r3, #16]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4019      	ands	r1, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6898      	ldr	r0, [r3, #8]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d003      	beq.n	8001dea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001de6:	2b11      	cmp	r3, #17
 8001de8:	d132      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1d      	ldr	r2, [pc, #116]	@ (8001e64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d125      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d126      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d11a      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	0c9a      	lsrs	r2, r3, #18
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x1b2>
 8001e3e:	e007      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40012400 	.word	0x40012400
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	431bde83 	.word	0x431bde83

08001e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d040      	beq.n	8001f10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <ADC_Enable+0xac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <ADC_Enable+0xb0>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eac:	e002      	b.n	8001eb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eba:	f7ff fb49 	bl	8001550 <HAL_GetTick>
 8001ebe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ec0:	e01f      	b.n	8001f02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec2:	f7ff fb45 	bl	8001550 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d918      	bls.n	8001f02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d011      	beq.n	8001f02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d1d8      	bne.n	8001ec2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	431bde83 	.word	0x431bde83

08001f24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d12e      	bne.n	8001f9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f4e:	f7ff faff 	bl	8001550 <HAL_GetTick>
 8001f52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f54:	e01b      	b.n	8001f8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f56:	f7ff fafb 	bl	8001550 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d914      	bls.n	8001f8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10d      	bne.n	8001f8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e007      	b.n	8001f9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d0dc      	beq.n	8001f56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e078      	b.n	80020b4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff50 	bl	8001e70 <ADC_Enable>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d167      	bne.n	80020aa <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a32      	ldr	r2, [pc, #200]	@ (80020bc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d105      	bne.n	8002004 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8001ff8:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002008:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002010:	e005      	b.n	800201e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0204 	mvn.w	r2, #4
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002050:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d128      	bne.n	80020b2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800206a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800206e:	d113      	bne.n	8002098 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002074:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d105      	bne.n	8002086 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 1202 	orr.w	r2, r2, #2129920	@ 0x208000
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	e00c      	b.n	80020b2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e003      	b.n	80020b2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40012800 	.word	0x40012800
 80020c0:	40012400 	.word	0x40012400

080020c4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d009      	beq.n	80020ec <HAL_ADCEx_InjectedGetValue+0x28>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d815      	bhi.n	800210a <HAL_ADCEx_InjectedGetValue+0x46>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d00d      	beq.n	8002100 <HAL_ADCEx_InjectedGetValue+0x3c>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d005      	beq.n	80020f6 <HAL_ADCEx_InjectedGetValue+0x32>
 80020ea:	e00e      	b.n	800210a <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	60fb      	str	r3, [r7, #12]
      break;
 80020f4:	e00e      	b.n	8002114 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	60fb      	str	r3, [r7, #12]
      break;
 80020fe:	e009      	b.n	8002114 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	60fb      	str	r3, [r7, #12]
      break;
 8002108:	e004      	b.n	8002114 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	60fb      	str	r3, [r7, #12]
      break;
 8002112:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8002114:	68fb      	ldr	r3, [r7, #12]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002120:	b490      	push	{r4, r7}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_ADCEx_InjectedConfigChannel+0x20>
 800213c:	2302      	movs	r3, #2
 800213e:	e17d      	b.n	800243c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d119      	bne.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10c      	bne.n	8002172 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215e:	0d9b      	lsrs	r3, r3, #22
 8002160:	059b      	lsls	r3, r3, #22
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	03d1      	lsls	r1, r2, #15
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002170:	e04f      	b.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	f043 0220 	orr.w	r2, r3, #32
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e046      	b.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d82a      	bhi.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	1ad2      	subs	r2, r2, r3
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	330f      	adds	r3, #15
 80021a8:	221f      	movs	r2, #31
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4019      	ands	r1, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	0518      	lsls	r0, r3, #20
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	330f      	adds	r3, #15
 80021d4:	fa04 f303 	lsl.w	r3, r4, r3
 80021d8:	ea40 0203 	orr.w	r2, r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80021e4:	e015      	b.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	1ad2      	subs	r2, r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	330f      	adds	r3, #15
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002208:	43da      	mvns	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d00c      	beq.n	800223a <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	6991      	ldr	r1, [r2, #24]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	430b      	orrs	r3, r1
 8002238:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	7d5b      	ldrb	r3, [r3, #21]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d115      	bne.n	800226e <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800224a:	d108      	bne.n	800225e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	e007      	b.n	800226e <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7d1b      	ldrb	r3, [r3, #20]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d114      	bne.n	80022a0 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	7d5b      	ldrb	r3, [r3, #21]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d108      	bne.n	8002290 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e007      	b.n	80022a0 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d91c      	bls.n	80022e2 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68d9      	ldr	r1, [r3, #12]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	3b1e      	subs	r3, #30
 80022ba:	2207      	movs	r2, #7
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4019      	ands	r1, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6898      	ldr	r0, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	3b1e      	subs	r3, #30
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	e019      	b.n	8002316 <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6919      	ldr	r1, [r3, #16]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	2207      	movs	r2, #7
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6898      	ldr	r0, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d003      	beq.n	8002326 <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002322:	2b11      	cmp	r3, #17
 8002324:	d107      	bne.n	8002336 <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002334:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d022      	beq.n	8002384 <HAL_ADCEx_InjectedConfigChannel+0x264>
 800233e:	2b03      	cmp	r3, #3
 8002340:	d82e      	bhi.n	80023a0 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8002342:	2b01      	cmp	r3, #1
 8002344:	d002      	beq.n	800234c <HAL_ADCEx_InjectedConfigChannel+0x22c>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d00e      	beq.n	8002368 <HAL_ADCEx_InjectedConfigChannel+0x248>
 800234a:	e029      	b.n	80023a0 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002356:	f023 030f 	bic.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	68d1      	ldr	r1, [r2, #12]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	430b      	orrs	r3, r1
 8002364:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8002366:	e029      	b.n	80023bc <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002372:	f023 030f 	bic.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	68d1      	ldr	r1, [r2, #12]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	430b      	orrs	r3, r1
 8002380:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8002382:	e01b      	b.n	80023bc <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800238e:	f023 030f 	bic.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	68d1      	ldr	r1, [r2, #12]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	430b      	orrs	r3, r1
 800239c:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800239e:	e00d      	b.n	80023bc <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80023aa:	f023 030f 	bic.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	68d1      	ldr	r1, [r2, #12]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80023ba:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d003      	beq.n	80023cc <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d132      	bne.n	8002432 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d125      	bne.n	8002422 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d126      	bne.n	8002432 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023f2:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d11a      	bne.n	8002432 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a13      	ldr	r2, [pc, #76]	@ (8002450 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9a      	lsrs	r2, r3, #18
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002412:	e002      	b.n	800241a <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b01      	subs	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f9      	bne.n	8002414 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8002420:	e007      	b.n	8002432 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	f043 0220 	orr.w	r2, r3, #32
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bc90      	pop	{r4, r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40012400 	.word	0x40012400
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <__NVIC_EnableIRQ+0x34>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	@ (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	@ (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	@ 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff90 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff2d 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff42 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff35 	bl	80024b8 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b08b      	sub	sp, #44	@ 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002682:	e169      	b.n	8002958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002684:	2201      	movs	r2, #1
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	429a      	cmp	r2, r3
 800269e:	f040 8158 	bne.w	8002952 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a9a      	ldr	r2, [pc, #616]	@ (8002910 <HAL_GPIO_Init+0x2a0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d05e      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026ac:	4a98      	ldr	r2, [pc, #608]	@ (8002910 <HAL_GPIO_Init+0x2a0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d875      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026b2:	4a98      	ldr	r2, [pc, #608]	@ (8002914 <HAL_GPIO_Init+0x2a4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d058      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026b8:	4a96      	ldr	r2, [pc, #600]	@ (8002914 <HAL_GPIO_Init+0x2a4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d86f      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026be:	4a96      	ldr	r2, [pc, #600]	@ (8002918 <HAL_GPIO_Init+0x2a8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d052      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026c4:	4a94      	ldr	r2, [pc, #592]	@ (8002918 <HAL_GPIO_Init+0x2a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d869      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026ca:	4a94      	ldr	r2, [pc, #592]	@ (800291c <HAL_GPIO_Init+0x2ac>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d04c      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026d0:	4a92      	ldr	r2, [pc, #584]	@ (800291c <HAL_GPIO_Init+0x2ac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d863      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026d6:	4a92      	ldr	r2, [pc, #584]	@ (8002920 <HAL_GPIO_Init+0x2b0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d046      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026dc:	4a90      	ldr	r2, [pc, #576]	@ (8002920 <HAL_GPIO_Init+0x2b0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d85d      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026e2:	2b12      	cmp	r3, #18
 80026e4:	d82a      	bhi.n	800273c <HAL_GPIO_Init+0xcc>
 80026e6:	2b12      	cmp	r3, #18
 80026e8:	d859      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026ea:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <HAL_GPIO_Init+0x80>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	0800276b 	.word	0x0800276b
 80026f4:	08002745 	.word	0x08002745
 80026f8:	08002757 	.word	0x08002757
 80026fc:	08002799 	.word	0x08002799
 8002700:	0800279f 	.word	0x0800279f
 8002704:	0800279f 	.word	0x0800279f
 8002708:	0800279f 	.word	0x0800279f
 800270c:	0800279f 	.word	0x0800279f
 8002710:	0800279f 	.word	0x0800279f
 8002714:	0800279f 	.word	0x0800279f
 8002718:	0800279f 	.word	0x0800279f
 800271c:	0800279f 	.word	0x0800279f
 8002720:	0800279f 	.word	0x0800279f
 8002724:	0800279f 	.word	0x0800279f
 8002728:	0800279f 	.word	0x0800279f
 800272c:	0800279f 	.word	0x0800279f
 8002730:	0800279f 	.word	0x0800279f
 8002734:	0800274d 	.word	0x0800274d
 8002738:	08002761 	.word	0x08002761
 800273c:	4a79      	ldr	r2, [pc, #484]	@ (8002924 <HAL_GPIO_Init+0x2b4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002742:	e02c      	b.n	800279e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	623b      	str	r3, [r7, #32]
          break;
 800274a:	e029      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	3304      	adds	r3, #4
 8002752:	623b      	str	r3, [r7, #32]
          break;
 8002754:	e024      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	3308      	adds	r3, #8
 800275c:	623b      	str	r3, [r7, #32]
          break;
 800275e:	e01f      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	330c      	adds	r3, #12
 8002766:	623b      	str	r3, [r7, #32]
          break;
 8002768:	e01a      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002772:	2304      	movs	r3, #4
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e013      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002780:	2308      	movs	r3, #8
 8002782:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	611a      	str	r2, [r3, #16]
          break;
 800278a:	e009      	b.n	80027a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800278c:	2308      	movs	r3, #8
 800278e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	615a      	str	r2, [r3, #20]
          break;
 8002796:	e003      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          break;
 800279e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2bff      	cmp	r3, #255	@ 0xff
 80027a4:	d801      	bhi.n	80027aa <HAL_GPIO_Init+0x13a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	e001      	b.n	80027ae <HAL_GPIO_Init+0x13e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2bff      	cmp	r3, #255	@ 0xff
 80027b4:	d802      	bhi.n	80027bc <HAL_GPIO_Init+0x14c>
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_Init+0x152>
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	3b08      	subs	r3, #8
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	210f      	movs	r1, #15
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	6a39      	ldr	r1, [r7, #32]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	431a      	orrs	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80b1 	beq.w	8002952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002928 <HAL_GPIO_Init+0x2b8>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002928 <HAL_GPIO_Init+0x2b8>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002928 <HAL_GPIO_Init+0x2b8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002808:	4a48      	ldr	r2, [pc, #288]	@ (800292c <HAL_GPIO_Init+0x2bc>)
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a40      	ldr	r2, [pc, #256]	@ (8002930 <HAL_GPIO_Init+0x2c0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_GPIO_Init+0x1ec>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3f      	ldr	r2, [pc, #252]	@ (8002934 <HAL_GPIO_Init+0x2c4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_Init+0x1e8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3e      	ldr	r2, [pc, #248]	@ (8002938 <HAL_GPIO_Init+0x2c8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x1e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3d      	ldr	r2, [pc, #244]	@ (800293c <HAL_GPIO_Init+0x2cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_Init+0x1e0>
 800284c:	2303      	movs	r3, #3
 800284e:	e006      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 8002850:	2304      	movs	r3, #4
 8002852:	e004      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 800285c:	2300      	movs	r3, #0
 800285e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800286e:	492f      	ldr	r1, [pc, #188]	@ (800292c <HAL_GPIO_Init+0x2bc>)
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002888:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	492c      	ldr	r1, [pc, #176]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	43db      	mvns	r3, r3
 800289e:	4928      	ldr	r1, [pc, #160]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	4922      	ldr	r1, [pc, #136]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	491e      	ldr	r1, [pc, #120]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4918      	ldr	r1, [pc, #96]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4914      	ldr	r1, [pc, #80]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d021      	beq.n	8002944 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002900:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	490e      	ldr	r1, [pc, #56]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e021      	b.n	8002952 <HAL_GPIO_Init+0x2e2>
 800290e:	bf00      	nop
 8002910:	10320000 	.word	0x10320000
 8002914:	10310000 	.word	0x10310000
 8002918:	10220000 	.word	0x10220000
 800291c:	10210000 	.word	0x10210000
 8002920:	10120000 	.word	0x10120000
 8002924:	10110000 	.word	0x10110000
 8002928:	40021000 	.word	0x40021000
 800292c:	40010000 	.word	0x40010000
 8002930:	40010800 	.word	0x40010800
 8002934:	40010c00 	.word	0x40010c00
 8002938:	40011000 	.word	0x40011000
 800293c:	40011400 	.word	0x40011400
 8002940:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_GPIO_Init+0x304>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	43db      	mvns	r3, r3
 800294c:	4909      	ldr	r1, [pc, #36]	@ (8002974 <HAL_GPIO_Init+0x304>)
 800294e:	4013      	ands	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	f47f ae8e 	bne.w	8002684 <HAL_GPIO_Init+0x14>
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	372c      	adds	r7, #44	@ 0x2c
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
 8002984:	4613      	mov	r3, r2
 8002986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002988:	787b      	ldrb	r3, [r7, #1]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002994:	e003      	b.n	800299e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f806 	bl	80029d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e272      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8087 	beq.w	8002b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0c:	4b92      	ldr	r3, [pc, #584]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d00c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a18:	4b8f      	ldr	r3, [pc, #572]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d112      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5e>
 8002a24:	4b8c      	ldr	r3, [pc, #560]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a30:	d10b      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a32:	4b89      	ldr	r3, [pc, #548]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x12c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d168      	bne.n	8002b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e24c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x76>
 8002a54:	4b80      	ldr	r3, [pc, #512]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7f      	ldr	r2, [pc, #508]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e02e      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x98>
 8002a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b78      	ldr	r3, [pc, #480]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a77      	ldr	r2, [pc, #476]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xbc>
 8002a8e:	4b72      	ldr	r3, [pc, #456]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a71      	ldr	r2, [pc, #452]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b68      	ldr	r3, [pc, #416]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a67      	ldr	r2, [pc, #412]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fd42 	bl	8001550 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fd3e 	bl	8001550 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e200      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe4>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fd2e 	bl	8001550 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fd2a 	bl	8001550 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1ec      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x10c>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b26:	4b4c      	ldr	r3, [pc, #304]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b32:	4b49      	ldr	r3, [pc, #292]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x18c>
 8002b3e:	4b46      	ldr	r3, [pc, #280]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b43      	ldr	r3, [pc, #268]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x176>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e1c0      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4939      	ldr	r1, [pc, #228]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e03a      	b.n	8002bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fce3 	bl	8001550 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fcdf 	bl	8001550 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1a1      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4927      	ldr	r1, [pc, #156]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b26      	ldr	r3, [pc, #152]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fcc2 	bl	8001550 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fcbe 	bl	8001550 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e180      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03a      	beq.n	8002c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d019      	beq.n	8002c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <HAL_RCC_OscConfig+0x274>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7fe fca2 	bl	8001550 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fc9e 	bl	8001550 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e160      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f000 face 	bl	80031d0 <RCC_Delay>
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_RCC_OscConfig+0x274>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fc88 	bl	8001550 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c42:	e00f      	b.n	8002c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fe fc84 	bl	8001550 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d908      	bls.n	8002c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e146      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	42420000 	.word	0x42420000
 8002c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	4b92      	ldr	r3, [pc, #584]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e9      	bne.n	8002c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a6 	beq.w	8002dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b8b      	ldr	r3, [pc, #556]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b88      	ldr	r3, [pc, #544]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a87      	ldr	r2, [pc, #540]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	61d3      	str	r3, [r2, #28]
 8002c9a:	4b85      	ldr	r3, [pc, #532]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b82      	ldr	r3, [pc, #520]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c8>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fc45 	bl	8001550 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fc41 	bl	8001550 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	@ 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e103      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x312>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	e02d      	b.n	8002d5a <HAL_RCC_OscConfig+0x36e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x334>
 8002d06:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a69      	ldr	r2, [pc, #420]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4b67      	ldr	r3, [pc, #412]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a66      	ldr	r2, [pc, #408]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	e01c      	b.n	8002d5a <HAL_RCC_OscConfig+0x36e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x356>
 8002d28:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a60      	ldr	r2, [pc, #384]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	4b5e      	ldr	r3, [pc, #376]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e00b      	b.n	8002d5a <HAL_RCC_OscConfig+0x36e>
 8002d42:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6213      	str	r3, [r2, #32]
 8002d4e:	4b58      	ldr	r3, [pc, #352]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a57      	ldr	r2, [pc, #348]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fbf5 	bl	8001550 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe fbf1 	bl	8001550 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0b1      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCC_OscConfig+0x37e>
 8002d8c:	e014      	b.n	8002db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fbdf 	bl	8001550 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe fbdb 	bl	8001550 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e09b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	4b40      	ldr	r3, [pc, #256]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8087 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd4:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d061      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d146      	bne.n	8002e76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	4b33      	ldr	r3, [pc, #204]	@ (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fbaf 	bl	8001550 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fe fbab 	bl	8001550 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e06d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e08:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d108      	bne.n	8002e30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4921      	ldr	r1, [pc, #132]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e30:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a19      	ldr	r1, [r3, #32]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	430b      	orrs	r3, r1
 8002e42:	491b      	ldr	r1, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fb7f 	bl	8001550 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe fb7b 	bl	8001550 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e03d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e68:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x46a>
 8002e74:	e035      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fb68 	bl	8001550 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fb64 	bl	8001550 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e026      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x498>
 8002ea2:	e01e      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e019      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x500>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000

08002ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0d0      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d910      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b67      	ldr	r3, [pc, #412]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 0207 	bic.w	r2, r3, #7
 8002f1a:	4965      	ldr	r1, [pc, #404]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b63      	ldr	r3, [pc, #396]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b8      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a58      	ldr	r2, [pc, #352]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b50      	ldr	r3, [pc, #320]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	494d      	ldr	r1, [pc, #308]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d040      	beq.n	8003010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b47      	ldr	r3, [pc, #284]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d115      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b41      	ldr	r3, [pc, #260]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e073      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06b      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4936      	ldr	r1, [pc, #216]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fab6 	bl	8001550 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe fab2 	bl	8001550 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e053      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 020c 	and.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d1eb      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d210      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0207 	bic.w	r2, r3, #7
 8003026:	4922      	ldr	r1, [pc, #136]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e032      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4916      	ldr	r1, [pc, #88]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490e      	ldr	r1, [pc, #56]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800307e:	f000 f821 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490a      	ldr	r1, [pc, #40]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	@ (80030bc <HAL_RCC_ClockConfig+0x1cc>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1d0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fa14 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40022000 	.word	0x40022000
 80030b4:	40021000 	.word	0x40021000
 80030b8:	080071a8 	.word	0x080071a8
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000004 	.word	0x20000004

080030c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030de:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x94>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x30>
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x36>
 80030f2:	e027      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_RCC_GetSysClockFreq+0x98>)
 80030f6:	613b      	str	r3, [r7, #16]
      break;
 80030f8:	e027      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0c9b      	lsrs	r3, r3, #18
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	4a17      	ldr	r2, [pc, #92]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003112:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x94>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	0c5b      	lsrs	r3, r3, #17
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	4a11      	ldr	r2, [pc, #68]	@ (8003164 <HAL_RCC_GetSysClockFreq+0xa0>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a0d      	ldr	r2, [pc, #52]	@ (800315c <HAL_RCC_GetSysClockFreq+0x98>)
 8003126:	fb03 f202 	mul.w	r2, r3, r2
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e004      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0c      	ldr	r2, [pc, #48]	@ (8003168 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	613b      	str	r3, [r7, #16]
      break;
 8003142:	e002      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetSysClockFreq+0x98>)
 8003146:	613b      	str	r3, [r7, #16]
      break;
 8003148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314a:	693b      	ldr	r3, [r7, #16]
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	007a1200 	.word	0x007a1200
 8003160:	080071c0 	.word	0x080071c0
 8003164:	080071d0 	.word	0x080071d0
 8003168:	003d0900 	.word	0x003d0900

0800316c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003170:	4b02      	ldr	r3, [pc, #8]	@ (800317c <HAL_RCC_GetHCLKFreq+0x10>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff2 	bl	800316c <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	@ (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080071b8 	.word	0x080071b8

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffde 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0adb      	lsrs	r3, r3, #11
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	080071b8 	.word	0x080071b8

080031d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <RCC_Delay+0x34>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003208 <RCC_Delay+0x38>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a5b      	lsrs	r3, r3, #9
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031ec:	bf00      	nop
  }
  while (Delay --);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <RCC_Delay+0x1c>
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000000 	.word	0x20000000
 8003208:	10624dd3 	.word	0x10624dd3

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d07d      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322c:	4b4f      	ldr	r3, [pc, #316]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b4c      	ldr	r3, [pc, #304]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	4a4b      	ldr	r2, [pc, #300]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003242:	61d3      	str	r3, [r2, #28]
 8003244:	4b49      	ldr	r3, [pc, #292]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b46      	ldr	r3, [pc, #280]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d118      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003260:	4b43      	ldr	r3, [pc, #268]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a42      	ldr	r2, [pc, #264]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326c:	f7fe f970 	bl	8001550 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe f96c 	bl	8001550 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e06d      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b3a      	ldr	r3, [pc, #232]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003292:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d02e      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d027      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b0:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032c6:	4a29      	ldr	r2, [pc, #164]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe f93b 	bl	8001550 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe f937 	bl	8001550 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e036      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4917      	ldr	r1, [pc, #92]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	4313      	orrs	r3, r2
 8003310:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b14      	ldr	r3, [pc, #80]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4a13      	ldr	r2, [pc, #76]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003330:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	490b      	ldr	r1, [pc, #44]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334e:	4b07      	ldr	r3, [pc, #28]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4904      	ldr	r1, [pc, #16]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420440 	.word	0x42420440

08003378 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b10      	cmp	r3, #16
 800339e:	f200 808a 	bhi.w	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d045      	beq.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d075      	beq.n	800349a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033ae:	e082      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033b0:	4b46      	ldr	r3, [pc, #280]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033b6:	4b45      	ldr	r3, [pc, #276]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d07b      	beq.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	0c9b      	lsrs	r3, r3, #18
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	4a41      	ldr	r2, [pc, #260]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033cc:	5cd3      	ldrb	r3, [r2, r3]
 80033ce:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033da:	4b3c      	ldr	r3, [pc, #240]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	0c5b      	lsrs	r3, r3, #17
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	4a3b      	ldr	r2, [pc, #236]	@ (80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033f4:	4a38      	ldr	r2, [pc, #224]	@ (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	e004      	b.n	8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4a34      	ldr	r2, [pc, #208]	@ (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003410:	4b2e      	ldr	r3, [pc, #184]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800341c:	d102      	bne.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	61bb      	str	r3, [r7, #24]
      break;
 8003422:	e04a      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
      break;
 8003432:	e042      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003444:	d108      	bne.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003450:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e01f      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003462:	d109      	bne.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003470:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e00f      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800347e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003482:	d11c      	bne.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d016      	beq.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003490:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003494:	61bb      	str	r3, [r7, #24]
      break;
 8003496:	e012      	b.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003498:	e011      	b.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800349a:	f7ff fe85 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0b9b      	lsrs	r3, r3, #14
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	61bb      	str	r3, [r7, #24]
      break;
 80034b4:	e004      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034b6:	bf00      	nop
 80034b8:	e002      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034be:	bf00      	nop
    }
  }
  return (frequency);
 80034c0:	69bb      	ldr	r3, [r7, #24]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	080071d4 	.word	0x080071d4
 80034d4:	080071e4 	.word	0x080071e4
 80034d8:	007a1200 	.word	0x007a1200
 80034dc:	003d0900 	.word	0x003d0900
 80034e0:	aaaaaaab 	.word	0xaaaaaaab

080034e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e041      	b.n	800357a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fe0c 	bl	8001128 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 fae8 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_TIM_OC_Start+0x24>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e022      	b.n	80035ee <HAL_TIM_OC_Start+0x6a>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d109      	bne.n	80035c2 <HAL_TIM_OC_Start+0x3e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	bf14      	ite	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	2300      	moveq	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	e015      	b.n	80035ee <HAL_TIM_OC_Start+0x6a>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d109      	bne.n	80035dc <HAL_TIM_OC_Start+0x58>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e008      	b.n	80035ee <HAL_TIM_OC_Start+0x6a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e05e      	b.n	80036b4 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_OC_Start+0x82>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	e013      	b.n	800362e <HAL_TIM_OC_Start+0xaa>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d104      	bne.n	8003616 <HAL_TIM_OC_Start+0x92>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003614:	e00b      	b.n	800362e <HAL_TIM_OC_Start+0xaa>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_TIM_OC_Start+0xa2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003624:	e003      	b.n	800362e <HAL_TIM_OC_Start+0xaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2201      	movs	r2, #1
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fc54 	bl	8003ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1e      	ldr	r2, [pc, #120]	@ (80036bc <HAL_TIM_OC_Start+0x138>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d107      	bne.n	8003656 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <HAL_TIM_OC_Start+0x138>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIM_OC_Start+0xfa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d009      	beq.n	800367e <HAL_TIM_OC_Start+0xfa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <HAL_TIM_OC_Start+0x13c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIM_OC_Start+0xfa>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <HAL_TIM_OC_Start+0x140>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d010      	beq.n	80036b2 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800

080036c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e041      	b.n	800375e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f839 	bl	8003766 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 f9f6 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start+0x24>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e022      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x3e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e015      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x58>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e008      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e05e      	b.n	80038a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0x82>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	e013      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x92>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003808:	e00b      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003818:	e003      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb5a 	bl	8003ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1e      	ldr	r2, [pc, #120]	@ (80038b0 <HAL_TIM_PWM_Start+0x138>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d107      	bne.n	800384a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <HAL_TIM_PWM_Start+0x138>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_TIM_PWM_Start+0xfa>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385c:	d009      	beq.n	8003872 <HAL_TIM_PWM_Start+0xfa>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a14      	ldr	r2, [pc, #80]	@ (80038b4 <HAL_TIM_PWM_Start+0x13c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_TIM_PWM_Start+0xfa>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a12      	ldr	r2, [pc, #72]	@ (80038b8 <HAL_TIM_PWM_Start+0x140>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d111      	bne.n	8003896 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b06      	cmp	r3, #6
 8003882:	d010      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003894:	e007      	b.n	80038a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800

080038bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_TIM_OC_ConfigChannel+0x1e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e048      	b.n	800396c <HAL_TIM_OC_ConfigChannel+0xb0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d839      	bhi.n	800395c <HAL_TIM_OC_ConfigChannel+0xa0>
 80038e8:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003925 	.word	0x08003925
 80038f4:	0800395d 	.word	0x0800395d
 80038f8:	0800395d 	.word	0x0800395d
 80038fc:	0800395d 	.word	0x0800395d
 8003900:	08003933 	.word	0x08003933
 8003904:	0800395d 	.word	0x0800395d
 8003908:	0800395d 	.word	0x0800395d
 800390c:	0800395d 	.word	0x0800395d
 8003910:	08003941 	.word	0x08003941
 8003914:	0800395d 	.word	0x0800395d
 8003918:	0800395d 	.word	0x0800395d
 800391c:	0800395d 	.word	0x0800395d
 8003920:	0800394f 	.word	0x0800394f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f952 	bl	8003bd4 <TIM_OC1_SetConfig>
      break;
 8003930:	e017      	b.n	8003962 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f9b1 	bl	8003ca0 <TIM_OC2_SetConfig>
      break;
 800393e:	e010      	b.n	8003962 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fa14 	bl	8003d74 <TIM_OC3_SetConfig>
      break;
 800394c:	e009      	b.n	8003962 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fa77 	bl	8003e48 <TIM_OC4_SetConfig>
      break;
 800395a:	e002      	b.n	8003962 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
      break;
 8003960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800398e:	2302      	movs	r3, #2
 8003990:	e0ae      	b.n	8003af0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	f200 809f 	bhi.w	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039a2:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039dd 	.word	0x080039dd
 80039ac:	08003ae1 	.word	0x08003ae1
 80039b0:	08003ae1 	.word	0x08003ae1
 80039b4:	08003ae1 	.word	0x08003ae1
 80039b8:	08003a1d 	.word	0x08003a1d
 80039bc:	08003ae1 	.word	0x08003ae1
 80039c0:	08003ae1 	.word	0x08003ae1
 80039c4:	08003ae1 	.word	0x08003ae1
 80039c8:	08003a5f 	.word	0x08003a5f
 80039cc:	08003ae1 	.word	0x08003ae1
 80039d0:	08003ae1 	.word	0x08003ae1
 80039d4:	08003ae1 	.word	0x08003ae1
 80039d8:	08003a9f 	.word	0x08003a9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f8f6 	bl	8003bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0204 	bic.w	r2, r2, #4
 8003a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6999      	ldr	r1, [r3, #24]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	619a      	str	r2, [r3, #24]
      break;
 8003a1a:	e064      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f93c 	bl	8003ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	619a      	str	r2, [r3, #24]
      break;
 8003a5c:	e043      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f985 	bl	8003d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0208 	orr.w	r2, r2, #8
 8003a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0204 	bic.w	r2, r2, #4
 8003a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69d9      	ldr	r1, [r3, #28]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	61da      	str	r2, [r3, #28]
      break;
 8003a9c:	e023      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f9cf 	bl	8003e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69d9      	ldr	r1, [r3, #28]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	021a      	lsls	r2, r3, #8
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	61da      	str	r2, [r3, #28]
      break;
 8003ade:	e002      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc8 <TIM_Base_SetConfig+0xd0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bcc <TIM_Base_SetConfig+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd0 <TIM_Base_SetConfig+0xd8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	@ (8003bc8 <TIM_Base_SetConfig+0xd0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <TIM_Base_SetConfig+0xd4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <TIM_Base_SetConfig+0xd8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc8 <TIM_Base_SetConfig+0xd0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0201 	bic.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c9c <TIM_OC1_SetConfig+0xc8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	@ (8003c9c <TIM_OC1_SetConfig+0xc8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d111      	bne.n	8003c76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00

08003ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 0210 	bic.w	r2, r3, #16
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <TIM_OC2_SetConfig+0xd0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a14      	ldr	r2, [pc, #80]	@ (8003d70 <TIM_OC2_SetConfig+0xd0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d113      	bne.n	8003d4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	40012c00 	.word	0x40012c00

08003d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <TIM_OC3_SetConfig+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a14      	ldr	r2, [pc, #80]	@ (8003e44 <TIM_OC3_SetConfig+0xd0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d113      	bne.n	8003e1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00

08003e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <TIM_OC4_SetConfig+0x98>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00

08003ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e046      	b.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a10      	ldr	r2, [pc, #64]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800

08003fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004000:	2302      	movs	r3, #2
 8004002:	e03d      	b.n	8004080 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e042      	b.n	8004122 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fd f88b 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	@ 0x24
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f972 	bl	80043b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004102:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b08a      	sub	sp, #40	@ 0x28
 800412e:	af02      	add	r7, sp, #8
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b20      	cmp	r3, #32
 8004148:	d175      	bne.n	8004236 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit+0x2c>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06e      	b.n	8004238 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2221      	movs	r2, #33	@ 0x21
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004168:	f7fd f9f2 	bl	8001550 <HAL_GetTick>
 800416c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004182:	d108      	bne.n	8004196 <HAL_UART_Transmit+0x6c>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e003      	b.n	800419e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800419e:	e02e      	b.n	80041fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2180      	movs	r1, #128	@ 0x80
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f848 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e03a      	b.n	8004238 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3302      	adds	r3, #2
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	e007      	b.n	80041f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3301      	adds	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1cb      	bne.n	80041a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2200      	movs	r2, #0
 8004210:	2140      	movs	r1, #64	@ 0x40
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f814 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e006      	b.n	8004238 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004250:	e03b      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d037      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fd f979 	bl	8001550 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <UART_WaitOnFlagUntilTimeout+0x30>
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e03a      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d023      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b80      	cmp	r3, #128	@ 0x80
 8004286:	d020      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d01d      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d116      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f81d 	bl	80042f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2208      	movs	r2, #8
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e00f      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d0b4      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b095      	sub	sp, #84	@ 0x54
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800431a:	643a      	str	r2, [r7, #64]	@ 0x40
 800431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	61fb      	str	r3, [r7, #28]
   return(result);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3314      	adds	r3, #20
 800434c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	2b01      	cmp	r3, #1
 8004368:	d119      	bne.n	800439e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	60bb      	str	r3, [r7, #8]
   return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800438a:	61ba      	str	r2, [r7, #24]
 800438c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043ac:	bf00      	nop
 80043ae:	3754      	adds	r7, #84	@ 0x54
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
	...

080043b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043f2:	f023 030c 	bic.w	r3, r3, #12
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2c      	ldr	r2, [pc, #176]	@ (80044cc <UART_SetConfig+0x114>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d103      	bne.n	8004428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fe fec2 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	e002      	b.n	800442e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004428:	f7fe feaa 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 800442c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009a      	lsls	r2, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <UART_SetConfig+0x118>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	0119      	lsls	r1, r3, #4
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	fbb2 f2f3 	udiv	r2, r2, r3
 8004464:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <UART_SetConfig+0x118>)
 8004466:	fba3 0302 	umull	r0, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2064      	movs	r0, #100	@ 0x64
 800446e:	fb00 f303 	mul.w	r3, r0, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	3332      	adds	r3, #50	@ 0x32
 8004478:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <UART_SetConfig+0x118>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004484:	4419      	add	r1, r3
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	fbb2 f2f3 	udiv	r2, r2, r3
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <UART_SetConfig+0x118>)
 800449e:	fba3 0302 	umull	r0, r3, r3, r2
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2064      	movs	r0, #100	@ 0x64
 80044a6:	fb00 f303 	mul.w	r3, r0, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	3332      	adds	r3, #50	@ 0x32
 80044b0:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <UART_SetConfig+0x118>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	440a      	add	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40013800 	.word	0x40013800
 80044d0:	51eb851f 	.word	0x51eb851f

080044d4 <__cvt>:
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044da:	461d      	mov	r5, r3
 80044dc:	bfbb      	ittet	lt
 80044de:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80044e2:	461d      	movlt	r5, r3
 80044e4:	2300      	movge	r3, #0
 80044e6:	232d      	movlt	r3, #45	@ 0x2d
 80044e8:	b088      	sub	sp, #32
 80044ea:	4614      	mov	r4, r2
 80044ec:	bfb8      	it	lt
 80044ee:	4614      	movlt	r4, r2
 80044f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80044f2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80044fc:	f023 0820 	bic.w	r8, r3, #32
 8004500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004504:	d005      	beq.n	8004512 <__cvt+0x3e>
 8004506:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800450a:	d100      	bne.n	800450e <__cvt+0x3a>
 800450c:	3601      	adds	r6, #1
 800450e:	2302      	movs	r3, #2
 8004510:	e000      	b.n	8004514 <__cvt+0x40>
 8004512:	2303      	movs	r3, #3
 8004514:	aa07      	add	r2, sp, #28
 8004516:	9204      	str	r2, [sp, #16]
 8004518:	aa06      	add	r2, sp, #24
 800451a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800451e:	e9cd 3600 	strd	r3, r6, [sp]
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	f000 fe6f 	bl	8005208 <_dtoa_r>
 800452a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800452e:	4607      	mov	r7, r0
 8004530:	d119      	bne.n	8004566 <__cvt+0x92>
 8004532:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004534:	07db      	lsls	r3, r3, #31
 8004536:	d50e      	bpl.n	8004556 <__cvt+0x82>
 8004538:	eb00 0906 	add.w	r9, r0, r6
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	4620      	mov	r0, r4
 8004542:	4629      	mov	r1, r5
 8004544:	f7fc fa30 	bl	80009a8 <__aeabi_dcmpeq>
 8004548:	b108      	cbz	r0, 800454e <__cvt+0x7a>
 800454a:	f8cd 901c 	str.w	r9, [sp, #28]
 800454e:	2230      	movs	r2, #48	@ 0x30
 8004550:	9b07      	ldr	r3, [sp, #28]
 8004552:	454b      	cmp	r3, r9
 8004554:	d31e      	bcc.n	8004594 <__cvt+0xc0>
 8004556:	4638      	mov	r0, r7
 8004558:	9b07      	ldr	r3, [sp, #28]
 800455a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800455c:	1bdb      	subs	r3, r3, r7
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	b008      	add	sp, #32
 8004562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004566:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800456a:	eb00 0906 	add.w	r9, r0, r6
 800456e:	d1e5      	bne.n	800453c <__cvt+0x68>
 8004570:	7803      	ldrb	r3, [r0, #0]
 8004572:	2b30      	cmp	r3, #48	@ 0x30
 8004574:	d10a      	bne.n	800458c <__cvt+0xb8>
 8004576:	2200      	movs	r2, #0
 8004578:	2300      	movs	r3, #0
 800457a:	4620      	mov	r0, r4
 800457c:	4629      	mov	r1, r5
 800457e:	f7fc fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8004582:	b918      	cbnz	r0, 800458c <__cvt+0xb8>
 8004584:	f1c6 0601 	rsb	r6, r6, #1
 8004588:	f8ca 6000 	str.w	r6, [sl]
 800458c:	f8da 3000 	ldr.w	r3, [sl]
 8004590:	4499      	add	r9, r3
 8004592:	e7d3      	b.n	800453c <__cvt+0x68>
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	9107      	str	r1, [sp, #28]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e7d9      	b.n	8004550 <__cvt+0x7c>

0800459c <__exponent>:
 800459c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459e:	2900      	cmp	r1, #0
 80045a0:	bfb6      	itet	lt
 80045a2:	232d      	movlt	r3, #45	@ 0x2d
 80045a4:	232b      	movge	r3, #43	@ 0x2b
 80045a6:	4249      	neglt	r1, r1
 80045a8:	2909      	cmp	r1, #9
 80045aa:	7002      	strb	r2, [r0, #0]
 80045ac:	7043      	strb	r3, [r0, #1]
 80045ae:	dd29      	ble.n	8004604 <__exponent+0x68>
 80045b0:	f10d 0307 	add.w	r3, sp, #7
 80045b4:	461d      	mov	r5, r3
 80045b6:	270a      	movs	r7, #10
 80045b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80045bc:	461a      	mov	r2, r3
 80045be:	fb07 1416 	mls	r4, r7, r6, r1
 80045c2:	3430      	adds	r4, #48	@ 0x30
 80045c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80045c8:	460c      	mov	r4, r1
 80045ca:	2c63      	cmp	r4, #99	@ 0x63
 80045cc:	4631      	mov	r1, r6
 80045ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80045d2:	dcf1      	bgt.n	80045b8 <__exponent+0x1c>
 80045d4:	3130      	adds	r1, #48	@ 0x30
 80045d6:	1e94      	subs	r4, r2, #2
 80045d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045dc:	4623      	mov	r3, r4
 80045de:	1c41      	adds	r1, r0, #1
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	d30a      	bcc.n	80045fa <__exponent+0x5e>
 80045e4:	f10d 0309 	add.w	r3, sp, #9
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	42ac      	cmp	r4, r5
 80045ec:	bf88      	it	hi
 80045ee:	2300      	movhi	r3, #0
 80045f0:	3302      	adds	r3, #2
 80045f2:	4403      	add	r3, r0
 80045f4:	1a18      	subs	r0, r3, r0
 80045f6:	b003      	add	sp, #12
 80045f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80045fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004602:	e7ed      	b.n	80045e0 <__exponent+0x44>
 8004604:	2330      	movs	r3, #48	@ 0x30
 8004606:	3130      	adds	r1, #48	@ 0x30
 8004608:	7083      	strb	r3, [r0, #2]
 800460a:	70c1      	strb	r1, [r0, #3]
 800460c:	1d03      	adds	r3, r0, #4
 800460e:	e7f1      	b.n	80045f4 <__exponent+0x58>

08004610 <_printf_float>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	b091      	sub	sp, #68	@ 0x44
 8004616:	460c      	mov	r4, r1
 8004618:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800461c:	4616      	mov	r6, r2
 800461e:	461f      	mov	r7, r3
 8004620:	4605      	mov	r5, r0
 8004622:	f000 fce1 	bl	8004fe8 <_localeconv_r>
 8004626:	6803      	ldr	r3, [r0, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	9308      	str	r3, [sp, #32]
 800462c:	f7fb fd90 	bl	8000150 <strlen>
 8004630:	2300      	movs	r3, #0
 8004632:	930e      	str	r3, [sp, #56]	@ 0x38
 8004634:	f8d8 3000 	ldr.w	r3, [r8]
 8004638:	9009      	str	r0, [sp, #36]	@ 0x24
 800463a:	3307      	adds	r3, #7
 800463c:	f023 0307 	bic.w	r3, r3, #7
 8004640:	f103 0208 	add.w	r2, r3, #8
 8004644:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004648:	f8d4 b000 	ldr.w	fp, [r4]
 800464c:	f8c8 2000 	str.w	r2, [r8]
 8004650:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004654:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800465a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800465e:	f04f 32ff 	mov.w	r2, #4294967295
 8004662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004666:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800466a:	4b9c      	ldr	r3, [pc, #624]	@ (80048dc <_printf_float+0x2cc>)
 800466c:	f7fc f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8004670:	bb70      	cbnz	r0, 80046d0 <_printf_float+0xc0>
 8004672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	4b98      	ldr	r3, [pc, #608]	@ (80048dc <_printf_float+0x2cc>)
 800467c:	f7fc f9a8 	bl	80009d0 <__aeabi_dcmple>
 8004680:	bb30      	cbnz	r0, 80046d0 <_printf_float+0xc0>
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4640      	mov	r0, r8
 8004688:	4649      	mov	r1, r9
 800468a:	f7fc f997 	bl	80009bc <__aeabi_dcmplt>
 800468e:	b110      	cbz	r0, 8004696 <_printf_float+0x86>
 8004690:	232d      	movs	r3, #45	@ 0x2d
 8004692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004696:	4a92      	ldr	r2, [pc, #584]	@ (80048e0 <_printf_float+0x2d0>)
 8004698:	4b92      	ldr	r3, [pc, #584]	@ (80048e4 <_printf_float+0x2d4>)
 800469a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800469e:	bf94      	ite	ls
 80046a0:	4690      	movls	r8, r2
 80046a2:	4698      	movhi	r8, r3
 80046a4:	2303      	movs	r3, #3
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	6123      	str	r3, [r4, #16]
 80046ac:	f02b 0304 	bic.w	r3, fp, #4
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	4633      	mov	r3, r6
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	9700      	str	r7, [sp, #0]
 80046ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80046bc:	f000 f9d4 	bl	8004a68 <_printf_common>
 80046c0:	3001      	adds	r0, #1
 80046c2:	f040 8090 	bne.w	80047e6 <_printf_float+0x1d6>
 80046c6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ca:	b011      	add	sp, #68	@ 0x44
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	4649      	mov	r1, r9
 80046d8:	f7fc f998 	bl	8000a0c <__aeabi_dcmpun>
 80046dc:	b148      	cbz	r0, 80046f2 <_printf_float+0xe2>
 80046de:	464b      	mov	r3, r9
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bfb8      	it	lt
 80046e4:	232d      	movlt	r3, #45	@ 0x2d
 80046e6:	4a80      	ldr	r2, [pc, #512]	@ (80048e8 <_printf_float+0x2d8>)
 80046e8:	bfb8      	it	lt
 80046ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80046ee:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <_printf_float+0x2dc>)
 80046f0:	e7d3      	b.n	800469a <_printf_float+0x8a>
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	d13f      	bne.n	800477c <_printf_float+0x16c>
 80046fc:	2306      	movs	r3, #6
 80046fe:	6063      	str	r3, [r4, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	9206      	str	r2, [sp, #24]
 800470a:	aa0e      	add	r2, sp, #56	@ 0x38
 800470c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004710:	aa0d      	add	r2, sp, #52	@ 0x34
 8004712:	9203      	str	r2, [sp, #12]
 8004714:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004718:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	4642      	mov	r2, r8
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4628      	mov	r0, r5
 8004724:	464b      	mov	r3, r9
 8004726:	910a      	str	r1, [sp, #40]	@ 0x28
 8004728:	f7ff fed4 	bl	80044d4 <__cvt>
 800472c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800472e:	4680      	mov	r8, r0
 8004730:	2947      	cmp	r1, #71	@ 0x47
 8004732:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004734:	d128      	bne.n	8004788 <_printf_float+0x178>
 8004736:	1cc8      	adds	r0, r1, #3
 8004738:	db02      	blt.n	8004740 <_printf_float+0x130>
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	4299      	cmp	r1, r3
 800473e:	dd40      	ble.n	80047c2 <_printf_float+0x1b2>
 8004740:	f1aa 0a02 	sub.w	sl, sl, #2
 8004744:	fa5f fa8a 	uxtb.w	sl, sl
 8004748:	4652      	mov	r2, sl
 800474a:	3901      	subs	r1, #1
 800474c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004750:	910d      	str	r1, [sp, #52]	@ 0x34
 8004752:	f7ff ff23 	bl	800459c <__exponent>
 8004756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004758:	4681      	mov	r9, r0
 800475a:	1813      	adds	r3, r2, r0
 800475c:	2a01      	cmp	r2, #1
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	dc02      	bgt.n	8004768 <_printf_float+0x158>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	07d2      	lsls	r2, r2, #31
 8004766:	d501      	bpl.n	800476c <_printf_float+0x15c>
 8004768:	3301      	adds	r3, #1
 800476a:	6123      	str	r3, [r4, #16]
 800476c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004770:	2b00      	cmp	r3, #0
 8004772:	d09e      	beq.n	80046b2 <_printf_float+0xa2>
 8004774:	232d      	movs	r3, #45	@ 0x2d
 8004776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800477a:	e79a      	b.n	80046b2 <_printf_float+0xa2>
 800477c:	2947      	cmp	r1, #71	@ 0x47
 800477e:	d1bf      	bne.n	8004700 <_printf_float+0xf0>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1bd      	bne.n	8004700 <_printf_float+0xf0>
 8004784:	2301      	movs	r3, #1
 8004786:	e7ba      	b.n	80046fe <_printf_float+0xee>
 8004788:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800478c:	d9dc      	bls.n	8004748 <_printf_float+0x138>
 800478e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004792:	d118      	bne.n	80047c6 <_printf_float+0x1b6>
 8004794:	2900      	cmp	r1, #0
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	dd0b      	ble.n	80047b2 <_printf_float+0x1a2>
 800479a:	6121      	str	r1, [r4, #16]
 800479c:	b913      	cbnz	r3, 80047a4 <_printf_float+0x194>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	07d0      	lsls	r0, r2, #31
 80047a2:	d502      	bpl.n	80047aa <_printf_float+0x19a>
 80047a4:	3301      	adds	r3, #1
 80047a6:	440b      	add	r3, r1
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	f04f 0900 	mov.w	r9, #0
 80047ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047b0:	e7dc      	b.n	800476c <_printf_float+0x15c>
 80047b2:	b913      	cbnz	r3, 80047ba <_printf_float+0x1aa>
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	07d2      	lsls	r2, r2, #31
 80047b8:	d501      	bpl.n	80047be <_printf_float+0x1ae>
 80047ba:	3302      	adds	r3, #2
 80047bc:	e7f4      	b.n	80047a8 <_printf_float+0x198>
 80047be:	2301      	movs	r3, #1
 80047c0:	e7f2      	b.n	80047a8 <_printf_float+0x198>
 80047c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80047c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047c8:	4299      	cmp	r1, r3
 80047ca:	db05      	blt.n	80047d8 <_printf_float+0x1c8>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	6121      	str	r1, [r4, #16]
 80047d0:	07d8      	lsls	r0, r3, #31
 80047d2:	d5ea      	bpl.n	80047aa <_printf_float+0x19a>
 80047d4:	1c4b      	adds	r3, r1, #1
 80047d6:	e7e7      	b.n	80047a8 <_printf_float+0x198>
 80047d8:	2900      	cmp	r1, #0
 80047da:	bfcc      	ite	gt
 80047dc:	2201      	movgt	r2, #1
 80047de:	f1c1 0202 	rsble	r2, r1, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	e7e0      	b.n	80047a8 <_printf_float+0x198>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	055a      	lsls	r2, r3, #21
 80047ea:	d407      	bmi.n	80047fc <_printf_float+0x1ec>
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	4642      	mov	r2, r8
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	d12b      	bne.n	8004852 <_printf_float+0x242>
 80047fa:	e764      	b.n	80046c6 <_printf_float+0xb6>
 80047fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004800:	f240 80dc 	bls.w	80049bc <_printf_float+0x3ac>
 8004804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	f7fc f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004810:	2800      	cmp	r0, #0
 8004812:	d033      	beq.n	800487c <_printf_float+0x26c>
 8004814:	2301      	movs	r3, #1
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	4a35      	ldr	r2, [pc, #212]	@ (80048f0 <_printf_float+0x2e0>)
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	f43f af51 	beq.w	80046c6 <_printf_float+0xb6>
 8004824:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004828:	4543      	cmp	r3, r8
 800482a:	db02      	blt.n	8004832 <_printf_float+0x222>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	07d8      	lsls	r0, r3, #31
 8004830:	d50f      	bpl.n	8004852 <_printf_float+0x242>
 8004832:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f af42 	beq.w	80046c6 <_printf_float+0xb6>
 8004842:	f04f 0900 	mov.w	r9, #0
 8004846:	f108 38ff 	add.w	r8, r8, #4294967295
 800484a:	f104 0a1a 	add.w	sl, r4, #26
 800484e:	45c8      	cmp	r8, r9
 8004850:	dc09      	bgt.n	8004866 <_printf_float+0x256>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	079b      	lsls	r3, r3, #30
 8004856:	f100 8102 	bmi.w	8004a5e <_printf_float+0x44e>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800485e:	4298      	cmp	r0, r3
 8004860:	bfb8      	it	lt
 8004862:	4618      	movlt	r0, r3
 8004864:	e731      	b.n	80046ca <_printf_float+0xba>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f af28 	beq.w	80046c6 <_printf_float+0xb6>
 8004876:	f109 0901 	add.w	r9, r9, #1
 800487a:	e7e8      	b.n	800484e <_printf_float+0x23e>
 800487c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800487e:	2b00      	cmp	r3, #0
 8004880:	dc38      	bgt.n	80048f4 <_printf_float+0x2e4>
 8004882:	2301      	movs	r3, #1
 8004884:	4631      	mov	r1, r6
 8004886:	4628      	mov	r0, r5
 8004888:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <_printf_float+0x2e0>)
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f af1a 	beq.w	80046c6 <_printf_float+0xb6>
 8004892:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004896:	ea59 0303 	orrs.w	r3, r9, r3
 800489a:	d102      	bne.n	80048a2 <_printf_float+0x292>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	07d9      	lsls	r1, r3, #31
 80048a0:	d5d7      	bpl.n	8004852 <_printf_float+0x242>
 80048a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048a6:	4631      	mov	r1, r6
 80048a8:	4628      	mov	r0, r5
 80048aa:	47b8      	blx	r7
 80048ac:	3001      	adds	r0, #1
 80048ae:	f43f af0a 	beq.w	80046c6 <_printf_float+0xb6>
 80048b2:	f04f 0a00 	mov.w	sl, #0
 80048b6:	f104 0b1a 	add.w	fp, r4, #26
 80048ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048bc:	425b      	negs	r3, r3
 80048be:	4553      	cmp	r3, sl
 80048c0:	dc01      	bgt.n	80048c6 <_printf_float+0x2b6>
 80048c2:	464b      	mov	r3, r9
 80048c4:	e793      	b.n	80047ee <_printf_float+0x1de>
 80048c6:	2301      	movs	r3, #1
 80048c8:	465a      	mov	r2, fp
 80048ca:	4631      	mov	r1, r6
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b8      	blx	r7
 80048d0:	3001      	adds	r0, #1
 80048d2:	f43f aef8 	beq.w	80046c6 <_printf_float+0xb6>
 80048d6:	f10a 0a01 	add.w	sl, sl, #1
 80048da:	e7ee      	b.n	80048ba <_printf_float+0x2aa>
 80048dc:	7fefffff 	.word	0x7fefffff
 80048e0:	080071e6 	.word	0x080071e6
 80048e4:	080071ea 	.word	0x080071ea
 80048e8:	080071ee 	.word	0x080071ee
 80048ec:	080071f2 	.word	0x080071f2
 80048f0:	080071f6 	.word	0x080071f6
 80048f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80048fa:	4553      	cmp	r3, sl
 80048fc:	bfa8      	it	ge
 80048fe:	4653      	movge	r3, sl
 8004900:	2b00      	cmp	r3, #0
 8004902:	4699      	mov	r9, r3
 8004904:	dc36      	bgt.n	8004974 <_printf_float+0x364>
 8004906:	f04f 0b00 	mov.w	fp, #0
 800490a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490e:	f104 021a 	add.w	r2, r4, #26
 8004912:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004914:	930a      	str	r3, [sp, #40]	@ 0x28
 8004916:	eba3 0309 	sub.w	r3, r3, r9
 800491a:	455b      	cmp	r3, fp
 800491c:	dc31      	bgt.n	8004982 <_printf_float+0x372>
 800491e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004920:	459a      	cmp	sl, r3
 8004922:	dc3a      	bgt.n	800499a <_printf_float+0x38a>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	07da      	lsls	r2, r3, #31
 8004928:	d437      	bmi.n	800499a <_printf_float+0x38a>
 800492a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800492c:	ebaa 0903 	sub.w	r9, sl, r3
 8004930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004932:	ebaa 0303 	sub.w	r3, sl, r3
 8004936:	4599      	cmp	r9, r3
 8004938:	bfa8      	it	ge
 800493a:	4699      	movge	r9, r3
 800493c:	f1b9 0f00 	cmp.w	r9, #0
 8004940:	dc33      	bgt.n	80049aa <_printf_float+0x39a>
 8004942:	f04f 0800 	mov.w	r8, #0
 8004946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800494a:	f104 0b1a 	add.w	fp, r4, #26
 800494e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004950:	ebaa 0303 	sub.w	r3, sl, r3
 8004954:	eba3 0309 	sub.w	r3, r3, r9
 8004958:	4543      	cmp	r3, r8
 800495a:	f77f af7a 	ble.w	8004852 <_printf_float+0x242>
 800495e:	2301      	movs	r3, #1
 8004960:	465a      	mov	r2, fp
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	f43f aeac 	beq.w	80046c6 <_printf_float+0xb6>
 800496e:	f108 0801 	add.w	r8, r8, #1
 8004972:	e7ec      	b.n	800494e <_printf_float+0x33e>
 8004974:	4642      	mov	r2, r8
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	d1c2      	bne.n	8004906 <_printf_float+0x2f6>
 8004980:	e6a1      	b.n	80046c6 <_printf_float+0xb6>
 8004982:	2301      	movs	r3, #1
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	920a      	str	r2, [sp, #40]	@ 0x28
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f ae9a 	beq.w	80046c6 <_printf_float+0xb6>
 8004992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004994:	f10b 0b01 	add.w	fp, fp, #1
 8004998:	e7bb      	b.n	8004912 <_printf_float+0x302>
 800499a:	4631      	mov	r1, r6
 800499c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b8      	blx	r7
 80049a4:	3001      	adds	r0, #1
 80049a6:	d1c0      	bne.n	800492a <_printf_float+0x31a>
 80049a8:	e68d      	b.n	80046c6 <_printf_float+0xb6>
 80049aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049ac:	464b      	mov	r3, r9
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	4442      	add	r2, r8
 80049b4:	47b8      	blx	r7
 80049b6:	3001      	adds	r0, #1
 80049b8:	d1c3      	bne.n	8004942 <_printf_float+0x332>
 80049ba:	e684      	b.n	80046c6 <_printf_float+0xb6>
 80049bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80049c0:	f1ba 0f01 	cmp.w	sl, #1
 80049c4:	dc01      	bgt.n	80049ca <_printf_float+0x3ba>
 80049c6:	07db      	lsls	r3, r3, #31
 80049c8:	d536      	bpl.n	8004a38 <_printf_float+0x428>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4642      	mov	r2, r8
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f ae76 	beq.w	80046c6 <_printf_float+0xb6>
 80049da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	f43f ae6e 	beq.w	80046c6 <_printf_float+0xb6>
 80049ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049ee:	2200      	movs	r2, #0
 80049f0:	2300      	movs	r3, #0
 80049f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049f6:	f7fb ffd7 	bl	80009a8 <__aeabi_dcmpeq>
 80049fa:	b9c0      	cbnz	r0, 8004a2e <_printf_float+0x41e>
 80049fc:	4653      	mov	r3, sl
 80049fe:	f108 0201 	add.w	r2, r8, #1
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d10c      	bne.n	8004a26 <_printf_float+0x416>
 8004a0c:	e65b      	b.n	80046c6 <_printf_float+0xb6>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	465a      	mov	r2, fp
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae54 	beq.w	80046c6 <_printf_float+0xb6>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	45d0      	cmp	r8, sl
 8004a24:	dbf3      	blt.n	8004a0e <_printf_float+0x3fe>
 8004a26:	464b      	mov	r3, r9
 8004a28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a2c:	e6e0      	b.n	80047f0 <_printf_float+0x1e0>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	f104 0b1a 	add.w	fp, r4, #26
 8004a36:	e7f4      	b.n	8004a22 <_printf_float+0x412>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	e7e1      	b.n	8004a02 <_printf_float+0x3f2>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	464a      	mov	r2, r9
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	f43f ae3c 	beq.w	80046c6 <_printf_float+0xb6>
 8004a4e:	f108 0801 	add.w	r8, r8, #1
 8004a52:	68e3      	ldr	r3, [r4, #12]
 8004a54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a56:	1a5b      	subs	r3, r3, r1
 8004a58:	4543      	cmp	r3, r8
 8004a5a:	dcf0      	bgt.n	8004a3e <_printf_float+0x42e>
 8004a5c:	e6fd      	b.n	800485a <_printf_float+0x24a>
 8004a5e:	f04f 0800 	mov.w	r8, #0
 8004a62:	f104 0919 	add.w	r9, r4, #25
 8004a66:	e7f4      	b.n	8004a52 <_printf_float+0x442>

08004a68 <_printf_common>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4698      	mov	r8, r3
 8004a70:	688a      	ldr	r2, [r1, #8]
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	4607      	mov	r7, r0
 8004a76:	4293      	cmp	r3, r2
 8004a78:	bfb8      	it	lt
 8004a7a:	4613      	movlt	r3, r2
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a82:	460c      	mov	r4, r1
 8004a84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a88:	b10a      	cbz	r2, 8004a8e <_printf_common+0x26>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0699      	lsls	r1, r3, #26
 8004a92:	bf42      	ittt	mi
 8004a94:	6833      	ldrmi	r3, [r6, #0]
 8004a96:	3302      	addmi	r3, #2
 8004a98:	6033      	strmi	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d106      	bne.n	8004ab0 <_printf_common+0x48>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	6832      	ldr	r2, [r6, #0]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dc2b      	bgt.n	8004b08 <_printf_common+0xa0>
 8004ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	3b00      	subs	r3, #0
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	0692      	lsls	r2, r2, #26
 8004abe:	d430      	bmi.n	8004b22 <_printf_common+0xba>
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ac8:	47c8      	blx	r9
 8004aca:	3001      	adds	r0, #1
 8004acc:	d023      	beq.n	8004b16 <_printf_common+0xae>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf14      	ite	ne
 8004ada:	2500      	movne	r5, #0
 8004adc:	6833      	ldreq	r3, [r6, #0]
 8004ade:	f04f 0600 	mov.w	r6, #0
 8004ae2:	bf08      	it	eq
 8004ae4:	68e5      	ldreq	r5, [r4, #12]
 8004ae6:	f104 041a 	add.w	r4, r4, #26
 8004aea:	bf08      	it	eq
 8004aec:	1aed      	subeq	r5, r5, r3
 8004aee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004af2:	bf08      	it	eq
 8004af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af8:	4293      	cmp	r3, r2
 8004afa:	bfc4      	itt	gt
 8004afc:	1a9b      	subgt	r3, r3, r2
 8004afe:	18ed      	addgt	r5, r5, r3
 8004b00:	42b5      	cmp	r5, r6
 8004b02:	d11a      	bne.n	8004b3a <_printf_common+0xd2>
 8004b04:	2000      	movs	r0, #0
 8004b06:	e008      	b.n	8004b1a <_printf_common+0xb2>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4652      	mov	r2, sl
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c8      	blx	r9
 8004b12:	3001      	adds	r0, #1
 8004b14:	d103      	bne.n	8004b1e <_printf_common+0xb6>
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1e:	3501      	adds	r5, #1
 8004b20:	e7c1      	b.n	8004aa6 <_printf_common+0x3e>
 8004b22:	2030      	movs	r0, #48	@ 0x30
 8004b24:	18e1      	adds	r1, r4, r3
 8004b26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b30:	4422      	add	r2, r4
 8004b32:	3302      	adds	r3, #2
 8004b34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b38:	e7c2      	b.n	8004ac0 <_printf_common+0x58>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	4641      	mov	r1, r8
 8004b40:	4638      	mov	r0, r7
 8004b42:	47c8      	blx	r9
 8004b44:	3001      	adds	r0, #1
 8004b46:	d0e6      	beq.n	8004b16 <_printf_common+0xae>
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7d9      	b.n	8004b00 <_printf_common+0x98>

08004b4c <_printf_i>:
 8004b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b50:	7e0f      	ldrb	r7, [r1, #24]
 8004b52:	4691      	mov	r9, r2
 8004b54:	2f78      	cmp	r7, #120	@ 0x78
 8004b56:	4680      	mov	r8, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	469a      	mov	sl, r3
 8004b5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b62:	d807      	bhi.n	8004b74 <_printf_i+0x28>
 8004b64:	2f62      	cmp	r7, #98	@ 0x62
 8004b66:	d80a      	bhi.n	8004b7e <_printf_i+0x32>
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	f000 80d3 	beq.w	8004d14 <_printf_i+0x1c8>
 8004b6e:	2f58      	cmp	r7, #88	@ 0x58
 8004b70:	f000 80ba 	beq.w	8004ce8 <_printf_i+0x19c>
 8004b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b7c:	e03a      	b.n	8004bf4 <_printf_i+0xa8>
 8004b7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b82:	2b15      	cmp	r3, #21
 8004b84:	d8f6      	bhi.n	8004b74 <_printf_i+0x28>
 8004b86:	a101      	add	r1, pc, #4	@ (adr r1, 8004b8c <_printf_i+0x40>)
 8004b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004bf9 	.word	0x08004bf9
 8004b94:	08004b75 	.word	0x08004b75
 8004b98:	08004b75 	.word	0x08004b75
 8004b9c:	08004b75 	.word	0x08004b75
 8004ba0:	08004b75 	.word	0x08004b75
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b75 	.word	0x08004b75
 8004bac:	08004b75 	.word	0x08004b75
 8004bb0:	08004b75 	.word	0x08004b75
 8004bb4:	08004b75 	.word	0x08004b75
 8004bb8:	08004cfb 	.word	0x08004cfb
 8004bbc:	08004c23 	.word	0x08004c23
 8004bc0:	08004cb5 	.word	0x08004cb5
 8004bc4:	08004b75 	.word	0x08004b75
 8004bc8:	08004b75 	.word	0x08004b75
 8004bcc:	08004d1d 	.word	0x08004d1d
 8004bd0:	08004b75 	.word	0x08004b75
 8004bd4:	08004c23 	.word	0x08004c23
 8004bd8:	08004b75 	.word	0x08004b75
 8004bdc:	08004b75 	.word	0x08004b75
 8004be0:	08004cbd 	.word	0x08004cbd
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6032      	str	r2, [r6, #0]
 8004bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e09e      	b.n	8004d36 <_printf_i+0x1ea>
 8004bf8:	6833      	ldr	r3, [r6, #0]
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	6031      	str	r1, [r6, #0]
 8004c00:	0606      	lsls	r6, r0, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xbc>
 8004c04:	681d      	ldr	r5, [r3, #0]
 8004c06:	e003      	b.n	8004c10 <_printf_i+0xc4>
 8004c08:	0645      	lsls	r5, r0, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xb8>
 8004c0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	da03      	bge.n	8004c1c <_printf_i+0xd0>
 8004c14:	232d      	movs	r3, #45	@ 0x2d
 8004c16:	426d      	negs	r5, r5
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1c:	230a      	movs	r3, #10
 8004c1e:	4859      	ldr	r0, [pc, #356]	@ (8004d84 <_printf_i+0x238>)
 8004c20:	e011      	b.n	8004c46 <_printf_i+0xfa>
 8004c22:	6821      	ldr	r1, [r4, #0]
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	0608      	lsls	r0, r1, #24
 8004c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c2c:	d402      	bmi.n	8004c34 <_printf_i+0xe8>
 8004c2e:	0649      	lsls	r1, r1, #25
 8004c30:	bf48      	it	mi
 8004c32:	b2ad      	uxthmi	r5, r5
 8004c34:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	bf14      	ite	ne
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2308      	moveq	r3, #8
 8004c3e:	4851      	ldr	r0, [pc, #324]	@ (8004d84 <_printf_i+0x238>)
 8004c40:	2100      	movs	r1, #0
 8004c42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c46:	6866      	ldr	r6, [r4, #4]
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	bfa8      	it	ge
 8004c4c:	6821      	ldrge	r1, [r4, #0]
 8004c4e:	60a6      	str	r6, [r4, #8]
 8004c50:	bfa4      	itt	ge
 8004c52:	f021 0104 	bicge.w	r1, r1, #4
 8004c56:	6021      	strge	r1, [r4, #0]
 8004c58:	b90d      	cbnz	r5, 8004c5e <_printf_i+0x112>
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	d04b      	beq.n	8004cf6 <_printf_i+0x1aa>
 8004c5e:	4616      	mov	r6, r2
 8004c60:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c64:	fb03 5711 	mls	r7, r3, r1, r5
 8004c68:	5dc7      	ldrb	r7, [r0, r7]
 8004c6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c6e:	462f      	mov	r7, r5
 8004c70:	42bb      	cmp	r3, r7
 8004c72:	460d      	mov	r5, r1
 8004c74:	d9f4      	bls.n	8004c60 <_printf_i+0x114>
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d10b      	bne.n	8004c92 <_printf_i+0x146>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	07df      	lsls	r7, r3, #31
 8004c7e:	d508      	bpl.n	8004c92 <_printf_i+0x146>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	6861      	ldr	r1, [r4, #4]
 8004c84:	4299      	cmp	r1, r3
 8004c86:	bfde      	ittt	le
 8004c88:	2330      	movle	r3, #48	@ 0x30
 8004c8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c92:	1b92      	subs	r2, r2, r6
 8004c94:	6122      	str	r2, [r4, #16]
 8004c96:	464b      	mov	r3, r9
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f8cd a000 	str.w	sl, [sp]
 8004ca0:	aa03      	add	r2, sp, #12
 8004ca2:	f7ff fee1 	bl	8004a68 <_printf_common>
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d14a      	bne.n	8004d40 <_printf_i+0x1f4>
 8004caa:	f04f 30ff 	mov.w	r0, #4294967295
 8004cae:	b004      	add	sp, #16
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	f043 0320 	orr.w	r3, r3, #32
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	2778      	movs	r7, #120	@ 0x78
 8004cbe:	4832      	ldr	r0, [pc, #200]	@ (8004d88 <_printf_i+0x23c>)
 8004cc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	6831      	ldr	r1, [r6, #0]
 8004cc8:	061f      	lsls	r7, r3, #24
 8004cca:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cce:	d402      	bmi.n	8004cd6 <_printf_i+0x18a>
 8004cd0:	065f      	lsls	r7, r3, #25
 8004cd2:	bf48      	it	mi
 8004cd4:	b2ad      	uxthmi	r5, r5
 8004cd6:	6031      	str	r1, [r6, #0]
 8004cd8:	07d9      	lsls	r1, r3, #31
 8004cda:	bf44      	itt	mi
 8004cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce0:	6023      	strmi	r3, [r4, #0]
 8004ce2:	b11d      	cbz	r5, 8004cec <_printf_i+0x1a0>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	e7ab      	b.n	8004c40 <_printf_i+0xf4>
 8004ce8:	4826      	ldr	r0, [pc, #152]	@ (8004d84 <_printf_i+0x238>)
 8004cea:	e7e9      	b.n	8004cc0 <_printf_i+0x174>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	e7f6      	b.n	8004ce4 <_printf_i+0x198>
 8004cf6:	4616      	mov	r6, r2
 8004cf8:	e7bd      	b.n	8004c76 <_printf_i+0x12a>
 8004cfa:	6833      	ldr	r3, [r6, #0]
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	1d18      	adds	r0, r3, #4
 8004d00:	6961      	ldr	r1, [r4, #20]
 8004d02:	6030      	str	r0, [r6, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	d501      	bpl.n	8004d0e <_printf_i+0x1c2>
 8004d0a:	6019      	str	r1, [r3, #0]
 8004d0c:	e002      	b.n	8004d14 <_printf_i+0x1c8>
 8004d0e:	0668      	lsls	r0, r5, #25
 8004d10:	d5fb      	bpl.n	8004d0a <_printf_i+0x1be>
 8004d12:	8019      	strh	r1, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	4616      	mov	r6, r2
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	e7bc      	b.n	8004c96 <_printf_i+0x14a>
 8004d1c:	6833      	ldr	r3, [r6, #0]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	1d1a      	adds	r2, r3, #4
 8004d22:	6032      	str	r2, [r6, #0]
 8004d24:	681e      	ldr	r6, [r3, #0]
 8004d26:	6862      	ldr	r2, [r4, #4]
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 f9d4 	bl	80050d6 <memchr>
 8004d2e:	b108      	cbz	r0, 8004d34 <_printf_i+0x1e8>
 8004d30:	1b80      	subs	r0, r0, r6
 8004d32:	6060      	str	r0, [r4, #4]
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d3e:	e7aa      	b.n	8004c96 <_printf_i+0x14a>
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	47d0      	blx	sl
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d0ad      	beq.n	8004caa <_printf_i+0x15e>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	079b      	lsls	r3, r3, #30
 8004d52:	d413      	bmi.n	8004d7c <_printf_i+0x230>
 8004d54:	68e0      	ldr	r0, [r4, #12]
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	4298      	cmp	r0, r3
 8004d5a:	bfb8      	it	lt
 8004d5c:	4618      	movlt	r0, r3
 8004d5e:	e7a6      	b.n	8004cae <_printf_i+0x162>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4632      	mov	r2, r6
 8004d64:	4649      	mov	r1, r9
 8004d66:	4640      	mov	r0, r8
 8004d68:	47d0      	blx	sl
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d09d      	beq.n	8004caa <_printf_i+0x15e>
 8004d6e:	3501      	adds	r5, #1
 8004d70:	68e3      	ldr	r3, [r4, #12]
 8004d72:	9903      	ldr	r1, [sp, #12]
 8004d74:	1a5b      	subs	r3, r3, r1
 8004d76:	42ab      	cmp	r3, r5
 8004d78:	dcf2      	bgt.n	8004d60 <_printf_i+0x214>
 8004d7a:	e7eb      	b.n	8004d54 <_printf_i+0x208>
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	f104 0619 	add.w	r6, r4, #25
 8004d82:	e7f5      	b.n	8004d70 <_printf_i+0x224>
 8004d84:	080071f8 	.word	0x080071f8
 8004d88:	08007209 	.word	0x08007209

08004d8c <std>:
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	4604      	mov	r4, r0
 8004d92:	e9c0 3300 	strd	r3, r3, [r0]
 8004d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d9a:	6083      	str	r3, [r0, #8]
 8004d9c:	8181      	strh	r1, [r0, #12]
 8004d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004da0:	81c2      	strh	r2, [r0, #14]
 8004da2:	6183      	str	r3, [r0, #24]
 8004da4:	4619      	mov	r1, r3
 8004da6:	2208      	movs	r2, #8
 8004da8:	305c      	adds	r0, #92	@ 0x5c
 8004daa:	f000 f914 	bl	8004fd6 <memset>
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <std+0x58>)
 8004db0:	6224      	str	r4, [r4, #32]
 8004db2:	6263      	str	r3, [r4, #36]	@ 0x24
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <std+0x5c>)
 8004db6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004db8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <std+0x60>)
 8004dba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <std+0x64>)
 8004dbe:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <std+0x68>)
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d006      	beq.n	8004dd4 <std+0x48>
 8004dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dca:	4294      	cmp	r4, r2
 8004dcc:	d002      	beq.n	8004dd4 <std+0x48>
 8004dce:	33d0      	adds	r3, #208	@ 0xd0
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d105      	bne.n	8004de0 <std+0x54>
 8004dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ddc:	f000 b978 	b.w	80050d0 <__retarget_lock_init_recursive>
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	bf00      	nop
 8004de4:	08004f51 	.word	0x08004f51
 8004de8:	08004f73 	.word	0x08004f73
 8004dec:	08004fab 	.word	0x08004fab
 8004df0:	08004fcf 	.word	0x08004fcf
 8004df4:	200002e0 	.word	0x200002e0

08004df8 <stdio_exit_handler>:
 8004df8:	4a02      	ldr	r2, [pc, #8]	@ (8004e04 <stdio_exit_handler+0xc>)
 8004dfa:	4903      	ldr	r1, [pc, #12]	@ (8004e08 <stdio_exit_handler+0x10>)
 8004dfc:	4803      	ldr	r0, [pc, #12]	@ (8004e0c <stdio_exit_handler+0x14>)
 8004dfe:	f000 b869 	b.w	8004ed4 <_fwalk_sglue>
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c
 8004e08:	08006a45 	.word	0x08006a45
 8004e0c:	2000001c 	.word	0x2000001c

08004e10 <cleanup_stdio>:
 8004e10:	6841      	ldr	r1, [r0, #4]
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <cleanup_stdio+0x34>)
 8004e14:	b510      	push	{r4, lr}
 8004e16:	4299      	cmp	r1, r3
 8004e18:	4604      	mov	r4, r0
 8004e1a:	d001      	beq.n	8004e20 <cleanup_stdio+0x10>
 8004e1c:	f001 fe12 	bl	8006a44 <_fflush_r>
 8004e20:	68a1      	ldr	r1, [r4, #8]
 8004e22:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <cleanup_stdio+0x38>)
 8004e24:	4299      	cmp	r1, r3
 8004e26:	d002      	beq.n	8004e2e <cleanup_stdio+0x1e>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f001 fe0b 	bl	8006a44 <_fflush_r>
 8004e2e:	68e1      	ldr	r1, [r4, #12]
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <cleanup_stdio+0x3c>)
 8004e32:	4299      	cmp	r1, r3
 8004e34:	d004      	beq.n	8004e40 <cleanup_stdio+0x30>
 8004e36:	4620      	mov	r0, r4
 8004e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3c:	f001 be02 	b.w	8006a44 <_fflush_r>
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	200002e0 	.word	0x200002e0
 8004e48:	20000348 	.word	0x20000348
 8004e4c:	200003b0 	.word	0x200003b0

08004e50 <global_stdio_init.part.0>:
 8004e50:	b510      	push	{r4, lr}
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <global_stdio_init.part.0+0x30>)
 8004e54:	4c0b      	ldr	r4, [pc, #44]	@ (8004e84 <global_stdio_init.part.0+0x34>)
 8004e56:	4a0c      	ldr	r2, [pc, #48]	@ (8004e88 <global_stdio_init.part.0+0x38>)
 8004e58:	4620      	mov	r0, r4
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f7ff ff94 	bl	8004d8c <std>
 8004e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2109      	movs	r1, #9
 8004e6c:	f7ff ff8e 	bl	8004d8c <std>
 8004e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e74:	2202      	movs	r2, #2
 8004e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7a:	2112      	movs	r1, #18
 8004e7c:	f7ff bf86 	b.w	8004d8c <std>
 8004e80:	20000418 	.word	0x20000418
 8004e84:	200002e0 	.word	0x200002e0
 8004e88:	08004df9 	.word	0x08004df9

08004e8c <__sfp_lock_acquire>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	@ (8004e94 <__sfp_lock_acquire+0x8>)
 8004e8e:	f000 b920 	b.w	80050d2 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	20000421 	.word	0x20000421

08004e98 <__sfp_lock_release>:
 8004e98:	4801      	ldr	r0, [pc, #4]	@ (8004ea0 <__sfp_lock_release+0x8>)
 8004e9a:	f000 b91b 	b.w	80050d4 <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	20000421 	.word	0x20000421

08004ea4 <__sinit>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	f7ff fff0 	bl	8004e8c <__sfp_lock_acquire>
 8004eac:	6a23      	ldr	r3, [r4, #32]
 8004eae:	b11b      	cbz	r3, 8004eb8 <__sinit+0x14>
 8004eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb4:	f7ff bff0 	b.w	8004e98 <__sfp_lock_release>
 8004eb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <__sinit+0x28>)
 8004eba:	6223      	str	r3, [r4, #32]
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <__sinit+0x2c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f5      	bne.n	8004eb0 <__sinit+0xc>
 8004ec4:	f7ff ffc4 	bl	8004e50 <global_stdio_init.part.0>
 8004ec8:	e7f2      	b.n	8004eb0 <__sinit+0xc>
 8004eca:	bf00      	nop
 8004ecc:	08004e11 	.word	0x08004e11
 8004ed0:	20000418 	.word	0x20000418

08004ed4 <_fwalk_sglue>:
 8004ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed8:	4607      	mov	r7, r0
 8004eda:	4688      	mov	r8, r1
 8004edc:	4614      	mov	r4, r2
 8004ede:	2600      	movs	r6, #0
 8004ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ee8:	d505      	bpl.n	8004ef6 <_fwalk_sglue+0x22>
 8004eea:	6824      	ldr	r4, [r4, #0]
 8004eec:	2c00      	cmp	r4, #0
 8004eee:	d1f7      	bne.n	8004ee0 <_fwalk_sglue+0xc>
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d907      	bls.n	8004f0c <_fwalk_sglue+0x38>
 8004efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f00:	3301      	adds	r3, #1
 8004f02:	d003      	beq.n	8004f0c <_fwalk_sglue+0x38>
 8004f04:	4629      	mov	r1, r5
 8004f06:	4638      	mov	r0, r7
 8004f08:	47c0      	blx	r8
 8004f0a:	4306      	orrs	r6, r0
 8004f0c:	3568      	adds	r5, #104	@ 0x68
 8004f0e:	e7e9      	b.n	8004ee4 <_fwalk_sglue+0x10>

08004f10 <siprintf>:
 8004f10:	b40e      	push	{r1, r2, r3}
 8004f12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f16:	b500      	push	{lr}
 8004f18:	b09c      	sub	sp, #112	@ 0x70
 8004f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f1c:	9002      	str	r0, [sp, #8]
 8004f1e:	9006      	str	r0, [sp, #24]
 8004f20:	9107      	str	r1, [sp, #28]
 8004f22:	9104      	str	r1, [sp, #16]
 8004f24:	4808      	ldr	r0, [pc, #32]	@ (8004f48 <siprintf+0x38>)
 8004f26:	4909      	ldr	r1, [pc, #36]	@ (8004f4c <siprintf+0x3c>)
 8004f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2c:	9105      	str	r1, [sp, #20]
 8004f2e:	6800      	ldr	r0, [r0, #0]
 8004f30:	a902      	add	r1, sp, #8
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	f001 fc0a 	bl	800674c <_svfiprintf_r>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	9b02      	ldr	r3, [sp, #8]
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	b01c      	add	sp, #112	@ 0x70
 8004f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f44:	b003      	add	sp, #12
 8004f46:	4770      	bx	lr
 8004f48:	20000018 	.word	0x20000018
 8004f4c:	ffff0208 	.word	0xffff0208

08004f50 <__sread>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	460c      	mov	r4, r1
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	f000 f86c 	bl	8005034 <_read_r>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	bfab      	itete	ge
 8004f60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f62:	89a3      	ldrhlt	r3, [r4, #12]
 8004f64:	181b      	addge	r3, r3, r0
 8004f66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f6a:	bfac      	ite	ge
 8004f6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f6e:	81a3      	strhlt	r3, [r4, #12]
 8004f70:	bd10      	pop	{r4, pc}

08004f72 <__swrite>:
 8004f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	461f      	mov	r7, r3
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	05db      	lsls	r3, r3, #23
 8004f7e:	460c      	mov	r4, r1
 8004f80:	4616      	mov	r6, r2
 8004f82:	d505      	bpl.n	8004f90 <__swrite+0x1e>
 8004f84:	2302      	movs	r3, #2
 8004f86:	2200      	movs	r2, #0
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	f000 f840 	bl	8005010 <_lseek_r>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	4632      	mov	r2, r6
 8004f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f98:	81a3      	strh	r3, [r4, #12]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa6:	f000 b857 	b.w	8005058 <_write_r>

08004faa <__sseek>:
 8004faa:	b510      	push	{r4, lr}
 8004fac:	460c      	mov	r4, r1
 8004fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb2:	f000 f82d 	bl	8005010 <_lseek_r>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	bf15      	itete	ne
 8004fbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004fbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fc6:	81a3      	strheq	r3, [r4, #12]
 8004fc8:	bf18      	it	ne
 8004fca:	81a3      	strhne	r3, [r4, #12]
 8004fcc:	bd10      	pop	{r4, pc}

08004fce <__sclose>:
 8004fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd2:	f000 b80d 	b.w	8004ff0 <_close_r>

08004fd6 <memset>:
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4402      	add	r2, r0
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d100      	bne.n	8004fe0 <memset+0xa>
 8004fde:	4770      	bx	lr
 8004fe0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe4:	e7f9      	b.n	8004fda <memset+0x4>
	...

08004fe8 <_localeconv_r>:
 8004fe8:	4800      	ldr	r0, [pc, #0]	@ (8004fec <_localeconv_r+0x4>)
 8004fea:	4770      	bx	lr
 8004fec:	20000158 	.word	0x20000158

08004ff0 <_close_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4d05      	ldr	r5, [pc, #20]	@ (800500c <_close_r+0x1c>)
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	f7fc f9bd 	bl	800137a <_close>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_close_r+0x1a>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_close_r+0x1a>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	2000041c 	.word	0x2000041c

08005010 <_lseek_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	2200      	movs	r2, #0
 800501a:	4d05      	ldr	r5, [pc, #20]	@ (8005030 <_lseek_r+0x20>)
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f7fc f9cf 	bl	80013c2 <_lseek>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_lseek_r+0x1e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_lseek_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	2000041c 	.word	0x2000041c

08005034 <_read_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	2200      	movs	r2, #0
 800503e:	4d05      	ldr	r5, [pc, #20]	@ (8005054 <_read_r+0x20>)
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fc f960 	bl	8001308 <_read>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_read_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_read_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	2000041c 	.word	0x2000041c

08005058 <_write_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4604      	mov	r4, r0
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	2200      	movs	r2, #0
 8005062:	4d05      	ldr	r5, [pc, #20]	@ (8005078 <_write_r+0x20>)
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fc f96b 	bl	8001342 <_write>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_write_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_write_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	2000041c 	.word	0x2000041c

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	@ (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000018 	.word	0x20000018

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	2600      	movs	r6, #0
 800508c:	4d0c      	ldr	r5, [pc, #48]	@ (80050c0 <__libc_init_array+0x38>)
 800508e:	4c0d      	ldr	r4, [pc, #52]	@ (80050c4 <__libc_init_array+0x3c>)
 8005090:	1b64      	subs	r4, r4, r5
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	f002 f870 	bl	800717c <_init>
 800509c:	2600      	movs	r6, #0
 800509e:	4d0a      	ldr	r5, [pc, #40]	@ (80050c8 <__libc_init_array+0x40>)
 80050a0:	4c0a      	ldr	r4, [pc, #40]	@ (80050cc <__libc_init_array+0x44>)
 80050a2:	1b64      	subs	r4, r4, r5
 80050a4:	10a4      	asrs	r4, r4, #2
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08007560 	.word	0x08007560
 80050c4:	08007560 	.word	0x08007560
 80050c8:	08007560 	.word	0x08007560
 80050cc:	08007564 	.word	0x08007564

080050d0 <__retarget_lock_init_recursive>:
 80050d0:	4770      	bx	lr

080050d2 <__retarget_lock_acquire_recursive>:
 80050d2:	4770      	bx	lr

080050d4 <__retarget_lock_release_recursive>:
 80050d4:	4770      	bx	lr

080050d6 <memchr>:
 80050d6:	4603      	mov	r3, r0
 80050d8:	b510      	push	{r4, lr}
 80050da:	b2c9      	uxtb	r1, r1
 80050dc:	4402      	add	r2, r0
 80050de:	4293      	cmp	r3, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	d101      	bne.n	80050e8 <memchr+0x12>
 80050e4:	2000      	movs	r0, #0
 80050e6:	e003      	b.n	80050f0 <memchr+0x1a>
 80050e8:	7804      	ldrb	r4, [r0, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	428c      	cmp	r4, r1
 80050ee:	d1f6      	bne.n	80050de <memchr+0x8>
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <quorem>:
 80050f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f6:	6903      	ldr	r3, [r0, #16]
 80050f8:	690c      	ldr	r4, [r1, #16]
 80050fa:	4607      	mov	r7, r0
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	db7e      	blt.n	80051fe <quorem+0x10c>
 8005100:	3c01      	subs	r4, #1
 8005102:	00a3      	lsls	r3, r4, #2
 8005104:	f100 0514 	add.w	r5, r0, #20
 8005108:	f101 0814 	add.w	r8, r1, #20
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800511c:	3301      	adds	r3, #1
 800511e:	429a      	cmp	r2, r3
 8005120:	fbb2 f6f3 	udiv	r6, r2, r3
 8005124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005128:	d32e      	bcc.n	8005188 <quorem+0x96>
 800512a:	f04f 0a00 	mov.w	sl, #0
 800512e:	46c4      	mov	ip, r8
 8005130:	46ae      	mov	lr, r5
 8005132:	46d3      	mov	fp, sl
 8005134:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005138:	b298      	uxth	r0, r3
 800513a:	fb06 a000 	mla	r0, r6, r0, sl
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	0c02      	lsrs	r2, r0, #16
 8005142:	fb06 2303 	mla	r3, r6, r3, r2
 8005146:	f8de 2000 	ldr.w	r2, [lr]
 800514a:	b280      	uxth	r0, r0
 800514c:	b292      	uxth	r2, r2
 800514e:	1a12      	subs	r2, r2, r0
 8005150:	445a      	add	r2, fp
 8005152:	f8de 0000 	ldr.w	r0, [lr]
 8005156:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800515a:	b29b      	uxth	r3, r3
 800515c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005160:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005164:	b292      	uxth	r2, r2
 8005166:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800516a:	45e1      	cmp	r9, ip
 800516c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005170:	f84e 2b04 	str.w	r2, [lr], #4
 8005174:	d2de      	bcs.n	8005134 <quorem+0x42>
 8005176:	9b00      	ldr	r3, [sp, #0]
 8005178:	58eb      	ldr	r3, [r5, r3]
 800517a:	b92b      	cbnz	r3, 8005188 <quorem+0x96>
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	3b04      	subs	r3, #4
 8005180:	429d      	cmp	r5, r3
 8005182:	461a      	mov	r2, r3
 8005184:	d32f      	bcc.n	80051e6 <quorem+0xf4>
 8005186:	613c      	str	r4, [r7, #16]
 8005188:	4638      	mov	r0, r7
 800518a:	f001 f97b 	bl	8006484 <__mcmp>
 800518e:	2800      	cmp	r0, #0
 8005190:	db25      	blt.n	80051de <quorem+0xec>
 8005192:	4629      	mov	r1, r5
 8005194:	2000      	movs	r0, #0
 8005196:	f858 2b04 	ldr.w	r2, [r8], #4
 800519a:	f8d1 c000 	ldr.w	ip, [r1]
 800519e:	fa1f fe82 	uxth.w	lr, r2
 80051a2:	fa1f f38c 	uxth.w	r3, ip
 80051a6:	eba3 030e 	sub.w	r3, r3, lr
 80051aa:	4403      	add	r3, r0
 80051ac:	0c12      	lsrs	r2, r2, #16
 80051ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80051b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051bc:	45c1      	cmp	r9, r8
 80051be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051c2:	f841 3b04 	str.w	r3, [r1], #4
 80051c6:	d2e6      	bcs.n	8005196 <quorem+0xa4>
 80051c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051d0:	b922      	cbnz	r2, 80051dc <quorem+0xea>
 80051d2:	3b04      	subs	r3, #4
 80051d4:	429d      	cmp	r5, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	d30b      	bcc.n	80051f2 <quorem+0x100>
 80051da:	613c      	str	r4, [r7, #16]
 80051dc:	3601      	adds	r6, #1
 80051de:	4630      	mov	r0, r6
 80051e0:	b003      	add	sp, #12
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	d1cb      	bne.n	8005186 <quorem+0x94>
 80051ee:	3c01      	subs	r4, #1
 80051f0:	e7c6      	b.n	8005180 <quorem+0x8e>
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	3b04      	subs	r3, #4
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d1ef      	bne.n	80051da <quorem+0xe8>
 80051fa:	3c01      	subs	r4, #1
 80051fc:	e7ea      	b.n	80051d4 <quorem+0xe2>
 80051fe:	2000      	movs	r0, #0
 8005200:	e7ee      	b.n	80051e0 <quorem+0xee>
 8005202:	0000      	movs	r0, r0
 8005204:	0000      	movs	r0, r0
	...

08005208 <_dtoa_r>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	4614      	mov	r4, r2
 800520e:	461d      	mov	r5, r3
 8005210:	69c7      	ldr	r7, [r0, #28]
 8005212:	b097      	sub	sp, #92	@ 0x5c
 8005214:	4683      	mov	fp, r0
 8005216:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800521a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800521c:	b97f      	cbnz	r7, 800523e <_dtoa_r+0x36>
 800521e:	2010      	movs	r0, #16
 8005220:	f000 fe02 	bl	8005e28 <malloc>
 8005224:	4602      	mov	r2, r0
 8005226:	f8cb 001c 	str.w	r0, [fp, #28]
 800522a:	b920      	cbnz	r0, 8005236 <_dtoa_r+0x2e>
 800522c:	21ef      	movs	r1, #239	@ 0xef
 800522e:	4ba8      	ldr	r3, [pc, #672]	@ (80054d0 <_dtoa_r+0x2c8>)
 8005230:	48a8      	ldr	r0, [pc, #672]	@ (80054d4 <_dtoa_r+0x2cc>)
 8005232:	f001 fc67 	bl	8006b04 <__assert_func>
 8005236:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800523a:	6007      	str	r7, [r0, #0]
 800523c:	60c7      	str	r7, [r0, #12]
 800523e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	b159      	cbz	r1, 800525e <_dtoa_r+0x56>
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	2301      	movs	r3, #1
 800524a:	4093      	lsls	r3, r2
 800524c:	604a      	str	r2, [r1, #4]
 800524e:	608b      	str	r3, [r1, #8]
 8005250:	4658      	mov	r0, fp
 8005252:	f000 fedf 	bl	8006014 <_Bfree>
 8005256:	2200      	movs	r2, #0
 8005258:	f8db 301c 	ldr.w	r3, [fp, #28]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	1e2b      	subs	r3, r5, #0
 8005260:	bfaf      	iteee	ge
 8005262:	2300      	movge	r3, #0
 8005264:	2201      	movlt	r2, #1
 8005266:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800526a:	9303      	strlt	r3, [sp, #12]
 800526c:	bfa8      	it	ge
 800526e:	6033      	strge	r3, [r6, #0]
 8005270:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005274:	4b98      	ldr	r3, [pc, #608]	@ (80054d8 <_dtoa_r+0x2d0>)
 8005276:	bfb8      	it	lt
 8005278:	6032      	strlt	r2, [r6, #0]
 800527a:	ea33 0308 	bics.w	r3, r3, r8
 800527e:	d112      	bne.n	80052a6 <_dtoa_r+0x9e>
 8005280:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005284:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800528c:	4323      	orrs	r3, r4
 800528e:	f000 8550 	beq.w	8005d32 <_dtoa_r+0xb2a>
 8005292:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005294:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80054dc <_dtoa_r+0x2d4>
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8552 	beq.w	8005d42 <_dtoa_r+0xb3a>
 800529e:	f10a 0303 	add.w	r3, sl, #3
 80052a2:	f000 bd4c 	b.w	8005d3e <_dtoa_r+0xb36>
 80052a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80052ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052b2:	2200      	movs	r2, #0
 80052b4:	2300      	movs	r3, #0
 80052b6:	f7fb fb77 	bl	80009a8 <__aeabi_dcmpeq>
 80052ba:	4607      	mov	r7, r0
 80052bc:	b158      	cbz	r0, 80052d6 <_dtoa_r+0xce>
 80052be:	2301      	movs	r3, #1
 80052c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052c6:	b113      	cbz	r3, 80052ce <_dtoa_r+0xc6>
 80052c8:	4b85      	ldr	r3, [pc, #532]	@ (80054e0 <_dtoa_r+0x2d8>)
 80052ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80054e4 <_dtoa_r+0x2dc>
 80052d2:	f000 bd36 	b.w	8005d42 <_dtoa_r+0xb3a>
 80052d6:	ab14      	add	r3, sp, #80	@ 0x50
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	ab15      	add	r3, sp, #84	@ 0x54
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	4658      	mov	r0, fp
 80052e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80052e4:	f001 f97e 	bl	80065e4 <__d2b>
 80052e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80052ec:	4681      	mov	r9, r0
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	d077      	beq.n	80053e2 <_dtoa_r+0x1da>
 80052f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80052fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005300:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005304:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005308:	9712      	str	r7, [sp, #72]	@ 0x48
 800530a:	4619      	mov	r1, r3
 800530c:	2200      	movs	r2, #0
 800530e:	4b76      	ldr	r3, [pc, #472]	@ (80054e8 <_dtoa_r+0x2e0>)
 8005310:	f7fa ff2a 	bl	8000168 <__aeabi_dsub>
 8005314:	a368      	add	r3, pc, #416	@ (adr r3, 80054b8 <_dtoa_r+0x2b0>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fb f8dd 	bl	80004d8 <__aeabi_dmul>
 800531e:	a368      	add	r3, pc, #416	@ (adr r3, 80054c0 <_dtoa_r+0x2b8>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fa ff22 	bl	800016c <__adddf3>
 8005328:	4604      	mov	r4, r0
 800532a:	4630      	mov	r0, r6
 800532c:	460d      	mov	r5, r1
 800532e:	f7fb f869 	bl	8000404 <__aeabi_i2d>
 8005332:	a365      	add	r3, pc, #404	@ (adr r3, 80054c8 <_dtoa_r+0x2c0>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb f8ce 	bl	80004d8 <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f7fa ff12 	bl	800016c <__adddf3>
 8005348:	4604      	mov	r4, r0
 800534a:	460d      	mov	r5, r1
 800534c:	f7fb fb74 	bl	8000a38 <__aeabi_d2iz>
 8005350:	2200      	movs	r2, #0
 8005352:	4607      	mov	r7, r0
 8005354:	2300      	movs	r3, #0
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb fb2f 	bl	80009bc <__aeabi_dcmplt>
 800535e:	b140      	cbz	r0, 8005372 <_dtoa_r+0x16a>
 8005360:	4638      	mov	r0, r7
 8005362:	f7fb f84f 	bl	8000404 <__aeabi_i2d>
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	f7fb fb1d 	bl	80009a8 <__aeabi_dcmpeq>
 800536e:	b900      	cbnz	r0, 8005372 <_dtoa_r+0x16a>
 8005370:	3f01      	subs	r7, #1
 8005372:	2f16      	cmp	r7, #22
 8005374:	d853      	bhi.n	800541e <_dtoa_r+0x216>
 8005376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800537a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ec <_dtoa_r+0x2e4>)
 800537c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f7fb fb1a 	bl	80009bc <__aeabi_dcmplt>
 8005388:	2800      	cmp	r0, #0
 800538a:	d04a      	beq.n	8005422 <_dtoa_r+0x21a>
 800538c:	2300      	movs	r3, #0
 800538e:	3f01      	subs	r7, #1
 8005390:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005392:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005394:	1b9b      	subs	r3, r3, r6
 8005396:	1e5a      	subs	r2, r3, #1
 8005398:	bf46      	itte	mi
 800539a:	f1c3 0801 	rsbmi	r8, r3, #1
 800539e:	2300      	movmi	r3, #0
 80053a0:	f04f 0800 	movpl.w	r8, #0
 80053a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80053a6:	bf48      	it	mi
 80053a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80053aa:	2f00      	cmp	r7, #0
 80053ac:	db3b      	blt.n	8005426 <_dtoa_r+0x21e>
 80053ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80053b2:	443b      	add	r3, r7
 80053b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053b6:	2300      	movs	r3, #0
 80053b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d866      	bhi.n	800548e <_dtoa_r+0x286>
 80053c0:	2b05      	cmp	r3, #5
 80053c2:	bfc4      	itt	gt
 80053c4:	3b04      	subgt	r3, #4
 80053c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80053c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053ca:	bfc8      	it	gt
 80053cc:	2400      	movgt	r4, #0
 80053ce:	f1a3 0302 	sub.w	r3, r3, #2
 80053d2:	bfd8      	it	le
 80053d4:	2401      	movle	r4, #1
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d864      	bhi.n	80054a4 <_dtoa_r+0x29c>
 80053da:	e8df f003 	tbb	[pc, r3]
 80053de:	382b      	.short	0x382b
 80053e0:	5636      	.short	0x5636
 80053e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80053e6:	441e      	add	r6, r3
 80053e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	bfc1      	itttt	gt
 80053f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80053f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80053f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80053fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005400:	bfd6      	itet	le
 8005402:	f1c3 0320 	rsble	r3, r3, #32
 8005406:	ea48 0003 	orrgt.w	r0, r8, r3
 800540a:	fa04 f003 	lslle.w	r0, r4, r3
 800540e:	f7fa ffe9 	bl	80003e4 <__aeabi_ui2d>
 8005412:	2201      	movs	r2, #1
 8005414:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005418:	3e01      	subs	r6, #1
 800541a:	9212      	str	r2, [sp, #72]	@ 0x48
 800541c:	e775      	b.n	800530a <_dtoa_r+0x102>
 800541e:	2301      	movs	r3, #1
 8005420:	e7b6      	b.n	8005390 <_dtoa_r+0x188>
 8005422:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005424:	e7b5      	b.n	8005392 <_dtoa_r+0x18a>
 8005426:	427b      	negs	r3, r7
 8005428:	930a      	str	r3, [sp, #40]	@ 0x28
 800542a:	2300      	movs	r3, #0
 800542c:	eba8 0807 	sub.w	r8, r8, r7
 8005430:	930e      	str	r3, [sp, #56]	@ 0x38
 8005432:	e7c2      	b.n	80053ba <_dtoa_r+0x1b2>
 8005434:	2300      	movs	r3, #0
 8005436:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005438:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800543a:	2b00      	cmp	r3, #0
 800543c:	dc35      	bgt.n	80054aa <_dtoa_r+0x2a2>
 800543e:	2301      	movs	r3, #1
 8005440:	461a      	mov	r2, r3
 8005442:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005446:	9221      	str	r2, [sp, #132]	@ 0x84
 8005448:	e00b      	b.n	8005462 <_dtoa_r+0x25a>
 800544a:	2301      	movs	r3, #1
 800544c:	e7f3      	b.n	8005436 <_dtoa_r+0x22e>
 800544e:	2300      	movs	r3, #0
 8005450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005452:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	9308      	str	r3, [sp, #32]
 8005458:	3301      	adds	r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	9307      	str	r3, [sp, #28]
 800545e:	bfb8      	it	lt
 8005460:	2301      	movlt	r3, #1
 8005462:	2100      	movs	r1, #0
 8005464:	2204      	movs	r2, #4
 8005466:	f8db 001c 	ldr.w	r0, [fp, #28]
 800546a:	f102 0514 	add.w	r5, r2, #20
 800546e:	429d      	cmp	r5, r3
 8005470:	d91f      	bls.n	80054b2 <_dtoa_r+0x2aa>
 8005472:	6041      	str	r1, [r0, #4]
 8005474:	4658      	mov	r0, fp
 8005476:	f000 fd8d 	bl	8005f94 <_Balloc>
 800547a:	4682      	mov	sl, r0
 800547c:	2800      	cmp	r0, #0
 800547e:	d139      	bne.n	80054f4 <_dtoa_r+0x2ec>
 8005480:	4602      	mov	r2, r0
 8005482:	f240 11af 	movw	r1, #431	@ 0x1af
 8005486:	4b1a      	ldr	r3, [pc, #104]	@ (80054f0 <_dtoa_r+0x2e8>)
 8005488:	e6d2      	b.n	8005230 <_dtoa_r+0x28>
 800548a:	2301      	movs	r3, #1
 800548c:	e7e0      	b.n	8005450 <_dtoa_r+0x248>
 800548e:	2401      	movs	r4, #1
 8005490:	2300      	movs	r3, #0
 8005492:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005494:	9320      	str	r3, [sp, #128]	@ 0x80
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	2200      	movs	r2, #0
 800549c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80054a0:	2312      	movs	r3, #18
 80054a2:	e7d0      	b.n	8005446 <_dtoa_r+0x23e>
 80054a4:	2301      	movs	r3, #1
 80054a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054a8:	e7f5      	b.n	8005496 <_dtoa_r+0x28e>
 80054aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80054b0:	e7d7      	b.n	8005462 <_dtoa_r+0x25a>
 80054b2:	3101      	adds	r1, #1
 80054b4:	0052      	lsls	r2, r2, #1
 80054b6:	e7d8      	b.n	800546a <_dtoa_r+0x262>
 80054b8:	636f4361 	.word	0x636f4361
 80054bc:	3fd287a7 	.word	0x3fd287a7
 80054c0:	8b60c8b3 	.word	0x8b60c8b3
 80054c4:	3fc68a28 	.word	0x3fc68a28
 80054c8:	509f79fb 	.word	0x509f79fb
 80054cc:	3fd34413 	.word	0x3fd34413
 80054d0:	08007227 	.word	0x08007227
 80054d4:	0800723e 	.word	0x0800723e
 80054d8:	7ff00000 	.word	0x7ff00000
 80054dc:	08007223 	.word	0x08007223
 80054e0:	080071f7 	.word	0x080071f7
 80054e4:	080071f6 	.word	0x080071f6
 80054e8:	3ff80000 	.word	0x3ff80000
 80054ec:	08007338 	.word	0x08007338
 80054f0:	08007296 	.word	0x08007296
 80054f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80054f8:	6018      	str	r0, [r3, #0]
 80054fa:	9b07      	ldr	r3, [sp, #28]
 80054fc:	2b0e      	cmp	r3, #14
 80054fe:	f200 80a4 	bhi.w	800564a <_dtoa_r+0x442>
 8005502:	2c00      	cmp	r4, #0
 8005504:	f000 80a1 	beq.w	800564a <_dtoa_r+0x442>
 8005508:	2f00      	cmp	r7, #0
 800550a:	dd33      	ble.n	8005574 <_dtoa_r+0x36c>
 800550c:	4b86      	ldr	r3, [pc, #536]	@ (8005728 <_dtoa_r+0x520>)
 800550e:	f007 020f 	and.w	r2, r7, #15
 8005512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005516:	05f8      	lsls	r0, r7, #23
 8005518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800551c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005524:	d516      	bpl.n	8005554 <_dtoa_r+0x34c>
 8005526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800552a:	4b80      	ldr	r3, [pc, #512]	@ (800572c <_dtoa_r+0x524>)
 800552c:	2603      	movs	r6, #3
 800552e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005532:	f7fb f8fb 	bl	800072c <__aeabi_ddiv>
 8005536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800553a:	f004 040f 	and.w	r4, r4, #15
 800553e:	4d7b      	ldr	r5, [pc, #492]	@ (800572c <_dtoa_r+0x524>)
 8005540:	b954      	cbnz	r4, 8005558 <_dtoa_r+0x350>
 8005542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554a:	f7fb f8ef 	bl	800072c <__aeabi_ddiv>
 800554e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005552:	e028      	b.n	80055a6 <_dtoa_r+0x39e>
 8005554:	2602      	movs	r6, #2
 8005556:	e7f2      	b.n	800553e <_dtoa_r+0x336>
 8005558:	07e1      	lsls	r1, r4, #31
 800555a:	d508      	bpl.n	800556e <_dtoa_r+0x366>
 800555c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005564:	f7fa ffb8 	bl	80004d8 <__aeabi_dmul>
 8005568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800556c:	3601      	adds	r6, #1
 800556e:	1064      	asrs	r4, r4, #1
 8005570:	3508      	adds	r5, #8
 8005572:	e7e5      	b.n	8005540 <_dtoa_r+0x338>
 8005574:	f000 80d2 	beq.w	800571c <_dtoa_r+0x514>
 8005578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800557c:	427c      	negs	r4, r7
 800557e:	4b6a      	ldr	r3, [pc, #424]	@ (8005728 <_dtoa_r+0x520>)
 8005580:	f004 020f 	and.w	r2, r4, #15
 8005584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa ffa4 	bl	80004d8 <__aeabi_dmul>
 8005590:	2602      	movs	r6, #2
 8005592:	2300      	movs	r3, #0
 8005594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005598:	4d64      	ldr	r5, [pc, #400]	@ (800572c <_dtoa_r+0x524>)
 800559a:	1124      	asrs	r4, r4, #4
 800559c:	2c00      	cmp	r4, #0
 800559e:	f040 80b2 	bne.w	8005706 <_dtoa_r+0x4fe>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1d3      	bne.n	800554e <_dtoa_r+0x346>
 80055a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80055aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80b7 	beq.w	8005720 <_dtoa_r+0x518>
 80055b2:	2200      	movs	r2, #0
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005730 <_dtoa_r+0x528>)
 80055ba:	f7fb f9ff 	bl	80009bc <__aeabi_dcmplt>
 80055be:	2800      	cmp	r0, #0
 80055c0:	f000 80ae 	beq.w	8005720 <_dtoa_r+0x518>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80aa 	beq.w	8005720 <_dtoa_r+0x518>
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd37      	ble.n	8005642 <_dtoa_r+0x43a>
 80055d2:	1e7b      	subs	r3, r7, #1
 80055d4:	4620      	mov	r0, r4
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	2200      	movs	r2, #0
 80055da:	4629      	mov	r1, r5
 80055dc:	4b55      	ldr	r3, [pc, #340]	@ (8005734 <_dtoa_r+0x52c>)
 80055de:	f7fa ff7b 	bl	80004d8 <__aeabi_dmul>
 80055e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e6:	9c08      	ldr	r4, [sp, #32]
 80055e8:	3601      	adds	r6, #1
 80055ea:	4630      	mov	r0, r6
 80055ec:	f7fa ff0a 	bl	8000404 <__aeabi_i2d>
 80055f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f4:	f7fa ff70 	bl	80004d8 <__aeabi_dmul>
 80055f8:	2200      	movs	r2, #0
 80055fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005738 <_dtoa_r+0x530>)
 80055fc:	f7fa fdb6 	bl	800016c <__adddf3>
 8005600:	4605      	mov	r5, r0
 8005602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005606:	2c00      	cmp	r4, #0
 8005608:	f040 809a 	bne.w	8005740 <_dtoa_r+0x538>
 800560c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	4b4a      	ldr	r3, [pc, #296]	@ (800573c <_dtoa_r+0x534>)
 8005614:	f7fa fda8 	bl	8000168 <__aeabi_dsub>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005620:	462a      	mov	r2, r5
 8005622:	4633      	mov	r3, r6
 8005624:	f7fb f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8005628:	2800      	cmp	r0, #0
 800562a:	f040 828e 	bne.w	8005b4a <_dtoa_r+0x942>
 800562e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005632:	462a      	mov	r2, r5
 8005634:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005638:	f7fb f9c0 	bl	80009bc <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	f040 8127 	bne.w	8005890 <_dtoa_r+0x688>
 8005642:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005646:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800564a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800564c:	2b00      	cmp	r3, #0
 800564e:	f2c0 8163 	blt.w	8005918 <_dtoa_r+0x710>
 8005652:	2f0e      	cmp	r7, #14
 8005654:	f300 8160 	bgt.w	8005918 <_dtoa_r+0x710>
 8005658:	4b33      	ldr	r3, [pc, #204]	@ (8005728 <_dtoa_r+0x520>)
 800565a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800565e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005662:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005666:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005668:	2b00      	cmp	r3, #0
 800566a:	da03      	bge.n	8005674 <_dtoa_r+0x46c>
 800566c:	9b07      	ldr	r3, [sp, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f340 8100 	ble.w	8005874 <_dtoa_r+0x66c>
 8005674:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005678:	4656      	mov	r6, sl
 800567a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fb f853 	bl	800072c <__aeabi_ddiv>
 8005686:	f7fb f9d7 	bl	8000a38 <__aeabi_d2iz>
 800568a:	4680      	mov	r8, r0
 800568c:	f7fa feba 	bl	8000404 <__aeabi_i2d>
 8005690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005694:	f7fa ff20 	bl	80004d8 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fd62 	bl	8000168 <__aeabi_dsub>
 80056a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80056a8:	9d07      	ldr	r5, [sp, #28]
 80056aa:	f806 4b01 	strb.w	r4, [r6], #1
 80056ae:	eba6 040a 	sub.w	r4, r6, sl
 80056b2:	42a5      	cmp	r5, r4
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	f040 8116 	bne.w	80058e8 <_dtoa_r+0x6e0>
 80056bc:	f7fa fd56 	bl	800016c <__adddf3>
 80056c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c4:	4604      	mov	r4, r0
 80056c6:	460d      	mov	r5, r1
 80056c8:	f7fb f996 	bl	80009f8 <__aeabi_dcmpgt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f040 80f8 	bne.w	80058c2 <_dtoa_r+0x6ba>
 80056d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f965 	bl	80009a8 <__aeabi_dcmpeq>
 80056de:	b118      	cbz	r0, 80056e8 <_dtoa_r+0x4e0>
 80056e0:	f018 0f01 	tst.w	r8, #1
 80056e4:	f040 80ed 	bne.w	80058c2 <_dtoa_r+0x6ba>
 80056e8:	4649      	mov	r1, r9
 80056ea:	4658      	mov	r0, fp
 80056ec:	f000 fc92 	bl	8006014 <_Bfree>
 80056f0:	2300      	movs	r3, #0
 80056f2:	7033      	strb	r3, [r6, #0]
 80056f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80056f6:	3701      	adds	r7, #1
 80056f8:	601f      	str	r7, [r3, #0]
 80056fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8320 	beq.w	8005d42 <_dtoa_r+0xb3a>
 8005702:	601e      	str	r6, [r3, #0]
 8005704:	e31d      	b.n	8005d42 <_dtoa_r+0xb3a>
 8005706:	07e2      	lsls	r2, r4, #31
 8005708:	d505      	bpl.n	8005716 <_dtoa_r+0x50e>
 800570a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800570e:	f7fa fee3 	bl	80004d8 <__aeabi_dmul>
 8005712:	2301      	movs	r3, #1
 8005714:	3601      	adds	r6, #1
 8005716:	1064      	asrs	r4, r4, #1
 8005718:	3508      	adds	r5, #8
 800571a:	e73f      	b.n	800559c <_dtoa_r+0x394>
 800571c:	2602      	movs	r6, #2
 800571e:	e742      	b.n	80055a6 <_dtoa_r+0x39e>
 8005720:	9c07      	ldr	r4, [sp, #28]
 8005722:	9704      	str	r7, [sp, #16]
 8005724:	e761      	b.n	80055ea <_dtoa_r+0x3e2>
 8005726:	bf00      	nop
 8005728:	08007338 	.word	0x08007338
 800572c:	08007310 	.word	0x08007310
 8005730:	3ff00000 	.word	0x3ff00000
 8005734:	40240000 	.word	0x40240000
 8005738:	401c0000 	.word	0x401c0000
 800573c:	40140000 	.word	0x40140000
 8005740:	4b70      	ldr	r3, [pc, #448]	@ (8005904 <_dtoa_r+0x6fc>)
 8005742:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800574c:	4454      	add	r4, sl
 800574e:	2900      	cmp	r1, #0
 8005750:	d045      	beq.n	80057de <_dtoa_r+0x5d6>
 8005752:	2000      	movs	r0, #0
 8005754:	496c      	ldr	r1, [pc, #432]	@ (8005908 <_dtoa_r+0x700>)
 8005756:	f7fa ffe9 	bl	800072c <__aeabi_ddiv>
 800575a:	4633      	mov	r3, r6
 800575c:	462a      	mov	r2, r5
 800575e:	f7fa fd03 	bl	8000168 <__aeabi_dsub>
 8005762:	4656      	mov	r6, sl
 8005764:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800576c:	f7fb f964 	bl	8000a38 <__aeabi_d2iz>
 8005770:	4605      	mov	r5, r0
 8005772:	f7fa fe47 	bl	8000404 <__aeabi_i2d>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800577e:	f7fa fcf3 	bl	8000168 <__aeabi_dsub>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	3530      	adds	r5, #48	@ 0x30
 8005788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800578c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005790:	f806 5b01 	strb.w	r5, [r6], #1
 8005794:	f7fb f912 	bl	80009bc <__aeabi_dcmplt>
 8005798:	2800      	cmp	r0, #0
 800579a:	d163      	bne.n	8005864 <_dtoa_r+0x65c>
 800579c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057a0:	2000      	movs	r0, #0
 80057a2:	495a      	ldr	r1, [pc, #360]	@ (800590c <_dtoa_r+0x704>)
 80057a4:	f7fa fce0 	bl	8000168 <__aeabi_dsub>
 80057a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057ac:	f7fb f906 	bl	80009bc <__aeabi_dcmplt>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f040 8087 	bne.w	80058c4 <_dtoa_r+0x6bc>
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	f43f af43 	beq.w	8005642 <_dtoa_r+0x43a>
 80057bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80057c0:	2200      	movs	r2, #0
 80057c2:	4b53      	ldr	r3, [pc, #332]	@ (8005910 <_dtoa_r+0x708>)
 80057c4:	f7fa fe88 	bl	80004d8 <__aeabi_dmul>
 80057c8:	2200      	movs	r2, #0
 80057ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005910 <_dtoa_r+0x708>)
 80057d4:	f7fa fe80 	bl	80004d8 <__aeabi_dmul>
 80057d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057dc:	e7c4      	b.n	8005768 <_dtoa_r+0x560>
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	f7fa fe79 	bl	80004d8 <__aeabi_dmul>
 80057e6:	4656      	mov	r6, sl
 80057e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80057ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f2:	f7fb f921 	bl	8000a38 <__aeabi_d2iz>
 80057f6:	4605      	mov	r5, r0
 80057f8:	f7fa fe04 	bl	8000404 <__aeabi_i2d>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005804:	f7fa fcb0 	bl	8000168 <__aeabi_dsub>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	3530      	adds	r5, #48	@ 0x30
 800580e:	f806 5b01 	strb.w	r5, [r6], #1
 8005812:	42a6      	cmp	r6, r4
 8005814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	d124      	bne.n	8005868 <_dtoa_r+0x660>
 800581e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005822:	4b39      	ldr	r3, [pc, #228]	@ (8005908 <_dtoa_r+0x700>)
 8005824:	f7fa fca2 	bl	800016c <__adddf3>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005830:	f7fb f8e2 	bl	80009f8 <__aeabi_dcmpgt>
 8005834:	2800      	cmp	r0, #0
 8005836:	d145      	bne.n	80058c4 <_dtoa_r+0x6bc>
 8005838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800583c:	2000      	movs	r0, #0
 800583e:	4932      	ldr	r1, [pc, #200]	@ (8005908 <_dtoa_r+0x700>)
 8005840:	f7fa fc92 	bl	8000168 <__aeabi_dsub>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800584c:	f7fb f8b6 	bl	80009bc <__aeabi_dcmplt>
 8005850:	2800      	cmp	r0, #0
 8005852:	f43f aef6 	beq.w	8005642 <_dtoa_r+0x43a>
 8005856:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005858:	1e73      	subs	r3, r6, #1
 800585a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800585c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005860:	2b30      	cmp	r3, #48	@ 0x30
 8005862:	d0f8      	beq.n	8005856 <_dtoa_r+0x64e>
 8005864:	9f04      	ldr	r7, [sp, #16]
 8005866:	e73f      	b.n	80056e8 <_dtoa_r+0x4e0>
 8005868:	4b29      	ldr	r3, [pc, #164]	@ (8005910 <_dtoa_r+0x708>)
 800586a:	f7fa fe35 	bl	80004d8 <__aeabi_dmul>
 800586e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005872:	e7bc      	b.n	80057ee <_dtoa_r+0x5e6>
 8005874:	d10c      	bne.n	8005890 <_dtoa_r+0x688>
 8005876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587a:	2200      	movs	r2, #0
 800587c:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <_dtoa_r+0x70c>)
 800587e:	f7fa fe2b 	bl	80004d8 <__aeabi_dmul>
 8005882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005886:	f7fb f8ad 	bl	80009e4 <__aeabi_dcmpge>
 800588a:	2800      	cmp	r0, #0
 800588c:	f000 815b 	beq.w	8005b46 <_dtoa_r+0x93e>
 8005890:	2400      	movs	r4, #0
 8005892:	4625      	mov	r5, r4
 8005894:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005896:	4656      	mov	r6, sl
 8005898:	43db      	mvns	r3, r3
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	2700      	movs	r7, #0
 800589e:	4621      	mov	r1, r4
 80058a0:	4658      	mov	r0, fp
 80058a2:	f000 fbb7 	bl	8006014 <_Bfree>
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	d0dc      	beq.n	8005864 <_dtoa_r+0x65c>
 80058aa:	b12f      	cbz	r7, 80058b8 <_dtoa_r+0x6b0>
 80058ac:	42af      	cmp	r7, r5
 80058ae:	d003      	beq.n	80058b8 <_dtoa_r+0x6b0>
 80058b0:	4639      	mov	r1, r7
 80058b2:	4658      	mov	r0, fp
 80058b4:	f000 fbae 	bl	8006014 <_Bfree>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4658      	mov	r0, fp
 80058bc:	f000 fbaa 	bl	8006014 <_Bfree>
 80058c0:	e7d0      	b.n	8005864 <_dtoa_r+0x65c>
 80058c2:	9704      	str	r7, [sp, #16]
 80058c4:	4633      	mov	r3, r6
 80058c6:	461e      	mov	r6, r3
 80058c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058cc:	2a39      	cmp	r2, #57	@ 0x39
 80058ce:	d107      	bne.n	80058e0 <_dtoa_r+0x6d8>
 80058d0:	459a      	cmp	sl, r3
 80058d2:	d1f8      	bne.n	80058c6 <_dtoa_r+0x6be>
 80058d4:	9a04      	ldr	r2, [sp, #16]
 80058d6:	3201      	adds	r2, #1
 80058d8:	9204      	str	r2, [sp, #16]
 80058da:	2230      	movs	r2, #48	@ 0x30
 80058dc:	f88a 2000 	strb.w	r2, [sl]
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	3201      	adds	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e7bd      	b.n	8005864 <_dtoa_r+0x65c>
 80058e8:	2200      	movs	r2, #0
 80058ea:	4b09      	ldr	r3, [pc, #36]	@ (8005910 <_dtoa_r+0x708>)
 80058ec:	f7fa fdf4 	bl	80004d8 <__aeabi_dmul>
 80058f0:	2200      	movs	r2, #0
 80058f2:	2300      	movs	r3, #0
 80058f4:	4604      	mov	r4, r0
 80058f6:	460d      	mov	r5, r1
 80058f8:	f7fb f856 	bl	80009a8 <__aeabi_dcmpeq>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f43f aebc 	beq.w	800567a <_dtoa_r+0x472>
 8005902:	e6f1      	b.n	80056e8 <_dtoa_r+0x4e0>
 8005904:	08007338 	.word	0x08007338
 8005908:	3fe00000 	.word	0x3fe00000
 800590c:	3ff00000 	.word	0x3ff00000
 8005910:	40240000 	.word	0x40240000
 8005914:	40140000 	.word	0x40140000
 8005918:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800591a:	2a00      	cmp	r2, #0
 800591c:	f000 80db 	beq.w	8005ad6 <_dtoa_r+0x8ce>
 8005920:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005922:	2a01      	cmp	r2, #1
 8005924:	f300 80bf 	bgt.w	8005aa6 <_dtoa_r+0x89e>
 8005928:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800592a:	2a00      	cmp	r2, #0
 800592c:	f000 80b7 	beq.w	8005a9e <_dtoa_r+0x896>
 8005930:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005934:	4646      	mov	r6, r8
 8005936:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800593a:	2101      	movs	r1, #1
 800593c:	441a      	add	r2, r3
 800593e:	4658      	mov	r0, fp
 8005940:	4498      	add	r8, r3
 8005942:	9209      	str	r2, [sp, #36]	@ 0x24
 8005944:	f000 fc1a 	bl	800617c <__i2b>
 8005948:	4605      	mov	r5, r0
 800594a:	b15e      	cbz	r6, 8005964 <_dtoa_r+0x75c>
 800594c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	dd08      	ble.n	8005964 <_dtoa_r+0x75c>
 8005952:	42b3      	cmp	r3, r6
 8005954:	bfa8      	it	ge
 8005956:	4633      	movge	r3, r6
 8005958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595a:	eba8 0803 	sub.w	r8, r8, r3
 800595e:	1af6      	subs	r6, r6, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	9309      	str	r3, [sp, #36]	@ 0x24
 8005964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005966:	b1f3      	cbz	r3, 80059a6 <_dtoa_r+0x79e>
 8005968:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80b7 	beq.w	8005ade <_dtoa_r+0x8d6>
 8005970:	b18c      	cbz	r4, 8005996 <_dtoa_r+0x78e>
 8005972:	4629      	mov	r1, r5
 8005974:	4622      	mov	r2, r4
 8005976:	4658      	mov	r0, fp
 8005978:	f000 fcbe 	bl	80062f8 <__pow5mult>
 800597c:	464a      	mov	r2, r9
 800597e:	4601      	mov	r1, r0
 8005980:	4605      	mov	r5, r0
 8005982:	4658      	mov	r0, fp
 8005984:	f000 fc10 	bl	80061a8 <__multiply>
 8005988:	4649      	mov	r1, r9
 800598a:	9004      	str	r0, [sp, #16]
 800598c:	4658      	mov	r0, fp
 800598e:	f000 fb41 	bl	8006014 <_Bfree>
 8005992:	9b04      	ldr	r3, [sp, #16]
 8005994:	4699      	mov	r9, r3
 8005996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005998:	1b1a      	subs	r2, r3, r4
 800599a:	d004      	beq.n	80059a6 <_dtoa_r+0x79e>
 800599c:	4649      	mov	r1, r9
 800599e:	4658      	mov	r0, fp
 80059a0:	f000 fcaa 	bl	80062f8 <__pow5mult>
 80059a4:	4681      	mov	r9, r0
 80059a6:	2101      	movs	r1, #1
 80059a8:	4658      	mov	r0, fp
 80059aa:	f000 fbe7 	bl	800617c <__i2b>
 80059ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059b0:	4604      	mov	r4, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 81c9 	beq.w	8005d4a <_dtoa_r+0xb42>
 80059b8:	461a      	mov	r2, r3
 80059ba:	4601      	mov	r1, r0
 80059bc:	4658      	mov	r0, fp
 80059be:	f000 fc9b 	bl	80062f8 <__pow5mult>
 80059c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059c4:	4604      	mov	r4, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	f300 808f 	bgt.w	8005aea <_dtoa_r+0x8e2>
 80059cc:	9b02      	ldr	r3, [sp, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 8087 	bne.w	8005ae2 <_dtoa_r+0x8da>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 8083 	bne.w	8005ae6 <_dtoa_r+0x8de>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059e6:	0d1b      	lsrs	r3, r3, #20
 80059e8:	051b      	lsls	r3, r3, #20
 80059ea:	b12b      	cbz	r3, 80059f8 <_dtoa_r+0x7f0>
 80059ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ee:	f108 0801 	add.w	r8, r8, #1
 80059f2:	3301      	adds	r3, #1
 80059f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059f6:	2301      	movs	r3, #1
 80059f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 81aa 	beq.w	8005d56 <_dtoa_r+0xb4e>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a08:	6918      	ldr	r0, [r3, #16]
 8005a0a:	f000 fb6b 	bl	80060e4 <__hi0bits>
 8005a0e:	f1c0 0020 	rsb	r0, r0, #32
 8005a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a14:	4418      	add	r0, r3
 8005a16:	f010 001f 	ands.w	r0, r0, #31
 8005a1a:	d071      	beq.n	8005b00 <_dtoa_r+0x8f8>
 8005a1c:	f1c0 0320 	rsb	r3, r0, #32
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	dd65      	ble.n	8005af0 <_dtoa_r+0x8e8>
 8005a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a26:	f1c0 001c 	rsb	r0, r0, #28
 8005a2a:	4403      	add	r3, r0
 8005a2c:	4480      	add	r8, r0
 8005a2e:	4406      	add	r6, r0
 8005a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	dd05      	ble.n	8005a44 <_dtoa_r+0x83c>
 8005a38:	4649      	mov	r1, r9
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	4658      	mov	r0, fp
 8005a3e:	f000 fcb5 	bl	80063ac <__lshift>
 8005a42:	4681      	mov	r9, r0
 8005a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dd05      	ble.n	8005a56 <_dtoa_r+0x84e>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4658      	mov	r0, fp
 8005a50:	f000 fcac 	bl	80063ac <__lshift>
 8005a54:	4604      	mov	r4, r0
 8005a56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d053      	beq.n	8005b04 <_dtoa_r+0x8fc>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4648      	mov	r0, r9
 8005a60:	f000 fd10 	bl	8006484 <__mcmp>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	da4d      	bge.n	8005b04 <_dtoa_r+0x8fc>
 8005a68:	1e7b      	subs	r3, r7, #1
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	220a      	movs	r2, #10
 8005a70:	2300      	movs	r3, #0
 8005a72:	4658      	mov	r0, fp
 8005a74:	f000 faf0 	bl	8006058 <__multadd>
 8005a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a7a:	4681      	mov	r9, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 816c 	beq.w	8005d5a <_dtoa_r+0xb52>
 8005a82:	2300      	movs	r3, #0
 8005a84:	4629      	mov	r1, r5
 8005a86:	220a      	movs	r2, #10
 8005a88:	4658      	mov	r0, fp
 8005a8a:	f000 fae5 	bl	8006058 <__multadd>
 8005a8e:	9b08      	ldr	r3, [sp, #32]
 8005a90:	4605      	mov	r5, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dc61      	bgt.n	8005b5a <_dtoa_r+0x952>
 8005a96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	dc3b      	bgt.n	8005b14 <_dtoa_r+0x90c>
 8005a9c:	e05d      	b.n	8005b5a <_dtoa_r+0x952>
 8005a9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005aa0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005aa4:	e746      	b.n	8005934 <_dtoa_r+0x72c>
 8005aa6:	9b07      	ldr	r3, [sp, #28]
 8005aa8:	1e5c      	subs	r4, r3, #1
 8005aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	bfbf      	itttt	lt
 8005ab0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ab2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005ab4:	1ae3      	sublt	r3, r4, r3
 8005ab6:	18d2      	addlt	r2, r2, r3
 8005ab8:	bfa8      	it	ge
 8005aba:	1b1c      	subge	r4, r3, r4
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	bfbe      	ittt	lt
 8005ac0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ac2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005ac4:	2400      	movlt	r4, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfb5      	itete	lt
 8005aca:	eba8 0603 	sublt.w	r6, r8, r3
 8005ace:	4646      	movge	r6, r8
 8005ad0:	2300      	movlt	r3, #0
 8005ad2:	9b07      	ldrge	r3, [sp, #28]
 8005ad4:	e730      	b.n	8005938 <_dtoa_r+0x730>
 8005ad6:	4646      	mov	r6, r8
 8005ad8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ada:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005adc:	e735      	b.n	800594a <_dtoa_r+0x742>
 8005ade:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ae0:	e75c      	b.n	800599c <_dtoa_r+0x794>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e788      	b.n	80059f8 <_dtoa_r+0x7f0>
 8005ae6:	9b02      	ldr	r3, [sp, #8]
 8005ae8:	e786      	b.n	80059f8 <_dtoa_r+0x7f0>
 8005aea:	2300      	movs	r3, #0
 8005aec:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aee:	e788      	b.n	8005a02 <_dtoa_r+0x7fa>
 8005af0:	d09f      	beq.n	8005a32 <_dtoa_r+0x82a>
 8005af2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af4:	331c      	adds	r3, #28
 8005af6:	441a      	add	r2, r3
 8005af8:	4498      	add	r8, r3
 8005afa:	441e      	add	r6, r3
 8005afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005afe:	e798      	b.n	8005a32 <_dtoa_r+0x82a>
 8005b00:	4603      	mov	r3, r0
 8005b02:	e7f6      	b.n	8005af2 <_dtoa_r+0x8ea>
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	9704      	str	r7, [sp, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dc20      	bgt.n	8005b4e <_dtoa_r+0x946>
 8005b0c:	9308      	str	r3, [sp, #32]
 8005b0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	dd1e      	ble.n	8005b52 <_dtoa_r+0x94a>
 8005b14:	9b08      	ldr	r3, [sp, #32]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f47f aebc 	bne.w	8005894 <_dtoa_r+0x68c>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	2205      	movs	r2, #5
 8005b20:	4658      	mov	r0, fp
 8005b22:	f000 fa99 	bl	8006058 <__multadd>
 8005b26:	4601      	mov	r1, r0
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	f000 fcaa 	bl	8006484 <__mcmp>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f77f aeaf 	ble.w	8005894 <_dtoa_r+0x68c>
 8005b36:	2331      	movs	r3, #49	@ 0x31
 8005b38:	4656      	mov	r6, sl
 8005b3a:	f806 3b01 	strb.w	r3, [r6], #1
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	3301      	adds	r3, #1
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	e6aa      	b.n	800589c <_dtoa_r+0x694>
 8005b46:	9c07      	ldr	r4, [sp, #28]
 8005b48:	9704      	str	r7, [sp, #16]
 8005b4a:	4625      	mov	r5, r4
 8005b4c:	e7f3      	b.n	8005b36 <_dtoa_r+0x92e>
 8005b4e:	9b07      	ldr	r3, [sp, #28]
 8005b50:	9308      	str	r3, [sp, #32]
 8005b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8104 	beq.w	8005d62 <_dtoa_r+0xb5a>
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	dd05      	ble.n	8005b6a <_dtoa_r+0x962>
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4632      	mov	r2, r6
 8005b62:	4658      	mov	r0, fp
 8005b64:	f000 fc22 	bl	80063ac <__lshift>
 8005b68:	4605      	mov	r5, r0
 8005b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d05a      	beq.n	8005c26 <_dtoa_r+0xa1e>
 8005b70:	4658      	mov	r0, fp
 8005b72:	6869      	ldr	r1, [r5, #4]
 8005b74:	f000 fa0e 	bl	8005f94 <_Balloc>
 8005b78:	4606      	mov	r6, r0
 8005b7a:	b928      	cbnz	r0, 8005b88 <_dtoa_r+0x980>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b82:	4b83      	ldr	r3, [pc, #524]	@ (8005d90 <_dtoa_r+0xb88>)
 8005b84:	f7ff bb54 	b.w	8005230 <_dtoa_r+0x28>
 8005b88:	692a      	ldr	r2, [r5, #16]
 8005b8a:	f105 010c 	add.w	r1, r5, #12
 8005b8e:	3202      	adds	r2, #2
 8005b90:	0092      	lsls	r2, r2, #2
 8005b92:	300c      	adds	r0, #12
 8005b94:	f000 ffa8 	bl	8006ae8 <memcpy>
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4658      	mov	r0, fp
 8005b9e:	f000 fc05 	bl	80063ac <__lshift>
 8005ba2:	462f      	mov	r7, r5
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	f10a 0301 	add.w	r3, sl, #1
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	9b08      	ldr	r3, [sp, #32]
 8005bae:	4453      	add	r3, sl
 8005bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bb2:	9b02      	ldr	r3, [sp, #8]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bba:	9b07      	ldr	r3, [sp, #28]
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4648      	mov	r0, r9
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	f7ff fa95 	bl	80050f2 <quorem>
 8005bc8:	4639      	mov	r1, r7
 8005bca:	9008      	str	r0, [sp, #32]
 8005bcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	f000 fc57 	bl	8006484 <__mcmp>
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4658      	mov	r0, fp
 8005bde:	f000 fc6d 	bl	80064bc <__mdiff>
 8005be2:	68c2      	ldr	r2, [r0, #12]
 8005be4:	4606      	mov	r6, r0
 8005be6:	bb02      	cbnz	r2, 8005c2a <_dtoa_r+0xa22>
 8005be8:	4601      	mov	r1, r0
 8005bea:	4648      	mov	r0, r9
 8005bec:	f000 fc4a 	bl	8006484 <__mcmp>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4658      	mov	r0, fp
 8005bf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005bf8:	f000 fa0c 	bl	8006014 <_Bfree>
 8005bfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c00:	9e07      	ldr	r6, [sp, #28]
 8005c02:	ea43 0102 	orr.w	r1, r3, r2
 8005c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c08:	4319      	orrs	r1, r3
 8005c0a:	d110      	bne.n	8005c2e <_dtoa_r+0xa26>
 8005c0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c10:	d029      	beq.n	8005c66 <_dtoa_r+0xa5e>
 8005c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd02      	ble.n	8005c1e <_dtoa_r+0xa16>
 8005c18:	9b08      	ldr	r3, [sp, #32]
 8005c1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	f883 8000 	strb.w	r8, [r3]
 8005c24:	e63b      	b.n	800589e <_dtoa_r+0x696>
 8005c26:	4628      	mov	r0, r5
 8005c28:	e7bb      	b.n	8005ba2 <_dtoa_r+0x99a>
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	e7e1      	b.n	8005bf2 <_dtoa_r+0x9ea>
 8005c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db04      	blt.n	8005c3e <_dtoa_r+0xa36>
 8005c34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005c36:	430b      	orrs	r3, r1
 8005c38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	d120      	bne.n	8005c80 <_dtoa_r+0xa78>
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	dded      	ble.n	8005c1e <_dtoa_r+0xa16>
 8005c42:	4649      	mov	r1, r9
 8005c44:	2201      	movs	r2, #1
 8005c46:	4658      	mov	r0, fp
 8005c48:	f000 fbb0 	bl	80063ac <__lshift>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4681      	mov	r9, r0
 8005c50:	f000 fc18 	bl	8006484 <__mcmp>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	dc03      	bgt.n	8005c60 <_dtoa_r+0xa58>
 8005c58:	d1e1      	bne.n	8005c1e <_dtoa_r+0xa16>
 8005c5a:	f018 0f01 	tst.w	r8, #1
 8005c5e:	d0de      	beq.n	8005c1e <_dtoa_r+0xa16>
 8005c60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c64:	d1d8      	bne.n	8005c18 <_dtoa_r+0xa10>
 8005c66:	2339      	movs	r3, #57	@ 0x39
 8005c68:	9a02      	ldr	r2, [sp, #8]
 8005c6a:	7013      	strb	r3, [r2, #0]
 8005c6c:	4633      	mov	r3, r6
 8005c6e:	461e      	mov	r6, r3
 8005c70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2a39      	cmp	r2, #57	@ 0x39
 8005c78:	d052      	beq.n	8005d20 <_dtoa_r+0xb18>
 8005c7a:	3201      	adds	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e60e      	b.n	800589e <_dtoa_r+0x696>
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	dd07      	ble.n	8005c94 <_dtoa_r+0xa8c>
 8005c84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c88:	d0ed      	beq.n	8005c66 <_dtoa_r+0xa5e>
 8005c8a:	9a02      	ldr	r2, [sp, #8]
 8005c8c:	f108 0301 	add.w	r3, r8, #1
 8005c90:	7013      	strb	r3, [r2, #0]
 8005c92:	e604      	b.n	800589e <_dtoa_r+0x696>
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	9a07      	ldr	r2, [sp, #28]
 8005c98:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d028      	beq.n	8005cf4 <_dtoa_r+0xaec>
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	220a      	movs	r2, #10
 8005ca8:	4658      	mov	r0, fp
 8005caa:	f000 f9d5 	bl	8006058 <__multadd>
 8005cae:	42af      	cmp	r7, r5
 8005cb0:	4681      	mov	r9, r0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	f04f 020a 	mov.w	r2, #10
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4658      	mov	r0, fp
 8005cbe:	d107      	bne.n	8005cd0 <_dtoa_r+0xac8>
 8005cc0:	f000 f9ca 	bl	8006058 <__multadd>
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	9307      	str	r3, [sp, #28]
 8005cce:	e774      	b.n	8005bba <_dtoa_r+0x9b2>
 8005cd0:	f000 f9c2 	bl	8006058 <__multadd>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4607      	mov	r7, r0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	220a      	movs	r2, #10
 8005cdc:	4658      	mov	r0, fp
 8005cde:	f000 f9bb 	bl	8006058 <__multadd>
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	e7f0      	b.n	8005cc8 <_dtoa_r+0xac0>
 8005ce6:	9b08      	ldr	r3, [sp, #32]
 8005ce8:	2700      	movs	r7, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bfcc      	ite	gt
 8005cee:	461e      	movgt	r6, r3
 8005cf0:	2601      	movle	r6, #1
 8005cf2:	4456      	add	r6, sl
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	f000 fb57 	bl	80063ac <__lshift>
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4681      	mov	r9, r0
 8005d02:	f000 fbbf 	bl	8006484 <__mcmp>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	dcb0      	bgt.n	8005c6c <_dtoa_r+0xa64>
 8005d0a:	d102      	bne.n	8005d12 <_dtoa_r+0xb0a>
 8005d0c:	f018 0f01 	tst.w	r8, #1
 8005d10:	d1ac      	bne.n	8005c6c <_dtoa_r+0xa64>
 8005d12:	4633      	mov	r3, r6
 8005d14:	461e      	mov	r6, r3
 8005d16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d1a:	2a30      	cmp	r2, #48	@ 0x30
 8005d1c:	d0fa      	beq.n	8005d14 <_dtoa_r+0xb0c>
 8005d1e:	e5be      	b.n	800589e <_dtoa_r+0x696>
 8005d20:	459a      	cmp	sl, r3
 8005d22:	d1a4      	bne.n	8005c6e <_dtoa_r+0xa66>
 8005d24:	9b04      	ldr	r3, [sp, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	2331      	movs	r3, #49	@ 0x31
 8005d2c:	f88a 3000 	strb.w	r3, [sl]
 8005d30:	e5b5      	b.n	800589e <_dtoa_r+0x696>
 8005d32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005d94 <_dtoa_r+0xb8c>
 8005d38:	b11b      	cbz	r3, 8005d42 <_dtoa_r+0xb3a>
 8005d3a:	f10a 0308 	add.w	r3, sl, #8
 8005d3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	4650      	mov	r0, sl
 8005d44:	b017      	add	sp, #92	@ 0x5c
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	f77f ae3d 	ble.w	80059cc <_dtoa_r+0x7c4>
 8005d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d54:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d56:	2001      	movs	r0, #1
 8005d58:	e65b      	b.n	8005a12 <_dtoa_r+0x80a>
 8005d5a:	9b08      	ldr	r3, [sp, #32]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f77f aed6 	ble.w	8005b0e <_dtoa_r+0x906>
 8005d62:	4656      	mov	r6, sl
 8005d64:	4621      	mov	r1, r4
 8005d66:	4648      	mov	r0, r9
 8005d68:	f7ff f9c3 	bl	80050f2 <quorem>
 8005d6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	f806 8b01 	strb.w	r8, [r6], #1
 8005d76:	eba6 020a 	sub.w	r2, r6, sl
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	ddb3      	ble.n	8005ce6 <_dtoa_r+0xade>
 8005d7e:	4649      	mov	r1, r9
 8005d80:	2300      	movs	r3, #0
 8005d82:	220a      	movs	r2, #10
 8005d84:	4658      	mov	r0, fp
 8005d86:	f000 f967 	bl	8006058 <__multadd>
 8005d8a:	4681      	mov	r9, r0
 8005d8c:	e7ea      	b.n	8005d64 <_dtoa_r+0xb5c>
 8005d8e:	bf00      	nop
 8005d90:	08007296 	.word	0x08007296
 8005d94:	0800721a 	.word	0x0800721a

08005d98 <_free_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d040      	beq.n	8005e22 <_free_r+0x8a>
 8005da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da4:	1f0c      	subs	r4, r1, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bfb8      	it	lt
 8005daa:	18e4      	addlt	r4, r4, r3
 8005dac:	f000 f8e6 	bl	8005f7c <__malloc_lock>
 8005db0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <_free_r+0x8c>)
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	b933      	cbnz	r3, 8005dc4 <_free_r+0x2c>
 8005db6:	6063      	str	r3, [r4, #4]
 8005db8:	6014      	str	r4, [r2, #0]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dc0:	f000 b8e2 	b.w	8005f88 <__malloc_unlock>
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d908      	bls.n	8005dda <_free_r+0x42>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	1821      	adds	r1, r4, r0
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	bf01      	itttt	eq
 8005dd0:	6819      	ldreq	r1, [r3, #0]
 8005dd2:	685b      	ldreq	r3, [r3, #4]
 8005dd4:	1809      	addeq	r1, r1, r0
 8005dd6:	6021      	streq	r1, [r4, #0]
 8005dd8:	e7ed      	b.n	8005db6 <_free_r+0x1e>
 8005dda:	461a      	mov	r2, r3
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b10b      	cbz	r3, 8005de4 <_free_r+0x4c>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d9fa      	bls.n	8005dda <_free_r+0x42>
 8005de4:	6811      	ldr	r1, [r2, #0]
 8005de6:	1850      	adds	r0, r2, r1
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	d10b      	bne.n	8005e04 <_free_r+0x6c>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	4401      	add	r1, r0
 8005df0:	1850      	adds	r0, r2, r1
 8005df2:	4283      	cmp	r3, r0
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	d1e0      	bne.n	8005dba <_free_r+0x22>
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4408      	add	r0, r1
 8005dfe:	6010      	str	r0, [r2, #0]
 8005e00:	6053      	str	r3, [r2, #4]
 8005e02:	e7da      	b.n	8005dba <_free_r+0x22>
 8005e04:	d902      	bls.n	8005e0c <_free_r+0x74>
 8005e06:	230c      	movs	r3, #12
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	e7d6      	b.n	8005dba <_free_r+0x22>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	1821      	adds	r1, r4, r0
 8005e10:	428b      	cmp	r3, r1
 8005e12:	bf01      	itttt	eq
 8005e14:	6819      	ldreq	r1, [r3, #0]
 8005e16:	685b      	ldreq	r3, [r3, #4]
 8005e18:	1809      	addeq	r1, r1, r0
 8005e1a:	6021      	streq	r1, [r4, #0]
 8005e1c:	6063      	str	r3, [r4, #4]
 8005e1e:	6054      	str	r4, [r2, #4]
 8005e20:	e7cb      	b.n	8005dba <_free_r+0x22>
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000428 	.word	0x20000428

08005e28 <malloc>:
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <malloc+0xc>)
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	f000 b825 	b.w	8005e7c <_malloc_r>
 8005e32:	bf00      	nop
 8005e34:	20000018 	.word	0x20000018

08005e38 <sbrk_aligned>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e78 <sbrk_aligned+0x40>)
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	6831      	ldr	r1, [r6, #0]
 8005e40:	4605      	mov	r5, r0
 8005e42:	b911      	cbnz	r1, 8005e4a <sbrk_aligned+0x12>
 8005e44:	f000 fe40 	bl	8006ac8 <_sbrk_r>
 8005e48:	6030      	str	r0, [r6, #0]
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 fe3b 	bl	8006ac8 <_sbrk_r>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d103      	bne.n	8005e5e <sbrk_aligned+0x26>
 8005e56:	f04f 34ff 	mov.w	r4, #4294967295
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
 8005e5e:	1cc4      	adds	r4, r0, #3
 8005e60:	f024 0403 	bic.w	r4, r4, #3
 8005e64:	42a0      	cmp	r0, r4
 8005e66:	d0f8      	beq.n	8005e5a <sbrk_aligned+0x22>
 8005e68:	1a21      	subs	r1, r4, r0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fe2c 	bl	8006ac8 <_sbrk_r>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d1f2      	bne.n	8005e5a <sbrk_aligned+0x22>
 8005e74:	e7ef      	b.n	8005e56 <sbrk_aligned+0x1e>
 8005e76:	bf00      	nop
 8005e78:	20000424 	.word	0x20000424

08005e7c <_malloc_r>:
 8005e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e80:	1ccd      	adds	r5, r1, #3
 8005e82:	f025 0503 	bic.w	r5, r5, #3
 8005e86:	3508      	adds	r5, #8
 8005e88:	2d0c      	cmp	r5, #12
 8005e8a:	bf38      	it	cc
 8005e8c:	250c      	movcc	r5, #12
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	4606      	mov	r6, r0
 8005e92:	db01      	blt.n	8005e98 <_malloc_r+0x1c>
 8005e94:	42a9      	cmp	r1, r5
 8005e96:	d904      	bls.n	8005ea2 <_malloc_r+0x26>
 8005e98:	230c      	movs	r3, #12
 8005e9a:	6033      	str	r3, [r6, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f78 <_malloc_r+0xfc>
 8005ea6:	f000 f869 	bl	8005f7c <__malloc_lock>
 8005eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8005eae:	461c      	mov	r4, r3
 8005eb0:	bb44      	cbnz	r4, 8005f04 <_malloc_r+0x88>
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff ffbf 	bl	8005e38 <sbrk_aligned>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	d158      	bne.n	8005f72 <_malloc_r+0xf6>
 8005ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ec4:	4627      	mov	r7, r4
 8005ec6:	2f00      	cmp	r7, #0
 8005ec8:	d143      	bne.n	8005f52 <_malloc_r+0xd6>
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	d04b      	beq.n	8005f66 <_malloc_r+0xea>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	eb04 0903 	add.w	r9, r4, r3
 8005ed8:	f000 fdf6 	bl	8006ac8 <_sbrk_r>
 8005edc:	4581      	cmp	r9, r0
 8005ede:	d142      	bne.n	8005f66 <_malloc_r+0xea>
 8005ee0:	6821      	ldr	r1, [r4, #0]
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	1a6d      	subs	r5, r5, r1
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	f7ff ffa6 	bl	8005e38 <sbrk_aligned>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d03a      	beq.n	8005f66 <_malloc_r+0xea>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	442b      	add	r3, r5
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	bb62      	cbnz	r2, 8005f58 <_malloc_r+0xdc>
 8005efe:	f8c8 7000 	str.w	r7, [r8]
 8005f02:	e00f      	b.n	8005f24 <_malloc_r+0xa8>
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	1b52      	subs	r2, r2, r5
 8005f08:	d420      	bmi.n	8005f4c <_malloc_r+0xd0>
 8005f0a:	2a0b      	cmp	r2, #11
 8005f0c:	d917      	bls.n	8005f3e <_malloc_r+0xc2>
 8005f0e:	1961      	adds	r1, r4, r5
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	6025      	str	r5, [r4, #0]
 8005f14:	bf18      	it	ne
 8005f16:	6059      	strne	r1, [r3, #4]
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	bf08      	it	eq
 8005f1c:	f8c8 1000 	streq.w	r1, [r8]
 8005f20:	5162      	str	r2, [r4, r5]
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f82f 	bl	8005f88 <__malloc_unlock>
 8005f2a:	f104 000b 	add.w	r0, r4, #11
 8005f2e:	1d23      	adds	r3, r4, #4
 8005f30:	f020 0007 	bic.w	r0, r0, #7
 8005f34:	1ac2      	subs	r2, r0, r3
 8005f36:	bf1c      	itt	ne
 8005f38:	1a1b      	subne	r3, r3, r0
 8005f3a:	50a3      	strne	r3, [r4, r2]
 8005f3c:	e7af      	b.n	8005e9e <_malloc_r+0x22>
 8005f3e:	6862      	ldr	r2, [r4, #4]
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	bf0c      	ite	eq
 8005f44:	f8c8 2000 	streq.w	r2, [r8]
 8005f48:	605a      	strne	r2, [r3, #4]
 8005f4a:	e7eb      	b.n	8005f24 <_malloc_r+0xa8>
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	6864      	ldr	r4, [r4, #4]
 8005f50:	e7ae      	b.n	8005eb0 <_malloc_r+0x34>
 8005f52:	463c      	mov	r4, r7
 8005f54:	687f      	ldr	r7, [r7, #4]
 8005f56:	e7b6      	b.n	8005ec6 <_malloc_r+0x4a>
 8005f58:	461a      	mov	r2, r3
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	d1fb      	bne.n	8005f58 <_malloc_r+0xdc>
 8005f60:	2300      	movs	r3, #0
 8005f62:	6053      	str	r3, [r2, #4]
 8005f64:	e7de      	b.n	8005f24 <_malloc_r+0xa8>
 8005f66:	230c      	movs	r3, #12
 8005f68:	4630      	mov	r0, r6
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	f000 f80c 	bl	8005f88 <__malloc_unlock>
 8005f70:	e794      	b.n	8005e9c <_malloc_r+0x20>
 8005f72:	6005      	str	r5, [r0, #0]
 8005f74:	e7d6      	b.n	8005f24 <_malloc_r+0xa8>
 8005f76:	bf00      	nop
 8005f78:	20000428 	.word	0x20000428

08005f7c <__malloc_lock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	@ (8005f84 <__malloc_lock+0x8>)
 8005f7e:	f7ff b8a8 	b.w	80050d2 <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000420 	.word	0x20000420

08005f88 <__malloc_unlock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <__malloc_unlock+0x8>)
 8005f8a:	f7ff b8a3 	b.w	80050d4 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000420 	.word	0x20000420

08005f94 <_Balloc>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	69c6      	ldr	r6, [r0, #28]
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	b976      	cbnz	r6, 8005fbc <_Balloc+0x28>
 8005f9e:	2010      	movs	r0, #16
 8005fa0:	f7ff ff42 	bl	8005e28 <malloc>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	61e0      	str	r0, [r4, #28]
 8005fa8:	b920      	cbnz	r0, 8005fb4 <_Balloc+0x20>
 8005faa:	216b      	movs	r1, #107	@ 0x6b
 8005fac:	4b17      	ldr	r3, [pc, #92]	@ (800600c <_Balloc+0x78>)
 8005fae:	4818      	ldr	r0, [pc, #96]	@ (8006010 <_Balloc+0x7c>)
 8005fb0:	f000 fda8 	bl	8006b04 <__assert_func>
 8005fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fb8:	6006      	str	r6, [r0, #0]
 8005fba:	60c6      	str	r6, [r0, #12]
 8005fbc:	69e6      	ldr	r6, [r4, #28]
 8005fbe:	68f3      	ldr	r3, [r6, #12]
 8005fc0:	b183      	cbz	r3, 8005fe4 <_Balloc+0x50>
 8005fc2:	69e3      	ldr	r3, [r4, #28]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fca:	b9b8      	cbnz	r0, 8005ffc <_Balloc+0x68>
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f605 	lsl.w	r6, r1, r5
 8005fd2:	1d72      	adds	r2, r6, #5
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	f000 fdb2 	bl	8006b40 <_calloc_r>
 8005fdc:	b160      	cbz	r0, 8005ff8 <_Balloc+0x64>
 8005fde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fe2:	e00e      	b.n	8006002 <_Balloc+0x6e>
 8005fe4:	2221      	movs	r2, #33	@ 0x21
 8005fe6:	2104      	movs	r1, #4
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fda9 	bl	8006b40 <_calloc_r>
 8005fee:	69e3      	ldr	r3, [r4, #28]
 8005ff0:	60f0      	str	r0, [r6, #12]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e4      	bne.n	8005fc2 <_Balloc+0x2e>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	6802      	ldr	r2, [r0, #0]
 8005ffe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006002:	2300      	movs	r3, #0
 8006004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006008:	e7f7      	b.n	8005ffa <_Balloc+0x66>
 800600a:	bf00      	nop
 800600c:	08007227 	.word	0x08007227
 8006010:	080072a7 	.word	0x080072a7

08006014 <_Bfree>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	69c6      	ldr	r6, [r0, #28]
 8006018:	4605      	mov	r5, r0
 800601a:	460c      	mov	r4, r1
 800601c:	b976      	cbnz	r6, 800603c <_Bfree+0x28>
 800601e:	2010      	movs	r0, #16
 8006020:	f7ff ff02 	bl	8005e28 <malloc>
 8006024:	4602      	mov	r2, r0
 8006026:	61e8      	str	r0, [r5, #28]
 8006028:	b920      	cbnz	r0, 8006034 <_Bfree+0x20>
 800602a:	218f      	movs	r1, #143	@ 0x8f
 800602c:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <_Bfree+0x3c>)
 800602e:	4809      	ldr	r0, [pc, #36]	@ (8006054 <_Bfree+0x40>)
 8006030:	f000 fd68 	bl	8006b04 <__assert_func>
 8006034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006038:	6006      	str	r6, [r0, #0]
 800603a:	60c6      	str	r6, [r0, #12]
 800603c:	b13c      	cbz	r4, 800604e <_Bfree+0x3a>
 800603e:	69eb      	ldr	r3, [r5, #28]
 8006040:	6862      	ldr	r2, [r4, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006048:	6021      	str	r1, [r4, #0]
 800604a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	08007227 	.word	0x08007227
 8006054:	080072a7 	.word	0x080072a7

08006058 <__multadd>:
 8006058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605c:	4607      	mov	r7, r0
 800605e:	460c      	mov	r4, r1
 8006060:	461e      	mov	r6, r3
 8006062:	2000      	movs	r0, #0
 8006064:	690d      	ldr	r5, [r1, #16]
 8006066:	f101 0c14 	add.w	ip, r1, #20
 800606a:	f8dc 3000 	ldr.w	r3, [ip]
 800606e:	3001      	adds	r0, #1
 8006070:	b299      	uxth	r1, r3
 8006072:	fb02 6101 	mla	r1, r2, r1, r6
 8006076:	0c1e      	lsrs	r6, r3, #16
 8006078:	0c0b      	lsrs	r3, r1, #16
 800607a:	fb02 3306 	mla	r3, r2, r6, r3
 800607e:	b289      	uxth	r1, r1
 8006080:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006084:	4285      	cmp	r5, r0
 8006086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800608a:	f84c 1b04 	str.w	r1, [ip], #4
 800608e:	dcec      	bgt.n	800606a <__multadd+0x12>
 8006090:	b30e      	cbz	r6, 80060d6 <__multadd+0x7e>
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc19      	bgt.n	80060cc <__multadd+0x74>
 8006098:	6861      	ldr	r1, [r4, #4]
 800609a:	4638      	mov	r0, r7
 800609c:	3101      	adds	r1, #1
 800609e:	f7ff ff79 	bl	8005f94 <_Balloc>
 80060a2:	4680      	mov	r8, r0
 80060a4:	b928      	cbnz	r0, 80060b2 <__multadd+0x5a>
 80060a6:	4602      	mov	r2, r0
 80060a8:	21ba      	movs	r1, #186	@ 0xba
 80060aa:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <__multadd+0x84>)
 80060ac:	480c      	ldr	r0, [pc, #48]	@ (80060e0 <__multadd+0x88>)
 80060ae:	f000 fd29 	bl	8006b04 <__assert_func>
 80060b2:	6922      	ldr	r2, [r4, #16]
 80060b4:	f104 010c 	add.w	r1, r4, #12
 80060b8:	3202      	adds	r2, #2
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	300c      	adds	r0, #12
 80060be:	f000 fd13 	bl	8006ae8 <memcpy>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4638      	mov	r0, r7
 80060c6:	f7ff ffa5 	bl	8006014 <_Bfree>
 80060ca:	4644      	mov	r4, r8
 80060cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060d0:	3501      	adds	r5, #1
 80060d2:	615e      	str	r6, [r3, #20]
 80060d4:	6125      	str	r5, [r4, #16]
 80060d6:	4620      	mov	r0, r4
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	08007296 	.word	0x08007296
 80060e0:	080072a7 	.word	0x080072a7

080060e4 <__hi0bits>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060ea:	bf3a      	itte	cc
 80060ec:	0403      	lslcc	r3, r0, #16
 80060ee:	2010      	movcc	r0, #16
 80060f0:	2000      	movcs	r0, #0
 80060f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060f6:	bf3c      	itt	cc
 80060f8:	021b      	lslcc	r3, r3, #8
 80060fa:	3008      	addcc	r0, #8
 80060fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006100:	bf3c      	itt	cc
 8006102:	011b      	lslcc	r3, r3, #4
 8006104:	3004      	addcc	r0, #4
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610a:	bf3c      	itt	cc
 800610c:	009b      	lslcc	r3, r3, #2
 800610e:	3002      	addcc	r0, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	db05      	blt.n	8006120 <__hi0bits+0x3c>
 8006114:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006118:	f100 0001 	add.w	r0, r0, #1
 800611c:	bf08      	it	eq
 800611e:	2020      	moveq	r0, #32
 8006120:	4770      	bx	lr

08006122 <__lo0bits>:
 8006122:	6803      	ldr	r3, [r0, #0]
 8006124:	4602      	mov	r2, r0
 8006126:	f013 0007 	ands.w	r0, r3, #7
 800612a:	d00b      	beq.n	8006144 <__lo0bits+0x22>
 800612c:	07d9      	lsls	r1, r3, #31
 800612e:	d421      	bmi.n	8006174 <__lo0bits+0x52>
 8006130:	0798      	lsls	r0, r3, #30
 8006132:	bf49      	itett	mi
 8006134:	085b      	lsrmi	r3, r3, #1
 8006136:	089b      	lsrpl	r3, r3, #2
 8006138:	2001      	movmi	r0, #1
 800613a:	6013      	strmi	r3, [r2, #0]
 800613c:	bf5c      	itt	pl
 800613e:	2002      	movpl	r0, #2
 8006140:	6013      	strpl	r3, [r2, #0]
 8006142:	4770      	bx	lr
 8006144:	b299      	uxth	r1, r3
 8006146:	b909      	cbnz	r1, 800614c <__lo0bits+0x2a>
 8006148:	2010      	movs	r0, #16
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	b2d9      	uxtb	r1, r3
 800614e:	b909      	cbnz	r1, 8006154 <__lo0bits+0x32>
 8006150:	3008      	adds	r0, #8
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	0719      	lsls	r1, r3, #28
 8006156:	bf04      	itt	eq
 8006158:	091b      	lsreq	r3, r3, #4
 800615a:	3004      	addeq	r0, #4
 800615c:	0799      	lsls	r1, r3, #30
 800615e:	bf04      	itt	eq
 8006160:	089b      	lsreq	r3, r3, #2
 8006162:	3002      	addeq	r0, #2
 8006164:	07d9      	lsls	r1, r3, #31
 8006166:	d403      	bmi.n	8006170 <__lo0bits+0x4e>
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	f100 0001 	add.w	r0, r0, #1
 800616e:	d003      	beq.n	8006178 <__lo0bits+0x56>
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	4770      	bx	lr
 8006174:	2000      	movs	r0, #0
 8006176:	4770      	bx	lr
 8006178:	2020      	movs	r0, #32
 800617a:	4770      	bx	lr

0800617c <__i2b>:
 800617c:	b510      	push	{r4, lr}
 800617e:	460c      	mov	r4, r1
 8006180:	2101      	movs	r1, #1
 8006182:	f7ff ff07 	bl	8005f94 <_Balloc>
 8006186:	4602      	mov	r2, r0
 8006188:	b928      	cbnz	r0, 8006196 <__i2b+0x1a>
 800618a:	f240 1145 	movw	r1, #325	@ 0x145
 800618e:	4b04      	ldr	r3, [pc, #16]	@ (80061a0 <__i2b+0x24>)
 8006190:	4804      	ldr	r0, [pc, #16]	@ (80061a4 <__i2b+0x28>)
 8006192:	f000 fcb7 	bl	8006b04 <__assert_func>
 8006196:	2301      	movs	r3, #1
 8006198:	6144      	str	r4, [r0, #20]
 800619a:	6103      	str	r3, [r0, #16]
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop
 80061a0:	08007296 	.word	0x08007296
 80061a4:	080072a7 	.word	0x080072a7

080061a8 <__multiply>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	4614      	mov	r4, r2
 80061ae:	690a      	ldr	r2, [r1, #16]
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	460f      	mov	r7, r1
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bfa2      	ittt	ge
 80061b8:	4623      	movge	r3, r4
 80061ba:	460c      	movge	r4, r1
 80061bc:	461f      	movge	r7, r3
 80061be:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80061c2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	6861      	ldr	r1, [r4, #4]
 80061ca:	eb0a 0609 	add.w	r6, sl, r9
 80061ce:	42b3      	cmp	r3, r6
 80061d0:	b085      	sub	sp, #20
 80061d2:	bfb8      	it	lt
 80061d4:	3101      	addlt	r1, #1
 80061d6:	f7ff fedd 	bl	8005f94 <_Balloc>
 80061da:	b930      	cbnz	r0, 80061ea <__multiply+0x42>
 80061dc:	4602      	mov	r2, r0
 80061de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061e2:	4b43      	ldr	r3, [pc, #268]	@ (80062f0 <__multiply+0x148>)
 80061e4:	4843      	ldr	r0, [pc, #268]	@ (80062f4 <__multiply+0x14c>)
 80061e6:	f000 fc8d 	bl	8006b04 <__assert_func>
 80061ea:	f100 0514 	add.w	r5, r0, #20
 80061ee:	462b      	mov	r3, r5
 80061f0:	2200      	movs	r2, #0
 80061f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061f6:	4543      	cmp	r3, r8
 80061f8:	d321      	bcc.n	800623e <__multiply+0x96>
 80061fa:	f107 0114 	add.w	r1, r7, #20
 80061fe:	f104 0214 	add.w	r2, r4, #20
 8006202:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006206:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	1b13      	subs	r3, r2, r4
 800620e:	3b15      	subs	r3, #21
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	3304      	adds	r3, #4
 8006216:	f104 0715 	add.w	r7, r4, #21
 800621a:	42ba      	cmp	r2, r7
 800621c:	bf38      	it	cc
 800621e:	2304      	movcc	r3, #4
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	9b02      	ldr	r3, [sp, #8]
 8006224:	9103      	str	r1, [sp, #12]
 8006226:	428b      	cmp	r3, r1
 8006228:	d80c      	bhi.n	8006244 <__multiply+0x9c>
 800622a:	2e00      	cmp	r6, #0
 800622c:	dd03      	ble.n	8006236 <__multiply+0x8e>
 800622e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006232:	2b00      	cmp	r3, #0
 8006234:	d05a      	beq.n	80062ec <__multiply+0x144>
 8006236:	6106      	str	r6, [r0, #16]
 8006238:	b005      	add	sp, #20
 800623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623e:	f843 2b04 	str.w	r2, [r3], #4
 8006242:	e7d8      	b.n	80061f6 <__multiply+0x4e>
 8006244:	f8b1 a000 	ldrh.w	sl, [r1]
 8006248:	f1ba 0f00 	cmp.w	sl, #0
 800624c:	d023      	beq.n	8006296 <__multiply+0xee>
 800624e:	46a9      	mov	r9, r5
 8006250:	f04f 0c00 	mov.w	ip, #0
 8006254:	f104 0e14 	add.w	lr, r4, #20
 8006258:	f85e 7b04 	ldr.w	r7, [lr], #4
 800625c:	f8d9 3000 	ldr.w	r3, [r9]
 8006260:	fa1f fb87 	uxth.w	fp, r7
 8006264:	b29b      	uxth	r3, r3
 8006266:	fb0a 330b 	mla	r3, sl, fp, r3
 800626a:	4463      	add	r3, ip
 800626c:	f8d9 c000 	ldr.w	ip, [r9]
 8006270:	0c3f      	lsrs	r7, r7, #16
 8006272:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006276:	fb0a c707 	mla	r7, sl, r7, ip
 800627a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006284:	4572      	cmp	r2, lr
 8006286:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800628a:	f849 3b04 	str.w	r3, [r9], #4
 800628e:	d8e3      	bhi.n	8006258 <__multiply+0xb0>
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	f845 c003 	str.w	ip, [r5, r3]
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	3104      	adds	r1, #4
 800629a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800629e:	f1b9 0f00 	cmp.w	r9, #0
 80062a2:	d021      	beq.n	80062e8 <__multiply+0x140>
 80062a4:	46ae      	mov	lr, r5
 80062a6:	f04f 0a00 	mov.w	sl, #0
 80062aa:	682b      	ldr	r3, [r5, #0]
 80062ac:	f104 0c14 	add.w	ip, r4, #20
 80062b0:	f8bc b000 	ldrh.w	fp, [ip]
 80062b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	fb09 770b 	mla	r7, r9, fp, r7
 80062be:	4457      	add	r7, sl
 80062c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80062c4:	f84e 3b04 	str.w	r3, [lr], #4
 80062c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062d0:	f8be 3000 	ldrh.w	r3, [lr]
 80062d4:	4562      	cmp	r2, ip
 80062d6:	fb09 330a 	mla	r3, r9, sl, r3
 80062da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80062de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062e2:	d8e5      	bhi.n	80062b0 <__multiply+0x108>
 80062e4:	9f01      	ldr	r7, [sp, #4]
 80062e6:	51eb      	str	r3, [r5, r7]
 80062e8:	3504      	adds	r5, #4
 80062ea:	e79a      	b.n	8006222 <__multiply+0x7a>
 80062ec:	3e01      	subs	r6, #1
 80062ee:	e79c      	b.n	800622a <__multiply+0x82>
 80062f0:	08007296 	.word	0x08007296
 80062f4:	080072a7 	.word	0x080072a7

080062f8 <__pow5mult>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	4615      	mov	r5, r2
 80062fe:	f012 0203 	ands.w	r2, r2, #3
 8006302:	4607      	mov	r7, r0
 8006304:	460e      	mov	r6, r1
 8006306:	d007      	beq.n	8006318 <__pow5mult+0x20>
 8006308:	4c25      	ldr	r4, [pc, #148]	@ (80063a0 <__pow5mult+0xa8>)
 800630a:	3a01      	subs	r2, #1
 800630c:	2300      	movs	r3, #0
 800630e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006312:	f7ff fea1 	bl	8006058 <__multadd>
 8006316:	4606      	mov	r6, r0
 8006318:	10ad      	asrs	r5, r5, #2
 800631a:	d03d      	beq.n	8006398 <__pow5mult+0xa0>
 800631c:	69fc      	ldr	r4, [r7, #28]
 800631e:	b97c      	cbnz	r4, 8006340 <__pow5mult+0x48>
 8006320:	2010      	movs	r0, #16
 8006322:	f7ff fd81 	bl	8005e28 <malloc>
 8006326:	4602      	mov	r2, r0
 8006328:	61f8      	str	r0, [r7, #28]
 800632a:	b928      	cbnz	r0, 8006338 <__pow5mult+0x40>
 800632c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006330:	4b1c      	ldr	r3, [pc, #112]	@ (80063a4 <__pow5mult+0xac>)
 8006332:	481d      	ldr	r0, [pc, #116]	@ (80063a8 <__pow5mult+0xb0>)
 8006334:	f000 fbe6 	bl	8006b04 <__assert_func>
 8006338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800633c:	6004      	str	r4, [r0, #0]
 800633e:	60c4      	str	r4, [r0, #12]
 8006340:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006348:	b94c      	cbnz	r4, 800635e <__pow5mult+0x66>
 800634a:	f240 2171 	movw	r1, #625	@ 0x271
 800634e:	4638      	mov	r0, r7
 8006350:	f7ff ff14 	bl	800617c <__i2b>
 8006354:	2300      	movs	r3, #0
 8006356:	4604      	mov	r4, r0
 8006358:	f8c8 0008 	str.w	r0, [r8, #8]
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	f04f 0900 	mov.w	r9, #0
 8006362:	07eb      	lsls	r3, r5, #31
 8006364:	d50a      	bpl.n	800637c <__pow5mult+0x84>
 8006366:	4631      	mov	r1, r6
 8006368:	4622      	mov	r2, r4
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff ff1c 	bl	80061a8 <__multiply>
 8006370:	4680      	mov	r8, r0
 8006372:	4631      	mov	r1, r6
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fe4d 	bl	8006014 <_Bfree>
 800637a:	4646      	mov	r6, r8
 800637c:	106d      	asrs	r5, r5, #1
 800637e:	d00b      	beq.n	8006398 <__pow5mult+0xa0>
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	b938      	cbnz	r0, 8006394 <__pow5mult+0x9c>
 8006384:	4622      	mov	r2, r4
 8006386:	4621      	mov	r1, r4
 8006388:	4638      	mov	r0, r7
 800638a:	f7ff ff0d 	bl	80061a8 <__multiply>
 800638e:	6020      	str	r0, [r4, #0]
 8006390:	f8c0 9000 	str.w	r9, [r0]
 8006394:	4604      	mov	r4, r0
 8006396:	e7e4      	b.n	8006362 <__pow5mult+0x6a>
 8006398:	4630      	mov	r0, r6
 800639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800639e:	bf00      	nop
 80063a0:	08007300 	.word	0x08007300
 80063a4:	08007227 	.word	0x08007227
 80063a8:	080072a7 	.word	0x080072a7

080063ac <__lshift>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	460c      	mov	r4, r1
 80063b2:	4607      	mov	r7, r0
 80063b4:	4691      	mov	r9, r2
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	6849      	ldr	r1, [r1, #4]
 80063ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063c4:	f108 0601 	add.w	r6, r8, #1
 80063c8:	42b3      	cmp	r3, r6
 80063ca:	db0b      	blt.n	80063e4 <__lshift+0x38>
 80063cc:	4638      	mov	r0, r7
 80063ce:	f7ff fde1 	bl	8005f94 <_Balloc>
 80063d2:	4605      	mov	r5, r0
 80063d4:	b948      	cbnz	r0, 80063ea <__lshift+0x3e>
 80063d6:	4602      	mov	r2, r0
 80063d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063dc:	4b27      	ldr	r3, [pc, #156]	@ (800647c <__lshift+0xd0>)
 80063de:	4828      	ldr	r0, [pc, #160]	@ (8006480 <__lshift+0xd4>)
 80063e0:	f000 fb90 	bl	8006b04 <__assert_func>
 80063e4:	3101      	adds	r1, #1
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	e7ee      	b.n	80063c8 <__lshift+0x1c>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f100 0114 	add.w	r1, r0, #20
 80063f0:	f100 0210 	add.w	r2, r0, #16
 80063f4:	4618      	mov	r0, r3
 80063f6:	4553      	cmp	r3, sl
 80063f8:	db33      	blt.n	8006462 <__lshift+0xb6>
 80063fa:	6920      	ldr	r0, [r4, #16]
 80063fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006400:	f104 0314 	add.w	r3, r4, #20
 8006404:	f019 091f 	ands.w	r9, r9, #31
 8006408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800640c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006410:	d02b      	beq.n	800646a <__lshift+0xbe>
 8006412:	468a      	mov	sl, r1
 8006414:	2200      	movs	r2, #0
 8006416:	f1c9 0e20 	rsb	lr, r9, #32
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	fa00 f009 	lsl.w	r0, r0, r9
 8006420:	4310      	orrs	r0, r2
 8006422:	f84a 0b04 	str.w	r0, [sl], #4
 8006426:	f853 2b04 	ldr.w	r2, [r3], #4
 800642a:	459c      	cmp	ip, r3
 800642c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006430:	d8f3      	bhi.n	800641a <__lshift+0x6e>
 8006432:	ebac 0304 	sub.w	r3, ip, r4
 8006436:	3b15      	subs	r3, #21
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	3304      	adds	r3, #4
 800643e:	f104 0015 	add.w	r0, r4, #21
 8006442:	4584      	cmp	ip, r0
 8006444:	bf38      	it	cc
 8006446:	2304      	movcc	r3, #4
 8006448:	50ca      	str	r2, [r1, r3]
 800644a:	b10a      	cbz	r2, 8006450 <__lshift+0xa4>
 800644c:	f108 0602 	add.w	r6, r8, #2
 8006450:	3e01      	subs	r6, #1
 8006452:	4638      	mov	r0, r7
 8006454:	4621      	mov	r1, r4
 8006456:	612e      	str	r6, [r5, #16]
 8006458:	f7ff fddc 	bl	8006014 <_Bfree>
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006462:	f842 0f04 	str.w	r0, [r2, #4]!
 8006466:	3301      	adds	r3, #1
 8006468:	e7c5      	b.n	80063f6 <__lshift+0x4a>
 800646a:	3904      	subs	r1, #4
 800646c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006470:	459c      	cmp	ip, r3
 8006472:	f841 2f04 	str.w	r2, [r1, #4]!
 8006476:	d8f9      	bhi.n	800646c <__lshift+0xc0>
 8006478:	e7ea      	b.n	8006450 <__lshift+0xa4>
 800647a:	bf00      	nop
 800647c:	08007296 	.word	0x08007296
 8006480:	080072a7 	.word	0x080072a7

08006484 <__mcmp>:
 8006484:	4603      	mov	r3, r0
 8006486:	690a      	ldr	r2, [r1, #16]
 8006488:	6900      	ldr	r0, [r0, #16]
 800648a:	b530      	push	{r4, r5, lr}
 800648c:	1a80      	subs	r0, r0, r2
 800648e:	d10e      	bne.n	80064ae <__mcmp+0x2a>
 8006490:	3314      	adds	r3, #20
 8006492:	3114      	adds	r1, #20
 8006494:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006498:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800649c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064a4:	4295      	cmp	r5, r2
 80064a6:	d003      	beq.n	80064b0 <__mcmp+0x2c>
 80064a8:	d205      	bcs.n	80064b6 <__mcmp+0x32>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	bd30      	pop	{r4, r5, pc}
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	d3f3      	bcc.n	800649c <__mcmp+0x18>
 80064b4:	e7fb      	b.n	80064ae <__mcmp+0x2a>
 80064b6:	2001      	movs	r0, #1
 80064b8:	e7f9      	b.n	80064ae <__mcmp+0x2a>
	...

080064bc <__mdiff>:
 80064bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	4689      	mov	r9, r1
 80064c2:	4606      	mov	r6, r0
 80064c4:	4611      	mov	r1, r2
 80064c6:	4648      	mov	r0, r9
 80064c8:	4614      	mov	r4, r2
 80064ca:	f7ff ffdb 	bl	8006484 <__mcmp>
 80064ce:	1e05      	subs	r5, r0, #0
 80064d0:	d112      	bne.n	80064f8 <__mdiff+0x3c>
 80064d2:	4629      	mov	r1, r5
 80064d4:	4630      	mov	r0, r6
 80064d6:	f7ff fd5d 	bl	8005f94 <_Balloc>
 80064da:	4602      	mov	r2, r0
 80064dc:	b928      	cbnz	r0, 80064ea <__mdiff+0x2e>
 80064de:	f240 2137 	movw	r1, #567	@ 0x237
 80064e2:	4b3e      	ldr	r3, [pc, #248]	@ (80065dc <__mdiff+0x120>)
 80064e4:	483e      	ldr	r0, [pc, #248]	@ (80065e0 <__mdiff+0x124>)
 80064e6:	f000 fb0d 	bl	8006b04 <__assert_func>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064f0:	4610      	mov	r0, r2
 80064f2:	b003      	add	sp, #12
 80064f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f8:	bfbc      	itt	lt
 80064fa:	464b      	movlt	r3, r9
 80064fc:	46a1      	movlt	r9, r4
 80064fe:	4630      	mov	r0, r6
 8006500:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006504:	bfba      	itte	lt
 8006506:	461c      	movlt	r4, r3
 8006508:	2501      	movlt	r5, #1
 800650a:	2500      	movge	r5, #0
 800650c:	f7ff fd42 	bl	8005f94 <_Balloc>
 8006510:	4602      	mov	r2, r0
 8006512:	b918      	cbnz	r0, 800651c <__mdiff+0x60>
 8006514:	f240 2145 	movw	r1, #581	@ 0x245
 8006518:	4b30      	ldr	r3, [pc, #192]	@ (80065dc <__mdiff+0x120>)
 800651a:	e7e3      	b.n	80064e4 <__mdiff+0x28>
 800651c:	f100 0b14 	add.w	fp, r0, #20
 8006520:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006524:	f109 0310 	add.w	r3, r9, #16
 8006528:	60c5      	str	r5, [r0, #12]
 800652a:	f04f 0c00 	mov.w	ip, #0
 800652e:	f109 0514 	add.w	r5, r9, #20
 8006532:	46d9      	mov	r9, fp
 8006534:	6926      	ldr	r6, [r4, #16]
 8006536:	f104 0e14 	add.w	lr, r4, #20
 800653a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800653e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	f85e 0b04 	ldr.w	r0, [lr], #4
 800654a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800654e:	b281      	uxth	r1, r0
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	fa1f f38a 	uxth.w	r3, sl
 8006556:	1a5b      	subs	r3, r3, r1
 8006558:	0c00      	lsrs	r0, r0, #16
 800655a:	4463      	add	r3, ip
 800655c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006560:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006564:	b29b      	uxth	r3, r3
 8006566:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800656a:	4576      	cmp	r6, lr
 800656c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006570:	f849 3b04 	str.w	r3, [r9], #4
 8006574:	d8e6      	bhi.n	8006544 <__mdiff+0x88>
 8006576:	1b33      	subs	r3, r6, r4
 8006578:	3b15      	subs	r3, #21
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	3415      	adds	r4, #21
 8006580:	3304      	adds	r3, #4
 8006582:	42a6      	cmp	r6, r4
 8006584:	bf38      	it	cc
 8006586:	2304      	movcc	r3, #4
 8006588:	441d      	add	r5, r3
 800658a:	445b      	add	r3, fp
 800658c:	461e      	mov	r6, r3
 800658e:	462c      	mov	r4, r5
 8006590:	4544      	cmp	r4, r8
 8006592:	d30e      	bcc.n	80065b2 <__mdiff+0xf6>
 8006594:	f108 0103 	add.w	r1, r8, #3
 8006598:	1b49      	subs	r1, r1, r5
 800659a:	f021 0103 	bic.w	r1, r1, #3
 800659e:	3d03      	subs	r5, #3
 80065a0:	45a8      	cmp	r8, r5
 80065a2:	bf38      	it	cc
 80065a4:	2100      	movcc	r1, #0
 80065a6:	440b      	add	r3, r1
 80065a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065ac:	b199      	cbz	r1, 80065d6 <__mdiff+0x11a>
 80065ae:	6117      	str	r7, [r2, #16]
 80065b0:	e79e      	b.n	80064f0 <__mdiff+0x34>
 80065b2:	46e6      	mov	lr, ip
 80065b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80065b8:	fa1f fc81 	uxth.w	ip, r1
 80065bc:	44f4      	add	ip, lr
 80065be:	0c08      	lsrs	r0, r1, #16
 80065c0:	4471      	add	r1, lr
 80065c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80065c6:	b289      	uxth	r1, r1
 80065c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065d0:	f846 1b04 	str.w	r1, [r6], #4
 80065d4:	e7dc      	b.n	8006590 <__mdiff+0xd4>
 80065d6:	3f01      	subs	r7, #1
 80065d8:	e7e6      	b.n	80065a8 <__mdiff+0xec>
 80065da:	bf00      	nop
 80065dc:	08007296 	.word	0x08007296
 80065e0:	080072a7 	.word	0x080072a7

080065e4 <__d2b>:
 80065e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80065e8:	2101      	movs	r1, #1
 80065ea:	4690      	mov	r8, r2
 80065ec:	4699      	mov	r9, r3
 80065ee:	9e08      	ldr	r6, [sp, #32]
 80065f0:	f7ff fcd0 	bl	8005f94 <_Balloc>
 80065f4:	4604      	mov	r4, r0
 80065f6:	b930      	cbnz	r0, 8006606 <__d2b+0x22>
 80065f8:	4602      	mov	r2, r0
 80065fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80065fe:	4b23      	ldr	r3, [pc, #140]	@ (800668c <__d2b+0xa8>)
 8006600:	4823      	ldr	r0, [pc, #140]	@ (8006690 <__d2b+0xac>)
 8006602:	f000 fa7f 	bl	8006b04 <__assert_func>
 8006606:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800660a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800660e:	b10d      	cbz	r5, 8006614 <__d2b+0x30>
 8006610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	f1b8 0300 	subs.w	r3, r8, #0
 800661a:	d024      	beq.n	8006666 <__d2b+0x82>
 800661c:	4668      	mov	r0, sp
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	f7ff fd7f 	bl	8006122 <__lo0bits>
 8006624:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006628:	b1d8      	cbz	r0, 8006662 <__d2b+0x7e>
 800662a:	f1c0 0320 	rsb	r3, r0, #32
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	430b      	orrs	r3, r1
 8006634:	40c2      	lsrs	r2, r0
 8006636:	6163      	str	r3, [r4, #20]
 8006638:	9201      	str	r2, [sp, #4]
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf0c      	ite	eq
 8006640:	2201      	moveq	r2, #1
 8006642:	2202      	movne	r2, #2
 8006644:	61a3      	str	r3, [r4, #24]
 8006646:	6122      	str	r2, [r4, #16]
 8006648:	b1ad      	cbz	r5, 8006676 <__d2b+0x92>
 800664a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800664e:	4405      	add	r5, r0
 8006650:	6035      	str	r5, [r6, #0]
 8006652:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006658:	6018      	str	r0, [r3, #0]
 800665a:	4620      	mov	r0, r4
 800665c:	b002      	add	sp, #8
 800665e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006662:	6161      	str	r1, [r4, #20]
 8006664:	e7e9      	b.n	800663a <__d2b+0x56>
 8006666:	a801      	add	r0, sp, #4
 8006668:	f7ff fd5b 	bl	8006122 <__lo0bits>
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	6163      	str	r3, [r4, #20]
 8006672:	3020      	adds	r0, #32
 8006674:	e7e7      	b.n	8006646 <__d2b+0x62>
 8006676:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800667a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800667e:	6030      	str	r0, [r6, #0]
 8006680:	6918      	ldr	r0, [r3, #16]
 8006682:	f7ff fd2f 	bl	80060e4 <__hi0bits>
 8006686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800668a:	e7e4      	b.n	8006656 <__d2b+0x72>
 800668c:	08007296 	.word	0x08007296
 8006690:	080072a7 	.word	0x080072a7

08006694 <__ssputs_r>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	461f      	mov	r7, r3
 800669a:	688e      	ldr	r6, [r1, #8]
 800669c:	4682      	mov	sl, r0
 800669e:	42be      	cmp	r6, r7
 80066a0:	460c      	mov	r4, r1
 80066a2:	4690      	mov	r8, r2
 80066a4:	680b      	ldr	r3, [r1, #0]
 80066a6:	d82d      	bhi.n	8006704 <__ssputs_r+0x70>
 80066a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066b0:	d026      	beq.n	8006700 <__ssputs_r+0x6c>
 80066b2:	6965      	ldr	r5, [r4, #20]
 80066b4:	6909      	ldr	r1, [r1, #16]
 80066b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066ba:	eba3 0901 	sub.w	r9, r3, r1
 80066be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066c2:	1c7b      	adds	r3, r7, #1
 80066c4:	444b      	add	r3, r9
 80066c6:	106d      	asrs	r5, r5, #1
 80066c8:	429d      	cmp	r5, r3
 80066ca:	bf38      	it	cc
 80066cc:	461d      	movcc	r5, r3
 80066ce:	0553      	lsls	r3, r2, #21
 80066d0:	d527      	bpl.n	8006722 <__ssputs_r+0x8e>
 80066d2:	4629      	mov	r1, r5
 80066d4:	f7ff fbd2 	bl	8005e7c <_malloc_r>
 80066d8:	4606      	mov	r6, r0
 80066da:	b360      	cbz	r0, 8006736 <__ssputs_r+0xa2>
 80066dc:	464a      	mov	r2, r9
 80066de:	6921      	ldr	r1, [r4, #16]
 80066e0:	f000 fa02 	bl	8006ae8 <memcpy>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	6126      	str	r6, [r4, #16]
 80066f2:	444e      	add	r6, r9
 80066f4:	6026      	str	r6, [r4, #0]
 80066f6:	463e      	mov	r6, r7
 80066f8:	6165      	str	r5, [r4, #20]
 80066fa:	eba5 0509 	sub.w	r5, r5, r9
 80066fe:	60a5      	str	r5, [r4, #8]
 8006700:	42be      	cmp	r6, r7
 8006702:	d900      	bls.n	8006706 <__ssputs_r+0x72>
 8006704:	463e      	mov	r6, r7
 8006706:	4632      	mov	r2, r6
 8006708:	4641      	mov	r1, r8
 800670a:	6820      	ldr	r0, [r4, #0]
 800670c:	f000 f9c2 	bl	8006a94 <memmove>
 8006710:	2000      	movs	r0, #0
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	1b9b      	subs	r3, r3, r6
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	4433      	add	r3, r6
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006722:	462a      	mov	r2, r5
 8006724:	f000 fa32 	bl	8006b8c <_realloc_r>
 8006728:	4606      	mov	r6, r0
 800672a:	2800      	cmp	r0, #0
 800672c:	d1e0      	bne.n	80066f0 <__ssputs_r+0x5c>
 800672e:	4650      	mov	r0, sl
 8006730:	6921      	ldr	r1, [r4, #16]
 8006732:	f7ff fb31 	bl	8005d98 <_free_r>
 8006736:	230c      	movs	r3, #12
 8006738:	f8ca 3000 	str.w	r3, [sl]
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f04f 30ff 	mov.w	r0, #4294967295
 8006742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	e7e9      	b.n	800671e <__ssputs_r+0x8a>
	...

0800674c <_svfiprintf_r>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	4698      	mov	r8, r3
 8006752:	898b      	ldrh	r3, [r1, #12]
 8006754:	4607      	mov	r7, r0
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	460d      	mov	r5, r1
 800675a:	4614      	mov	r4, r2
 800675c:	b09d      	sub	sp, #116	@ 0x74
 800675e:	d510      	bpl.n	8006782 <_svfiprintf_r+0x36>
 8006760:	690b      	ldr	r3, [r1, #16]
 8006762:	b973      	cbnz	r3, 8006782 <_svfiprintf_r+0x36>
 8006764:	2140      	movs	r1, #64	@ 0x40
 8006766:	f7ff fb89 	bl	8005e7c <_malloc_r>
 800676a:	6028      	str	r0, [r5, #0]
 800676c:	6128      	str	r0, [r5, #16]
 800676e:	b930      	cbnz	r0, 800677e <_svfiprintf_r+0x32>
 8006770:	230c      	movs	r3, #12
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b01d      	add	sp, #116	@ 0x74
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	2340      	movs	r3, #64	@ 0x40
 8006780:	616b      	str	r3, [r5, #20]
 8006782:	2300      	movs	r3, #0
 8006784:	9309      	str	r3, [sp, #36]	@ 0x24
 8006786:	2320      	movs	r3, #32
 8006788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800678c:	2330      	movs	r3, #48	@ 0x30
 800678e:	f04f 0901 	mov.w	r9, #1
 8006792:	f8cd 800c 	str.w	r8, [sp, #12]
 8006796:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006930 <_svfiprintf_r+0x1e4>
 800679a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800679e:	4623      	mov	r3, r4
 80067a0:	469a      	mov	sl, r3
 80067a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067a6:	b10a      	cbz	r2, 80067ac <_svfiprintf_r+0x60>
 80067a8:	2a25      	cmp	r2, #37	@ 0x25
 80067aa:	d1f9      	bne.n	80067a0 <_svfiprintf_r+0x54>
 80067ac:	ebba 0b04 	subs.w	fp, sl, r4
 80067b0:	d00b      	beq.n	80067ca <_svfiprintf_r+0x7e>
 80067b2:	465b      	mov	r3, fp
 80067b4:	4622      	mov	r2, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ff6b 	bl	8006694 <__ssputs_r>
 80067be:	3001      	adds	r0, #1
 80067c0:	f000 80a7 	beq.w	8006912 <_svfiprintf_r+0x1c6>
 80067c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067c6:	445a      	add	r2, fp
 80067c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80067ca:	f89a 3000 	ldrb.w	r3, [sl]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 809f 	beq.w	8006912 <_svfiprintf_r+0x1c6>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295
 80067da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067de:	f10a 0a01 	add.w	sl, sl, #1
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	9307      	str	r3, [sp, #28]
 80067e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80067ec:	4654      	mov	r4, sl
 80067ee:	2205      	movs	r2, #5
 80067f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f4:	484e      	ldr	r0, [pc, #312]	@ (8006930 <_svfiprintf_r+0x1e4>)
 80067f6:	f7fe fc6e 	bl	80050d6 <memchr>
 80067fa:	9a04      	ldr	r2, [sp, #16]
 80067fc:	b9d8      	cbnz	r0, 8006836 <_svfiprintf_r+0xea>
 80067fe:	06d0      	lsls	r0, r2, #27
 8006800:	bf44      	itt	mi
 8006802:	2320      	movmi	r3, #32
 8006804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006808:	0711      	lsls	r1, r2, #28
 800680a:	bf44      	itt	mi
 800680c:	232b      	movmi	r3, #43	@ 0x2b
 800680e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006812:	f89a 3000 	ldrb.w	r3, [sl]
 8006816:	2b2a      	cmp	r3, #42	@ 0x2a
 8006818:	d015      	beq.n	8006846 <_svfiprintf_r+0xfa>
 800681a:	4654      	mov	r4, sl
 800681c:	2000      	movs	r0, #0
 800681e:	f04f 0c0a 	mov.w	ip, #10
 8006822:	9a07      	ldr	r2, [sp, #28]
 8006824:	4621      	mov	r1, r4
 8006826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800682a:	3b30      	subs	r3, #48	@ 0x30
 800682c:	2b09      	cmp	r3, #9
 800682e:	d94b      	bls.n	80068c8 <_svfiprintf_r+0x17c>
 8006830:	b1b0      	cbz	r0, 8006860 <_svfiprintf_r+0x114>
 8006832:	9207      	str	r2, [sp, #28]
 8006834:	e014      	b.n	8006860 <_svfiprintf_r+0x114>
 8006836:	eba0 0308 	sub.w	r3, r0, r8
 800683a:	fa09 f303 	lsl.w	r3, r9, r3
 800683e:	4313      	orrs	r3, r2
 8006840:	46a2      	mov	sl, r4
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	e7d2      	b.n	80067ec <_svfiprintf_r+0xa0>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9103      	str	r1, [sp, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfbb      	ittet	lt
 8006852:	425b      	neglt	r3, r3
 8006854:	f042 0202 	orrlt.w	r2, r2, #2
 8006858:	9307      	strge	r3, [sp, #28]
 800685a:	9307      	strlt	r3, [sp, #28]
 800685c:	bfb8      	it	lt
 800685e:	9204      	strlt	r2, [sp, #16]
 8006860:	7823      	ldrb	r3, [r4, #0]
 8006862:	2b2e      	cmp	r3, #46	@ 0x2e
 8006864:	d10a      	bne.n	800687c <_svfiprintf_r+0x130>
 8006866:	7863      	ldrb	r3, [r4, #1]
 8006868:	2b2a      	cmp	r3, #42	@ 0x2a
 800686a:	d132      	bne.n	80068d2 <_svfiprintf_r+0x186>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	3402      	adds	r4, #2
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	9203      	str	r2, [sp, #12]
 8006876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006934 <_svfiprintf_r+0x1e8>
 8006880:	2203      	movs	r2, #3
 8006882:	4650      	mov	r0, sl
 8006884:	7821      	ldrb	r1, [r4, #0]
 8006886:	f7fe fc26 	bl	80050d6 <memchr>
 800688a:	b138      	cbz	r0, 800689c <_svfiprintf_r+0x150>
 800688c:	2240      	movs	r2, #64	@ 0x40
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	eba0 000a 	sub.w	r0, r0, sl
 8006894:	4082      	lsls	r2, r0
 8006896:	4313      	orrs	r3, r2
 8006898:	3401      	adds	r4, #1
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a0:	2206      	movs	r2, #6
 80068a2:	4825      	ldr	r0, [pc, #148]	@ (8006938 <_svfiprintf_r+0x1ec>)
 80068a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068a8:	f7fe fc15 	bl	80050d6 <memchr>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d036      	beq.n	800691e <_svfiprintf_r+0x1d2>
 80068b0:	4b22      	ldr	r3, [pc, #136]	@ (800693c <_svfiprintf_r+0x1f0>)
 80068b2:	bb1b      	cbnz	r3, 80068fc <_svfiprintf_r+0x1b0>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	3307      	adds	r3, #7
 80068b8:	f023 0307 	bic.w	r3, r3, #7
 80068bc:	3308      	adds	r3, #8
 80068be:	9303      	str	r3, [sp, #12]
 80068c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c2:	4433      	add	r3, r6
 80068c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c6:	e76a      	b.n	800679e <_svfiprintf_r+0x52>
 80068c8:	460c      	mov	r4, r1
 80068ca:	2001      	movs	r0, #1
 80068cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d0:	e7a8      	b.n	8006824 <_svfiprintf_r+0xd8>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f04f 0c0a 	mov.w	ip, #10
 80068d8:	4619      	mov	r1, r3
 80068da:	3401      	adds	r4, #1
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	4620      	mov	r0, r4
 80068e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e4:	3a30      	subs	r2, #48	@ 0x30
 80068e6:	2a09      	cmp	r2, #9
 80068e8:	d903      	bls.n	80068f2 <_svfiprintf_r+0x1a6>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0c6      	beq.n	800687c <_svfiprintf_r+0x130>
 80068ee:	9105      	str	r1, [sp, #20]
 80068f0:	e7c4      	b.n	800687c <_svfiprintf_r+0x130>
 80068f2:	4604      	mov	r4, r0
 80068f4:	2301      	movs	r3, #1
 80068f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068fa:	e7f0      	b.n	80068de <_svfiprintf_r+0x192>
 80068fc:	ab03      	add	r3, sp, #12
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	462a      	mov	r2, r5
 8006902:	4638      	mov	r0, r7
 8006904:	4b0e      	ldr	r3, [pc, #56]	@ (8006940 <_svfiprintf_r+0x1f4>)
 8006906:	a904      	add	r1, sp, #16
 8006908:	f7fd fe82 	bl	8004610 <_printf_float>
 800690c:	1c42      	adds	r2, r0, #1
 800690e:	4606      	mov	r6, r0
 8006910:	d1d6      	bne.n	80068c0 <_svfiprintf_r+0x174>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	065b      	lsls	r3, r3, #25
 8006916:	f53f af2d 	bmi.w	8006774 <_svfiprintf_r+0x28>
 800691a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800691c:	e72c      	b.n	8006778 <_svfiprintf_r+0x2c>
 800691e:	ab03      	add	r3, sp, #12
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	462a      	mov	r2, r5
 8006924:	4638      	mov	r0, r7
 8006926:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <_svfiprintf_r+0x1f4>)
 8006928:	a904      	add	r1, sp, #16
 800692a:	f7fe f90f 	bl	8004b4c <_printf_i>
 800692e:	e7ed      	b.n	800690c <_svfiprintf_r+0x1c0>
 8006930:	08007400 	.word	0x08007400
 8006934:	08007406 	.word	0x08007406
 8006938:	0800740a 	.word	0x0800740a
 800693c:	08004611 	.word	0x08004611
 8006940:	08006695 	.word	0x08006695

08006944 <__sflush_r>:
 8006944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	0716      	lsls	r6, r2, #28
 800694c:	4605      	mov	r5, r0
 800694e:	460c      	mov	r4, r1
 8006950:	d454      	bmi.n	80069fc <__sflush_r+0xb8>
 8006952:	684b      	ldr	r3, [r1, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc02      	bgt.n	800695e <__sflush_r+0x1a>
 8006958:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd48      	ble.n	80069f0 <__sflush_r+0xac>
 800695e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006960:	2e00      	cmp	r6, #0
 8006962:	d045      	beq.n	80069f0 <__sflush_r+0xac>
 8006964:	2300      	movs	r3, #0
 8006966:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800696a:	682f      	ldr	r7, [r5, #0]
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	d030      	beq.n	80069d4 <__sflush_r+0x90>
 8006972:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	0759      	lsls	r1, r3, #29
 8006978:	d505      	bpl.n	8006986 <__sflush_r+0x42>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006980:	b10b      	cbz	r3, 8006986 <__sflush_r+0x42>
 8006982:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	4628      	mov	r0, r5
 800698a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	47b0      	blx	r6
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	d106      	bne.n	80069a4 <__sflush_r+0x60>
 8006996:	6829      	ldr	r1, [r5, #0]
 8006998:	291d      	cmp	r1, #29
 800699a:	d82b      	bhi.n	80069f4 <__sflush_r+0xb0>
 800699c:	4a28      	ldr	r2, [pc, #160]	@ (8006a40 <__sflush_r+0xfc>)
 800699e:	410a      	asrs	r2, r1
 80069a0:	07d6      	lsls	r6, r2, #31
 80069a2:	d427      	bmi.n	80069f4 <__sflush_r+0xb0>
 80069a4:	2200      	movs	r2, #0
 80069a6:	6062      	str	r2, [r4, #4]
 80069a8:	6922      	ldr	r2, [r4, #16]
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	6022      	str	r2, [r4, #0]
 80069ae:	d504      	bpl.n	80069ba <__sflush_r+0x76>
 80069b0:	1c42      	adds	r2, r0, #1
 80069b2:	d101      	bne.n	80069b8 <__sflush_r+0x74>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b903      	cbnz	r3, 80069ba <__sflush_r+0x76>
 80069b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80069ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069bc:	602f      	str	r7, [r5, #0]
 80069be:	b1b9      	cbz	r1, 80069f0 <__sflush_r+0xac>
 80069c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069c4:	4299      	cmp	r1, r3
 80069c6:	d002      	beq.n	80069ce <__sflush_r+0x8a>
 80069c8:	4628      	mov	r0, r5
 80069ca:	f7ff f9e5 	bl	8005d98 <_free_r>
 80069ce:	2300      	movs	r3, #0
 80069d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80069d2:	e00d      	b.n	80069f0 <__sflush_r+0xac>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b0      	blx	r6
 80069da:	4602      	mov	r2, r0
 80069dc:	1c50      	adds	r0, r2, #1
 80069de:	d1c9      	bne.n	8006974 <__sflush_r+0x30>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0c6      	beq.n	8006974 <__sflush_r+0x30>
 80069e6:	2b1d      	cmp	r3, #29
 80069e8:	d001      	beq.n	80069ee <__sflush_r+0xaa>
 80069ea:	2b16      	cmp	r3, #22
 80069ec:	d11d      	bne.n	8006a2a <__sflush_r+0xe6>
 80069ee:	602f      	str	r7, [r5, #0]
 80069f0:	2000      	movs	r0, #0
 80069f2:	e021      	b.n	8006a38 <__sflush_r+0xf4>
 80069f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f8:	b21b      	sxth	r3, r3
 80069fa:	e01a      	b.n	8006a32 <__sflush_r+0xee>
 80069fc:	690f      	ldr	r7, [r1, #16]
 80069fe:	2f00      	cmp	r7, #0
 8006a00:	d0f6      	beq.n	80069f0 <__sflush_r+0xac>
 8006a02:	0793      	lsls	r3, r2, #30
 8006a04:	bf18      	it	ne
 8006a06:	2300      	movne	r3, #0
 8006a08:	680e      	ldr	r6, [r1, #0]
 8006a0a:	bf08      	it	eq
 8006a0c:	694b      	ldreq	r3, [r1, #20]
 8006a0e:	1bf6      	subs	r6, r6, r7
 8006a10:	600f      	str	r7, [r1, #0]
 8006a12:	608b      	str	r3, [r1, #8]
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	ddeb      	ble.n	80069f0 <__sflush_r+0xac>
 8006a18:	4633      	mov	r3, r6
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	6a21      	ldr	r1, [r4, #32]
 8006a20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a24:	47e0      	blx	ip
 8006a26:	2800      	cmp	r0, #0
 8006a28:	dc07      	bgt.n	8006a3a <__sflush_r+0xf6>
 8006a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a32:	f04f 30ff 	mov.w	r0, #4294967295
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3a:	4407      	add	r7, r0
 8006a3c:	1a36      	subs	r6, r6, r0
 8006a3e:	e7e9      	b.n	8006a14 <__sflush_r+0xd0>
 8006a40:	dfbffffe 	.word	0xdfbffffe

08006a44 <_fflush_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	690b      	ldr	r3, [r1, #16]
 8006a48:	4605      	mov	r5, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	b913      	cbnz	r3, 8006a54 <_fflush_r+0x10>
 8006a4e:	2500      	movs	r5, #0
 8006a50:	4628      	mov	r0, r5
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	b118      	cbz	r0, 8006a5e <_fflush_r+0x1a>
 8006a56:	6a03      	ldr	r3, [r0, #32]
 8006a58:	b90b      	cbnz	r3, 8006a5e <_fflush_r+0x1a>
 8006a5a:	f7fe fa23 	bl	8004ea4 <__sinit>
 8006a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f3      	beq.n	8006a4e <_fflush_r+0xa>
 8006a66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a68:	07d0      	lsls	r0, r2, #31
 8006a6a:	d404      	bmi.n	8006a76 <_fflush_r+0x32>
 8006a6c:	0599      	lsls	r1, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <_fflush_r+0x32>
 8006a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a72:	f7fe fb2e 	bl	80050d2 <__retarget_lock_acquire_recursive>
 8006a76:	4628      	mov	r0, r5
 8006a78:	4621      	mov	r1, r4
 8006a7a:	f7ff ff63 	bl	8006944 <__sflush_r>
 8006a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a80:	4605      	mov	r5, r0
 8006a82:	07da      	lsls	r2, r3, #31
 8006a84:	d4e4      	bmi.n	8006a50 <_fflush_r+0xc>
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	059b      	lsls	r3, r3, #22
 8006a8a:	d4e1      	bmi.n	8006a50 <_fflush_r+0xc>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8e:	f7fe fb21 	bl	80050d4 <__retarget_lock_release_recursive>
 8006a92:	e7dd      	b.n	8006a50 <_fflush_r+0xc>

08006a94 <memmove>:
 8006a94:	4288      	cmp	r0, r1
 8006a96:	b510      	push	{r4, lr}
 8006a98:	eb01 0402 	add.w	r4, r1, r2
 8006a9c:	d902      	bls.n	8006aa4 <memmove+0x10>
 8006a9e:	4284      	cmp	r4, r0
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	d807      	bhi.n	8006ab4 <memmove+0x20>
 8006aa4:	1e43      	subs	r3, r0, #1
 8006aa6:	42a1      	cmp	r1, r4
 8006aa8:	d008      	beq.n	8006abc <memmove+0x28>
 8006aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ab2:	e7f8      	b.n	8006aa6 <memmove+0x12>
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	4402      	add	r2, r0
 8006ab8:	428a      	cmp	r2, r1
 8006aba:	d100      	bne.n	8006abe <memmove+0x2a>
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ac6:	e7f7      	b.n	8006ab8 <memmove+0x24>

08006ac8 <_sbrk_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	2300      	movs	r3, #0
 8006acc:	4d05      	ldr	r5, [pc, #20]	@ (8006ae4 <_sbrk_r+0x1c>)
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f7fa fc82 	bl	80013dc <_sbrk>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_sbrk_r+0x1a>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_sbrk_r+0x1a>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	2000041c 	.word	0x2000041c

08006ae8 <memcpy>:
 8006ae8:	440a      	add	r2, r1
 8006aea:	4291      	cmp	r1, r2
 8006aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af0:	d100      	bne.n	8006af4 <memcpy+0xc>
 8006af2:	4770      	bx	lr
 8006af4:	b510      	push	{r4, lr}
 8006af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006afa:	4291      	cmp	r1, r2
 8006afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b00:	d1f9      	bne.n	8006af6 <memcpy+0xe>
 8006b02:	bd10      	pop	{r4, pc}

08006b04 <__assert_func>:
 8006b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b06:	4614      	mov	r4, r2
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <__assert_func+0x2c>)
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68d8      	ldr	r0, [r3, #12]
 8006b12:	b954      	cbnz	r4, 8006b2a <__assert_func+0x26>
 8006b14:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <__assert_func+0x30>)
 8006b16:	461c      	mov	r4, r3
 8006b18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b1c:	9100      	str	r1, [sp, #0]
 8006b1e:	462b      	mov	r3, r5
 8006b20:	4905      	ldr	r1, [pc, #20]	@ (8006b38 <__assert_func+0x34>)
 8006b22:	f000 f86f 	bl	8006c04 <fiprintf>
 8006b26:	f000 f87f 	bl	8006c28 <abort>
 8006b2a:	4b04      	ldr	r3, [pc, #16]	@ (8006b3c <__assert_func+0x38>)
 8006b2c:	e7f4      	b.n	8006b18 <__assert_func+0x14>
 8006b2e:	bf00      	nop
 8006b30:	20000018 	.word	0x20000018
 8006b34:	08007456 	.word	0x08007456
 8006b38:	08007428 	.word	0x08007428
 8006b3c:	0800741b 	.word	0x0800741b

08006b40 <_calloc_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	fba1 5402 	umull	r5, r4, r1, r2
 8006b46:	b93c      	cbnz	r4, 8006b58 <_calloc_r+0x18>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7ff f997 	bl	8005e7c <_malloc_r>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	b928      	cbnz	r0, 8006b5e <_calloc_r+0x1e>
 8006b52:	2600      	movs	r6, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	220c      	movs	r2, #12
 8006b5a:	6002      	str	r2, [r0, #0]
 8006b5c:	e7f9      	b.n	8006b52 <_calloc_r+0x12>
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4621      	mov	r1, r4
 8006b62:	f7fe fa38 	bl	8004fd6 <memset>
 8006b66:	e7f5      	b.n	8006b54 <_calloc_r+0x14>

08006b68 <__ascii_mbtowc>:
 8006b68:	b082      	sub	sp, #8
 8006b6a:	b901      	cbnz	r1, 8006b6e <__ascii_mbtowc+0x6>
 8006b6c:	a901      	add	r1, sp, #4
 8006b6e:	b142      	cbz	r2, 8006b82 <__ascii_mbtowc+0x1a>
 8006b70:	b14b      	cbz	r3, 8006b86 <__ascii_mbtowc+0x1e>
 8006b72:	7813      	ldrb	r3, [r2, #0]
 8006b74:	600b      	str	r3, [r1, #0]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	1e10      	subs	r0, r2, #0
 8006b7a:	bf18      	it	ne
 8006b7c:	2001      	movne	r0, #1
 8006b7e:	b002      	add	sp, #8
 8006b80:	4770      	bx	lr
 8006b82:	4610      	mov	r0, r2
 8006b84:	e7fb      	b.n	8006b7e <__ascii_mbtowc+0x16>
 8006b86:	f06f 0001 	mvn.w	r0, #1
 8006b8a:	e7f8      	b.n	8006b7e <__ascii_mbtowc+0x16>

08006b8c <_realloc_r>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	4680      	mov	r8, r0
 8006b92:	4615      	mov	r5, r2
 8006b94:	460c      	mov	r4, r1
 8006b96:	b921      	cbnz	r1, 8006ba2 <_realloc_r+0x16>
 8006b98:	4611      	mov	r1, r2
 8006b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9e:	f7ff b96d 	b.w	8005e7c <_malloc_r>
 8006ba2:	b92a      	cbnz	r2, 8006bb0 <_realloc_r+0x24>
 8006ba4:	f7ff f8f8 	bl	8005d98 <_free_r>
 8006ba8:	2400      	movs	r4, #0
 8006baa:	4620      	mov	r0, r4
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb0:	f000 f841 	bl	8006c36 <_malloc_usable_size_r>
 8006bb4:	4285      	cmp	r5, r0
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	d802      	bhi.n	8006bc0 <_realloc_r+0x34>
 8006bba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006bbe:	d8f4      	bhi.n	8006baa <_realloc_r+0x1e>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff f95a 	bl	8005e7c <_malloc_r>
 8006bc8:	4607      	mov	r7, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0ec      	beq.n	8006ba8 <_realloc_r+0x1c>
 8006bce:	42b5      	cmp	r5, r6
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	bf28      	it	cs
 8006bd6:	4632      	movcs	r2, r6
 8006bd8:	f7ff ff86 	bl	8006ae8 <memcpy>
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4640      	mov	r0, r8
 8006be0:	f7ff f8da 	bl	8005d98 <_free_r>
 8006be4:	463c      	mov	r4, r7
 8006be6:	e7e0      	b.n	8006baa <_realloc_r+0x1e>

08006be8 <__ascii_wctomb>:
 8006be8:	4603      	mov	r3, r0
 8006bea:	4608      	mov	r0, r1
 8006bec:	b141      	cbz	r1, 8006c00 <__ascii_wctomb+0x18>
 8006bee:	2aff      	cmp	r2, #255	@ 0xff
 8006bf0:	d904      	bls.n	8006bfc <__ascii_wctomb+0x14>
 8006bf2:	228a      	movs	r2, #138	@ 0x8a
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	4770      	bx	lr
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	700a      	strb	r2, [r1, #0]
 8006c00:	4770      	bx	lr
	...

08006c04 <fiprintf>:
 8006c04:	b40e      	push	{r1, r2, r3}
 8006c06:	b503      	push	{r0, r1, lr}
 8006c08:	4601      	mov	r1, r0
 8006c0a:	ab03      	add	r3, sp, #12
 8006c0c:	4805      	ldr	r0, [pc, #20]	@ (8006c24 <fiprintf+0x20>)
 8006c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c12:	6800      	ldr	r0, [r0, #0]
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	f000 f83d 	bl	8006c94 <_vfiprintf_r>
 8006c1a:	b002      	add	sp, #8
 8006c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c20:	b003      	add	sp, #12
 8006c22:	4770      	bx	lr
 8006c24:	20000018 	.word	0x20000018

08006c28 <abort>:
 8006c28:	2006      	movs	r0, #6
 8006c2a:	b508      	push	{r3, lr}
 8006c2c:	f000 fa06 	bl	800703c <raise>
 8006c30:	2001      	movs	r0, #1
 8006c32:	f7fa fb5e 	bl	80012f2 <_exit>

08006c36 <_malloc_usable_size_r>:
 8006c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c3a:	1f18      	subs	r0, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bfbc      	itt	lt
 8006c40:	580b      	ldrlt	r3, [r1, r0]
 8006c42:	18c0      	addlt	r0, r0, r3
 8006c44:	4770      	bx	lr

08006c46 <__sfputc_r>:
 8006c46:	6893      	ldr	r3, [r2, #8]
 8006c48:	b410      	push	{r4}
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	6093      	str	r3, [r2, #8]
 8006c50:	da07      	bge.n	8006c62 <__sfputc_r+0x1c>
 8006c52:	6994      	ldr	r4, [r2, #24]
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	db01      	blt.n	8006c5c <__sfputc_r+0x16>
 8006c58:	290a      	cmp	r1, #10
 8006c5a:	d102      	bne.n	8006c62 <__sfputc_r+0x1c>
 8006c5c:	bc10      	pop	{r4}
 8006c5e:	f000 b931 	b.w	8006ec4 <__swbuf_r>
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	1c58      	adds	r0, r3, #1
 8006c66:	6010      	str	r0, [r2, #0]
 8006c68:	7019      	strb	r1, [r3, #0]
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	bc10      	pop	{r4}
 8006c6e:	4770      	bx	lr

08006c70 <__sfputs_r>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	4606      	mov	r6, r0
 8006c74:	460f      	mov	r7, r1
 8006c76:	4614      	mov	r4, r2
 8006c78:	18d5      	adds	r5, r2, r3
 8006c7a:	42ac      	cmp	r4, r5
 8006c7c:	d101      	bne.n	8006c82 <__sfputs_r+0x12>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	e007      	b.n	8006c92 <__sfputs_r+0x22>
 8006c82:	463a      	mov	r2, r7
 8006c84:	4630      	mov	r0, r6
 8006c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8a:	f7ff ffdc 	bl	8006c46 <__sfputc_r>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	d1f3      	bne.n	8006c7a <__sfputs_r+0xa>
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c94 <_vfiprintf_r>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	460d      	mov	r5, r1
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	4698      	mov	r8, r3
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	b09d      	sub	sp, #116	@ 0x74
 8006ca2:	b118      	cbz	r0, 8006cac <_vfiprintf_r+0x18>
 8006ca4:	6a03      	ldr	r3, [r0, #32]
 8006ca6:	b90b      	cbnz	r3, 8006cac <_vfiprintf_r+0x18>
 8006ca8:	f7fe f8fc 	bl	8004ea4 <__sinit>
 8006cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	d405      	bmi.n	8006cbe <_vfiprintf_r+0x2a>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	059a      	lsls	r2, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <_vfiprintf_r+0x2a>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cba:	f7fe fa0a 	bl	80050d2 <__retarget_lock_acquire_recursive>
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	071b      	lsls	r3, r3, #28
 8006cc2:	d501      	bpl.n	8006cc8 <_vfiprintf_r+0x34>
 8006cc4:	692b      	ldr	r3, [r5, #16]
 8006cc6:	b99b      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x5c>
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f000 f938 	bl	8006f40 <__swsetup_r>
 8006cd0:	b170      	cbz	r0, 8006cf0 <_vfiprintf_r+0x5c>
 8006cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cd4:	07dc      	lsls	r4, r3, #31
 8006cd6:	d504      	bpl.n	8006ce2 <_vfiprintf_r+0x4e>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	b01d      	add	sp, #116	@ 0x74
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	0598      	lsls	r0, r3, #22
 8006ce6:	d4f7      	bmi.n	8006cd8 <_vfiprintf_r+0x44>
 8006ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cea:	f7fe f9f3 	bl	80050d4 <__retarget_lock_release_recursive>
 8006cee:	e7f3      	b.n	8006cd8 <_vfiprintf_r+0x44>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cfa:	2330      	movs	r3, #48	@ 0x30
 8006cfc:	f04f 0901 	mov.w	r9, #1
 8006d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006eb0 <_vfiprintf_r+0x21c>
 8006d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	469a      	mov	sl, r3
 8006d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d14:	b10a      	cbz	r2, 8006d1a <_vfiprintf_r+0x86>
 8006d16:	2a25      	cmp	r2, #37	@ 0x25
 8006d18:	d1f9      	bne.n	8006d0e <_vfiprintf_r+0x7a>
 8006d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1e:	d00b      	beq.n	8006d38 <_vfiprintf_r+0xa4>
 8006d20:	465b      	mov	r3, fp
 8006d22:	4622      	mov	r2, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ffa2 	bl	8006c70 <__sfputs_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f000 80a7 	beq.w	8006e80 <_vfiprintf_r+0x1ec>
 8006d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d34:	445a      	add	r2, fp
 8006d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d38:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 809f 	beq.w	8006e80 <_vfiprintf_r+0x1ec>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295
 8006d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4c:	f10a 0a01 	add.w	sl, sl, #1
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9307      	str	r3, [sp, #28]
 8006d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d62:	4853      	ldr	r0, [pc, #332]	@ (8006eb0 <_vfiprintf_r+0x21c>)
 8006d64:	f7fe f9b7 	bl	80050d6 <memchr>
 8006d68:	9a04      	ldr	r2, [sp, #16]
 8006d6a:	b9d8      	cbnz	r0, 8006da4 <_vfiprintf_r+0x110>
 8006d6c:	06d1      	lsls	r1, r2, #27
 8006d6e:	bf44      	itt	mi
 8006d70:	2320      	movmi	r3, #32
 8006d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d76:	0713      	lsls	r3, r2, #28
 8006d78:	bf44      	itt	mi
 8006d7a:	232b      	movmi	r3, #43	@ 0x2b
 8006d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d80:	f89a 3000 	ldrb.w	r3, [sl]
 8006d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d86:	d015      	beq.n	8006db4 <_vfiprintf_r+0x120>
 8006d88:	4654      	mov	r4, sl
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f04f 0c0a 	mov.w	ip, #10
 8006d90:	9a07      	ldr	r2, [sp, #28]
 8006d92:	4621      	mov	r1, r4
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	3b30      	subs	r3, #48	@ 0x30
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d94b      	bls.n	8006e36 <_vfiprintf_r+0x1a2>
 8006d9e:	b1b0      	cbz	r0, 8006dce <_vfiprintf_r+0x13a>
 8006da0:	9207      	str	r2, [sp, #28]
 8006da2:	e014      	b.n	8006dce <_vfiprintf_r+0x13a>
 8006da4:	eba0 0308 	sub.w	r3, r0, r8
 8006da8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	46a2      	mov	sl, r4
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	e7d2      	b.n	8006d5a <_vfiprintf_r+0xc6>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	1d19      	adds	r1, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9103      	str	r1, [sp, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbb      	ittet	lt
 8006dc0:	425b      	neglt	r3, r3
 8006dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc6:	9307      	strge	r3, [sp, #28]
 8006dc8:	9307      	strlt	r3, [sp, #28]
 8006dca:	bfb8      	it	lt
 8006dcc:	9204      	strlt	r2, [sp, #16]
 8006dce:	7823      	ldrb	r3, [r4, #0]
 8006dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dd2:	d10a      	bne.n	8006dea <_vfiprintf_r+0x156>
 8006dd4:	7863      	ldrb	r3, [r4, #1]
 8006dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd8:	d132      	bne.n	8006e40 <_vfiprintf_r+0x1ac>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	3402      	adds	r4, #2
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	9203      	str	r2, [sp, #12]
 8006de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006de8:	9305      	str	r3, [sp, #20]
 8006dea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006eb4 <_vfiprintf_r+0x220>
 8006dee:	2203      	movs	r2, #3
 8006df0:	4650      	mov	r0, sl
 8006df2:	7821      	ldrb	r1, [r4, #0]
 8006df4:	f7fe f96f 	bl	80050d6 <memchr>
 8006df8:	b138      	cbz	r0, 8006e0a <_vfiprintf_r+0x176>
 8006dfa:	2240      	movs	r2, #64	@ 0x40
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	eba0 000a 	sub.w	r0, r0, sl
 8006e02:	4082      	lsls	r2, r0
 8006e04:	4313      	orrs	r3, r2
 8006e06:	3401      	adds	r4, #1
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0e:	2206      	movs	r2, #6
 8006e10:	4829      	ldr	r0, [pc, #164]	@ (8006eb8 <_vfiprintf_r+0x224>)
 8006e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e16:	f7fe f95e 	bl	80050d6 <memchr>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d03f      	beq.n	8006e9e <_vfiprintf_r+0x20a>
 8006e1e:	4b27      	ldr	r3, [pc, #156]	@ (8006ebc <_vfiprintf_r+0x228>)
 8006e20:	bb1b      	cbnz	r3, 8006e6a <_vfiprintf_r+0x1d6>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	3307      	adds	r3, #7
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	9303      	str	r3, [sp, #12]
 8006e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e30:	443b      	add	r3, r7
 8006e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e34:	e76a      	b.n	8006d0c <_vfiprintf_r+0x78>
 8006e36:	460c      	mov	r4, r1
 8006e38:	2001      	movs	r0, #1
 8006e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e3e:	e7a8      	b.n	8006d92 <_vfiprintf_r+0xfe>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f04f 0c0a 	mov.w	ip, #10
 8006e46:	4619      	mov	r1, r3
 8006e48:	3401      	adds	r4, #1
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e52:	3a30      	subs	r2, #48	@ 0x30
 8006e54:	2a09      	cmp	r2, #9
 8006e56:	d903      	bls.n	8006e60 <_vfiprintf_r+0x1cc>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0c6      	beq.n	8006dea <_vfiprintf_r+0x156>
 8006e5c:	9105      	str	r1, [sp, #20]
 8006e5e:	e7c4      	b.n	8006dea <_vfiprintf_r+0x156>
 8006e60:	4604      	mov	r4, r0
 8006e62:	2301      	movs	r3, #1
 8006e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e68:	e7f0      	b.n	8006e4c <_vfiprintf_r+0x1b8>
 8006e6a:	ab03      	add	r3, sp, #12
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	462a      	mov	r2, r5
 8006e70:	4630      	mov	r0, r6
 8006e72:	4b13      	ldr	r3, [pc, #76]	@ (8006ec0 <_vfiprintf_r+0x22c>)
 8006e74:	a904      	add	r1, sp, #16
 8006e76:	f7fd fbcb 	bl	8004610 <_printf_float>
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	1c78      	adds	r0, r7, #1
 8006e7e:	d1d6      	bne.n	8006e2e <_vfiprintf_r+0x19a>
 8006e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e82:	07d9      	lsls	r1, r3, #31
 8006e84:	d405      	bmi.n	8006e92 <_vfiprintf_r+0x1fe>
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	059a      	lsls	r2, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_vfiprintf_r+0x1fe>
 8006e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e8e:	f7fe f921 	bl	80050d4 <__retarget_lock_release_recursive>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	065b      	lsls	r3, r3, #25
 8006e96:	f53f af1f 	bmi.w	8006cd8 <_vfiprintf_r+0x44>
 8006e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e9c:	e71e      	b.n	8006cdc <_vfiprintf_r+0x48>
 8006e9e:	ab03      	add	r3, sp, #12
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <_vfiprintf_r+0x22c>)
 8006ea8:	a904      	add	r1, sp, #16
 8006eaa:	f7fd fe4f 	bl	8004b4c <_printf_i>
 8006eae:	e7e4      	b.n	8006e7a <_vfiprintf_r+0x1e6>
 8006eb0:	08007400 	.word	0x08007400
 8006eb4:	08007406 	.word	0x08007406
 8006eb8:	0800740a 	.word	0x0800740a
 8006ebc:	08004611 	.word	0x08004611
 8006ec0:	08006c71 	.word	0x08006c71

08006ec4 <__swbuf_r>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	460e      	mov	r6, r1
 8006ec8:	4614      	mov	r4, r2
 8006eca:	4605      	mov	r5, r0
 8006ecc:	b118      	cbz	r0, 8006ed6 <__swbuf_r+0x12>
 8006ece:	6a03      	ldr	r3, [r0, #32]
 8006ed0:	b90b      	cbnz	r3, 8006ed6 <__swbuf_r+0x12>
 8006ed2:	f7fd ffe7 	bl	8004ea4 <__sinit>
 8006ed6:	69a3      	ldr	r3, [r4, #24]
 8006ed8:	60a3      	str	r3, [r4, #8]
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	071a      	lsls	r2, r3, #28
 8006ede:	d501      	bpl.n	8006ee4 <__swbuf_r+0x20>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	b943      	cbnz	r3, 8006ef6 <__swbuf_r+0x32>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f82a 	bl	8006f40 <__swsetup_r>
 8006eec:	b118      	cbz	r0, 8006ef6 <__swbuf_r+0x32>
 8006eee:	f04f 37ff 	mov.w	r7, #4294967295
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	6922      	ldr	r2, [r4, #16]
 8006efa:	b2f6      	uxtb	r6, r6
 8006efc:	1a98      	subs	r0, r3, r2
 8006efe:	6963      	ldr	r3, [r4, #20]
 8006f00:	4637      	mov	r7, r6
 8006f02:	4283      	cmp	r3, r0
 8006f04:	dc05      	bgt.n	8006f12 <__swbuf_r+0x4e>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f7ff fd9b 	bl	8006a44 <_fflush_r>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d1ed      	bne.n	8006eee <__swbuf_r+0x2a>
 8006f12:	68a3      	ldr	r3, [r4, #8]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	60a3      	str	r3, [r4, #8]
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	6022      	str	r2, [r4, #0]
 8006f1e:	701e      	strb	r6, [r3, #0]
 8006f20:	6962      	ldr	r2, [r4, #20]
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d004      	beq.n	8006f32 <__swbuf_r+0x6e>
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	07db      	lsls	r3, r3, #31
 8006f2c:	d5e1      	bpl.n	8006ef2 <__swbuf_r+0x2e>
 8006f2e:	2e0a      	cmp	r6, #10
 8006f30:	d1df      	bne.n	8006ef2 <__swbuf_r+0x2e>
 8006f32:	4621      	mov	r1, r4
 8006f34:	4628      	mov	r0, r5
 8006f36:	f7ff fd85 	bl	8006a44 <_fflush_r>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d0d9      	beq.n	8006ef2 <__swbuf_r+0x2e>
 8006f3e:	e7d6      	b.n	8006eee <__swbuf_r+0x2a>

08006f40 <__swsetup_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4b29      	ldr	r3, [pc, #164]	@ (8006fe8 <__swsetup_r+0xa8>)
 8006f44:	4605      	mov	r5, r0
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	460c      	mov	r4, r1
 8006f4a:	b118      	cbz	r0, 8006f54 <__swsetup_r+0x14>
 8006f4c:	6a03      	ldr	r3, [r0, #32]
 8006f4e:	b90b      	cbnz	r3, 8006f54 <__swsetup_r+0x14>
 8006f50:	f7fd ffa8 	bl	8004ea4 <__sinit>
 8006f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f58:	0719      	lsls	r1, r3, #28
 8006f5a:	d422      	bmi.n	8006fa2 <__swsetup_r+0x62>
 8006f5c:	06da      	lsls	r2, r3, #27
 8006f5e:	d407      	bmi.n	8006f70 <__swsetup_r+0x30>
 8006f60:	2209      	movs	r2, #9
 8006f62:	602a      	str	r2, [r5, #0]
 8006f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	e033      	b.n	8006fd8 <__swsetup_r+0x98>
 8006f70:	0758      	lsls	r0, r3, #29
 8006f72:	d512      	bpl.n	8006f9a <__swsetup_r+0x5a>
 8006f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f76:	b141      	cbz	r1, 8006f8a <__swsetup_r+0x4a>
 8006f78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	d002      	beq.n	8006f86 <__swsetup_r+0x46>
 8006f80:	4628      	mov	r0, r5
 8006f82:	f7fe ff09 	bl	8005d98 <_free_r>
 8006f86:	2300      	movs	r3, #0
 8006f88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	2300      	movs	r3, #0
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0308 	orr.w	r3, r3, #8
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	b94b      	cbnz	r3, 8006fba <__swsetup_r+0x7a>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fb0:	d003      	beq.n	8006fba <__swsetup_r+0x7a>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 f882 	bl	80070be <__smakebuf_r>
 8006fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbe:	f013 0201 	ands.w	r2, r3, #1
 8006fc2:	d00a      	beq.n	8006fda <__swsetup_r+0x9a>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	60a2      	str	r2, [r4, #8]
 8006fc8:	6962      	ldr	r2, [r4, #20]
 8006fca:	4252      	negs	r2, r2
 8006fcc:	61a2      	str	r2, [r4, #24]
 8006fce:	6922      	ldr	r2, [r4, #16]
 8006fd0:	b942      	cbnz	r2, 8006fe4 <__swsetup_r+0xa4>
 8006fd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fd6:	d1c5      	bne.n	8006f64 <__swsetup_r+0x24>
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	0799      	lsls	r1, r3, #30
 8006fdc:	bf58      	it	pl
 8006fde:	6962      	ldrpl	r2, [r4, #20]
 8006fe0:	60a2      	str	r2, [r4, #8]
 8006fe2:	e7f4      	b.n	8006fce <__swsetup_r+0x8e>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e7f7      	b.n	8006fd8 <__swsetup_r+0x98>
 8006fe8:	20000018 	.word	0x20000018

08006fec <_raise_r>:
 8006fec:	291f      	cmp	r1, #31
 8006fee:	b538      	push	{r3, r4, r5, lr}
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	d904      	bls.n	8007000 <_raise_r+0x14>
 8006ff6:	2316      	movs	r3, #22
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007002:	b112      	cbz	r2, 800700a <_raise_r+0x1e>
 8007004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007008:	b94b      	cbnz	r3, 800701e <_raise_r+0x32>
 800700a:	4628      	mov	r0, r5
 800700c:	f000 f830 	bl	8007070 <_getpid_r>
 8007010:	4622      	mov	r2, r4
 8007012:	4601      	mov	r1, r0
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701a:	f000 b817 	b.w	800704c <_kill_r>
 800701e:	2b01      	cmp	r3, #1
 8007020:	d00a      	beq.n	8007038 <_raise_r+0x4c>
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	d103      	bne.n	800702e <_raise_r+0x42>
 8007026:	2316      	movs	r3, #22
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	2001      	movs	r0, #1
 800702c:	e7e7      	b.n	8006ffe <_raise_r+0x12>
 800702e:	2100      	movs	r1, #0
 8007030:	4620      	mov	r0, r4
 8007032:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007036:	4798      	blx	r3
 8007038:	2000      	movs	r0, #0
 800703a:	e7e0      	b.n	8006ffe <_raise_r+0x12>

0800703c <raise>:
 800703c:	4b02      	ldr	r3, [pc, #8]	@ (8007048 <raise+0xc>)
 800703e:	4601      	mov	r1, r0
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f7ff bfd3 	b.w	8006fec <_raise_r>
 8007046:	bf00      	nop
 8007048:	20000018 	.word	0x20000018

0800704c <_kill_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	2300      	movs	r3, #0
 8007050:	4d06      	ldr	r5, [pc, #24]	@ (800706c <_kill_r+0x20>)
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	f7fa f93a 	bl	80012d2 <_kill>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d102      	bne.n	8007068 <_kill_r+0x1c>
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	b103      	cbz	r3, 8007068 <_kill_r+0x1c>
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	2000041c 	.word	0x2000041c

08007070 <_getpid_r>:
 8007070:	f7fa b928 	b.w	80012c4 <_getpid>

08007074 <__swhatbuf_r>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	460c      	mov	r4, r1
 8007078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707c:	4615      	mov	r5, r2
 800707e:	2900      	cmp	r1, #0
 8007080:	461e      	mov	r6, r3
 8007082:	b096      	sub	sp, #88	@ 0x58
 8007084:	da0c      	bge.n	80070a0 <__swhatbuf_r+0x2c>
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	2100      	movs	r1, #0
 800708a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800708e:	bf14      	ite	ne
 8007090:	2340      	movne	r3, #64	@ 0x40
 8007092:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007096:	2000      	movs	r0, #0
 8007098:	6031      	str	r1, [r6, #0]
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	b016      	add	sp, #88	@ 0x58
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	466a      	mov	r2, sp
 80070a2:	f000 f849 	bl	8007138 <_fstat_r>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	dbed      	blt.n	8007086 <__swhatbuf_r+0x12>
 80070aa:	9901      	ldr	r1, [sp, #4]
 80070ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070b4:	4259      	negs	r1, r3
 80070b6:	4159      	adcs	r1, r3
 80070b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070bc:	e7eb      	b.n	8007096 <__swhatbuf_r+0x22>

080070be <__smakebuf_r>:
 80070be:	898b      	ldrh	r3, [r1, #12]
 80070c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c2:	079d      	lsls	r5, r3, #30
 80070c4:	4606      	mov	r6, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	d507      	bpl.n	80070da <__smakebuf_r+0x1c>
 80070ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	2301      	movs	r3, #1
 80070d4:	6163      	str	r3, [r4, #20]
 80070d6:	b003      	add	sp, #12
 80070d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070da:	466a      	mov	r2, sp
 80070dc:	ab01      	add	r3, sp, #4
 80070de:	f7ff ffc9 	bl	8007074 <__swhatbuf_r>
 80070e2:	9f00      	ldr	r7, [sp, #0]
 80070e4:	4605      	mov	r5, r0
 80070e6:	4639      	mov	r1, r7
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7fe fec7 	bl	8005e7c <_malloc_r>
 80070ee:	b948      	cbnz	r0, 8007104 <__smakebuf_r+0x46>
 80070f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f4:	059a      	lsls	r2, r3, #22
 80070f6:	d4ee      	bmi.n	80070d6 <__smakebuf_r+0x18>
 80070f8:	f023 0303 	bic.w	r3, r3, #3
 80070fc:	f043 0302 	orr.w	r3, r3, #2
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	e7e2      	b.n	80070ca <__smakebuf_r+0xc>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800710a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	9b01      	ldr	r3, [sp, #4]
 8007112:	6020      	str	r0, [r4, #0]
 8007114:	b15b      	cbz	r3, 800712e <__smakebuf_r+0x70>
 8007116:	4630      	mov	r0, r6
 8007118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800711c:	f000 f81e 	bl	800715c <_isatty_r>
 8007120:	b128      	cbz	r0, 800712e <__smakebuf_r+0x70>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0301 	orr.w	r3, r3, #1
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	431d      	orrs	r5, r3
 8007132:	81a5      	strh	r5, [r4, #12]
 8007134:	e7cf      	b.n	80070d6 <__smakebuf_r+0x18>
	...

08007138 <_fstat_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	2300      	movs	r3, #0
 800713c:	4d06      	ldr	r5, [pc, #24]	@ (8007158 <_fstat_r+0x20>)
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	4611      	mov	r1, r2
 8007144:	602b      	str	r3, [r5, #0]
 8007146:	f7fa f923 	bl	8001390 <_fstat>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	d102      	bne.n	8007154 <_fstat_r+0x1c>
 800714e:	682b      	ldr	r3, [r5, #0]
 8007150:	b103      	cbz	r3, 8007154 <_fstat_r+0x1c>
 8007152:	6023      	str	r3, [r4, #0]
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	bf00      	nop
 8007158:	2000041c 	.word	0x2000041c

0800715c <_isatty_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	2300      	movs	r3, #0
 8007160:	4d05      	ldr	r5, [pc, #20]	@ (8007178 <_isatty_r+0x1c>)
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	f7fa f921 	bl	80013ae <_isatty>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_isatty_r+0x1a>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_isatty_r+0x1a>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	2000041c 	.word	0x2000041c

0800717c <_init>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr

08007188 <_fini>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr
