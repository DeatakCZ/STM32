
11_Timer_Frequency_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002c84  08002c84  00003c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cfc  08002cfc  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cfc  08002cfc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002d04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000005c  08002d60  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08002d60  000042d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4a0  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f0  00000000  00000000  0000f525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00010f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000906  00000000  00000000  00011a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e3f  00000000  00000000  0001239e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c955  00000000  00000000  000291dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887f1  00000000  00000000  00035b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be323  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  000be368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c18ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c6c 	.word	0x08002c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c6c 	.word	0x08002c6c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb3e 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f850 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f95e 	bl	8000418 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f932 	bl	80003c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000160:	f000 f890 	bl	8000284 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f8e0 	bl	8000328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <main+0x2c>)
 800016a:	f001 fabf 	bl	80016ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800016e:	4803      	ldr	r0, [pc, #12]	@ (800017c <main+0x30>)
 8000170:	f001 fb06 	bl	8001780 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000174:	bf00      	nop
 8000176:	e7fd      	b.n	8000174 <main+0x28>
 8000178:	20000078 	.word	0x20000078
 800017c:	200000c0 	.word	0x200000c0

08000180 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a14      	ldr	r2, [pc, #80]	@ (80001e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800018e:	4293      	cmp	r3, r2
 8000190:	d121      	bne.n	80001d6 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		gu32_CounterTicks = TIM2->CNT;
 8000192:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000198:	4a12      	ldr	r2, [pc, #72]	@ (80001e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800019a:	6013      	str	r3, [r2, #0]
		gu32_Freq = gu32_CounterTicks * 20;
 800019c:	4b11      	ldr	r3, [pc, #68]	@ (80001e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	4613      	mov	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	4413      	add	r3, r2
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b0f      	ldr	r3, [pc, #60]	@ (80001e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001ac:	601a      	str	r2, [r3, #0]
		sprintf(gu8_MSG, "Frequency = %d Hz \n\r", gu32_Freq);
 80001ae:	4b0e      	ldr	r3, [pc, #56]	@ (80001e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	461a      	mov	r2, r3
 80001b4:	490d      	ldr	r1, [pc, #52]	@ (80001ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001b6:	480e      	ldr	r0, [pc, #56]	@ (80001f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001b8:	f002 f8a8 	bl	800230c <siprintf>
		HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 80001bc:	2364      	movs	r3, #100	@ 0x64
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	490b      	ldr	r1, [pc, #44]	@ (80001f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001c2:	480c      	ldr	r0, [pc, #48]	@ (80001f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80001c4:	f001 fece 	bl	8001f64 <HAL_UART_Transmit>
		TIM3->CNT = 0;
 80001c8:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM2->CNT = 0;
 80001ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001d2:	2200      	movs	r2, #0
 80001d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40000400 	.word	0x40000400
 80001e4:	20000150 	.word	0x20000150
 80001e8:	20000154 	.word	0x20000154
 80001ec:	08002c84 	.word	0x08002c84
 80001f0:	20000158 	.word	0x20000158
 80001f4:	20000108 	.word	0x20000108

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f8a0 	bl	800234c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000234:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fdf3 	bl	8000e2c <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f952 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f860 	bl	8001330 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f93d 	bl	80004f4 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002bc:	4b19      	ldr	r3, [pc, #100]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002c2:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002c4:	2280      	movs	r2, #128	@ 0x80
 80002c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c8:	4816      	ldr	r0, [pc, #88]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002ca:	f001 f9bf 	bl	800164c <HAL_TIM_Base_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002d4:	f000 f90e 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80002d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002dc:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002f2:	f001 fb87 	bl	8001a04 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80002fc:	f000 f8fa 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_TIM2_Init+0xa0>)
 800030e:	f001 fd69 	bl	8001de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000318:	f000 f8ec 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000078 	.word	0x20000078

08000328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000344:	4b1d      	ldr	r3, [pc, #116]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000346:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <MX_TIM3_Init+0x98>)
 8000348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800034a:	4b1c      	ldr	r3, [pc, #112]	@ (80003bc <MX_TIM3_Init+0x94>)
 800034c:	2264      	movs	r2, #100	@ 0x64
 800034e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000;
 8000356:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000358:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 800035c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800036a:	4814      	ldr	r0, [pc, #80]	@ (80003bc <MX_TIM3_Init+0x94>)
 800036c:	f001 f96e 	bl	800164c <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f8bd 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800037e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4619      	mov	r1, r3
 8000386:	480d      	ldr	r0, [pc, #52]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000388:	f001 fb3c 	bl	8001a04 <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f8af 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	@ (80003bc <MX_TIM3_Init+0x94>)
 80003a4:	f001 fd1e 	bl	8001de4 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003ae:	f000 f8a1 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000c0 	.word	0x200000c0
 80003c0:	40000400 	.word	0x40000400

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <MX_USART2_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003fc:	f001 fd62 	bl	8001ec4 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f875 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000108 	.word	0x20000108
 8000414:	40004400 	.word	0x40004400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a2c      	ldr	r2, [pc, #176]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a26      	ldr	r2, [pc, #152]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2120      	movs	r1, #32
 8000490:	4815      	ldr	r0, [pc, #84]	@ (80004e8 <MX_GPIO_Init+0xd0>)
 8000492:	f000 fc91 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_GPIO_Init+0xd4>)
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4811      	ldr	r0, [pc, #68]	@ (80004f0 <MX_GPIO_Init+0xd8>)
 80004ac:	f000 fb00 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b0:	2320      	movs	r3, #32
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4808      	ldr	r0, [pc, #32]	@ (80004e8 <MX_GPIO_Init+0xd0>)
 80004c8:	f000 faf2 	bl	8000ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2028      	movs	r0, #40	@ 0x28
 80004d2:	f000 fab6 	bl	8000a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004d6:	2028      	movs	r0, #40	@ 0x28
 80004d8:	f000 facf 	bl	8000a7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	10110000 	.word	0x10110000
 80004f0:	40011000 	.word	0x40011000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000582:	d124      	bne.n	80005ce <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000584:	4b20      	ldr	r3, [pc, #128]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	4a1f      	ldr	r2, [pc, #124]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	61d3      	str	r3, [r2, #28]
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a19      	ldr	r2, [pc, #100]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	4619      	mov	r1, r3
 80005c6:	4811      	ldr	r0, [pc, #68]	@ (800060c <HAL_TIM_Base_MspInit+0xa8>)
 80005c8:	f000 fa72 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005cc:	e018      	b.n	8000600 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM3)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000610 <HAL_TIM_Base_MspInit+0xac>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d113      	bne.n	8000600 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	61d3      	str	r3, [r2, #28]
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <HAL_TIM_Base_MspInit+0xa4>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	201d      	movs	r0, #29
 80005f6:	f000 fa24 	bl	8000a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005fa:	201d      	movs	r0, #29
 80005fc:	f000 fa3d 	bl	8000a7a <HAL_NVIC_EnableIRQ>
}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	@ 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	40000400 	.word	0x40000400

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_UART_MspInit+0x70>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d123      	bne.n	800067c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <HAL_UART_MspInit+0x74>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <HAL_UART_MspInit+0x74>)
 800063a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063e:	61d3      	str	r3, [r2, #28]
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <HAL_UART_MspInit+0x74>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HAL_UART_MspInit+0x74>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <HAL_UART_MspInit+0x74>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <HAL_UART_MspInit+0x74>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000664:	230c      	movs	r3, #12
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <HAL_UART_MspInit+0x78>)
 8000678:	f000 fa1a 	bl	8000ab0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <NMI_Handler+0x4>

08000698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <MemManage_Handler+0x4>

080006a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f8bc 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006ec:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <TIM3_IRQHandler+0x10>)
 80006ee:	f001 f899 	bl	8001824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000c0 	.word	0x200000c0

080006fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000700:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000704:	f000 fb70 	bl	8000de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000714:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <_sbrk+0x5c>)
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <_sbrk+0x60>)
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d102      	bne.n	800072e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <_sbrk+0x64>)
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <_sbrk+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d207      	bcs.n	800074c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800073c:	f001 fe0e 	bl	800235c <__errno>
 8000740:	4603      	mov	r3, r0
 8000742:	220c      	movs	r2, #12
 8000744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	e009      	b.n	8000760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000752:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <_sbrk+0x64>)
 800075c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20005000 	.word	0x20005000
 800076c:	00000400 	.word	0x00000400
 8000770:	20000180 	.word	0x20000180
 8000774:	200002d0 	.word	0x200002d0

08000778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff fff8 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800078a:	490c      	ldr	r1, [pc, #48]	@ (80007bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800078c:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a09      	ldr	r2, [pc, #36]	@ (80007c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a0:	4c09      	ldr	r4, [pc, #36]	@ (80007c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f001 fddb 	bl	8002368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff fccb 	bl	800014c <main>
  bx lr
 80007b6:	4770      	bx	lr
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007c0:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 80007c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007c8:	200002d0 	.word	0x200002d0

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_Init+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <HAL_Init+0x28>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f923 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f808 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ec:	f7ff fe88 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_InitTick+0x54>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_InitTick+0x58>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f93b 	bl	8000a96 <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e00e      	b.n	8000848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d80a      	bhi.n	8000846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f000 f903 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083c:	4a06      	ldr	r2, [pc, #24]	@ (8000858 <HAL_InitTick+0x5c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <HAL_IncTick+0x1c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <HAL_IncTick+0x20>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
 800086c:	4a03      	ldr	r2, [pc, #12]	@ (800087c <HAL_IncTick+0x20>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	20000008 	.word	0x20000008
 800087c:	20000184 	.word	0x20000184

08000880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <HAL_GetTick+0x10>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000184 	.word	0x20000184

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4906      	ldr	r1, [pc, #24]	@ (800092c <__NVIC_EnableIRQ+0x34>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	@ (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	@ (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	@ 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f7ff ff90 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff2d 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff42 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff90 	bl	8000984 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5f 	bl	8000930 <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff35 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b08b      	sub	sp, #44	@ 0x2c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e169      	b.n	8000d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f040 8158 	bne.w	8000d92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4a9a      	ldr	r2, [pc, #616]	@ (8000d50 <HAL_GPIO_Init+0x2a0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d05e      	beq.n	8000baa <HAL_GPIO_Init+0xfa>
 8000aec:	4a98      	ldr	r2, [pc, #608]	@ (8000d50 <HAL_GPIO_Init+0x2a0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d875      	bhi.n	8000bde <HAL_GPIO_Init+0x12e>
 8000af2:	4a98      	ldr	r2, [pc, #608]	@ (8000d54 <HAL_GPIO_Init+0x2a4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d058      	beq.n	8000baa <HAL_GPIO_Init+0xfa>
 8000af8:	4a96      	ldr	r2, [pc, #600]	@ (8000d54 <HAL_GPIO_Init+0x2a4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d86f      	bhi.n	8000bde <HAL_GPIO_Init+0x12e>
 8000afe:	4a96      	ldr	r2, [pc, #600]	@ (8000d58 <HAL_GPIO_Init+0x2a8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d052      	beq.n	8000baa <HAL_GPIO_Init+0xfa>
 8000b04:	4a94      	ldr	r2, [pc, #592]	@ (8000d58 <HAL_GPIO_Init+0x2a8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d869      	bhi.n	8000bde <HAL_GPIO_Init+0x12e>
 8000b0a:	4a94      	ldr	r2, [pc, #592]	@ (8000d5c <HAL_GPIO_Init+0x2ac>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d04c      	beq.n	8000baa <HAL_GPIO_Init+0xfa>
 8000b10:	4a92      	ldr	r2, [pc, #584]	@ (8000d5c <HAL_GPIO_Init+0x2ac>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d863      	bhi.n	8000bde <HAL_GPIO_Init+0x12e>
 8000b16:	4a92      	ldr	r2, [pc, #584]	@ (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d046      	beq.n	8000baa <HAL_GPIO_Init+0xfa>
 8000b1c:	4a90      	ldr	r2, [pc, #576]	@ (8000d60 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d85d      	bhi.n	8000bde <HAL_GPIO_Init+0x12e>
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d82a      	bhi.n	8000b7c <HAL_GPIO_Init+0xcc>
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d859      	bhi.n	8000bde <HAL_GPIO_Init+0x12e>
 8000b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b30 <HAL_GPIO_Init+0x80>)
 8000b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b30:	08000bab 	.word	0x08000bab
 8000b34:	08000b85 	.word	0x08000b85
 8000b38:	08000b97 	.word	0x08000b97
 8000b3c:	08000bd9 	.word	0x08000bd9
 8000b40:	08000bdf 	.word	0x08000bdf
 8000b44:	08000bdf 	.word	0x08000bdf
 8000b48:	08000bdf 	.word	0x08000bdf
 8000b4c:	08000bdf 	.word	0x08000bdf
 8000b50:	08000bdf 	.word	0x08000bdf
 8000b54:	08000bdf 	.word	0x08000bdf
 8000b58:	08000bdf 	.word	0x08000bdf
 8000b5c:	08000bdf 	.word	0x08000bdf
 8000b60:	08000bdf 	.word	0x08000bdf
 8000b64:	08000bdf 	.word	0x08000bdf
 8000b68:	08000bdf 	.word	0x08000bdf
 8000b6c:	08000bdf 	.word	0x08000bdf
 8000b70:	08000bdf 	.word	0x08000bdf
 8000b74:	08000b8d 	.word	0x08000b8d
 8000b78:	08000ba1 	.word	0x08000ba1
 8000b7c:	4a79      	ldr	r2, [pc, #484]	@ (8000d64 <HAL_GPIO_Init+0x2b4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d013      	beq.n	8000baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b82:	e02c      	b.n	8000bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e029      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	3304      	adds	r3, #4
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e024      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	623b      	str	r3, [r7, #32]
          break;
 8000b9e:	e01f      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	330c      	adds	r3, #12
 8000ba6:	623b      	str	r3, [r7, #32]
          break;
 8000ba8:	e01a      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	623b      	str	r3, [r7, #32]
          break;
 8000bb6:	e013      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d105      	bne.n	8000bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	611a      	str	r2, [r3, #16]
          break;
 8000bca:	e009      	b.n	8000be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	615a      	str	r2, [r3, #20]
          break;
 8000bd6:	e003      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e000      	b.n	8000be0 <HAL_GPIO_Init+0x130>
          break;
 8000bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2bff      	cmp	r3, #255	@ 0xff
 8000be4:	d801      	bhi.n	8000bea <HAL_GPIO_Init+0x13a>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	e001      	b.n	8000bee <HAL_GPIO_Init+0x13e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3304      	adds	r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	2bff      	cmp	r3, #255	@ 0xff
 8000bf4:	d802      	bhi.n	8000bfc <HAL_GPIO_Init+0x14c>
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x152>
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfe:	3b08      	subs	r3, #8
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	210f      	movs	r1, #15
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	401a      	ands	r2, r3
 8000c14:	6a39      	ldr	r1, [r7, #32]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c30:	4b4d      	ldr	r3, [pc, #308]	@ (8000d68 <HAL_GPIO_Init+0x2b8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a4c      	ldr	r2, [pc, #304]	@ (8000d68 <HAL_GPIO_Init+0x2b8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d68 <HAL_GPIO_Init+0x2b8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c48:	4a48      	ldr	r2, [pc, #288]	@ (8000d6c <HAL_GPIO_Init+0x2bc>)
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a40      	ldr	r2, [pc, #256]	@ (8000d70 <HAL_GPIO_Init+0x2c0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d013      	beq.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3f      	ldr	r2, [pc, #252]	@ (8000d74 <HAL_GPIO_Init+0x2c4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d00d      	beq.n	8000c98 <HAL_GPIO_Init+0x1e8>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d78 <HAL_GPIO_Init+0x2c8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d007      	beq.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a3d      	ldr	r2, [pc, #244]	@ (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d101      	bne.n	8000c90 <HAL_GPIO_Init+0x1e0>
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e006      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c90:	2304      	movs	r3, #4
 8000c92:	e004      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca0:	f002 0203 	and.w	r2, r2, #3
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cae:	492f      	ldr	r1, [pc, #188]	@ (8000d6c <HAL_GPIO_Init+0x2bc>)
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	492c      	ldr	r1, [pc, #176]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4928      	ldr	r1, [pc, #160]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf0:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	4922      	ldr	r1, [pc, #136]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60cb      	str	r3, [r1, #12]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	491e      	ldr	r1, [pc, #120]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4918      	ldr	r1, [pc, #96]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	604b      	str	r3, [r1, #4]
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	4914      	ldr	r1, [pc, #80]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	490e      	ldr	r1, [pc, #56]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e021      	b.n	8000d92 <HAL_GPIO_Init+0x2e2>
 8000d4e:	bf00      	nop
 8000d50:	10320000 	.word	0x10320000
 8000d54:	10310000 	.word	0x10310000
 8000d58:	10220000 	.word	0x10220000
 8000d5c:	10210000 	.word	0x10210000
 8000d60:	10120000 	.word	0x10120000
 8000d64:	10110000 	.word	0x10110000
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40011400 	.word	0x40011400
 8000d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <HAL_GPIO_Init+0x304>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <HAL_GPIO_Init+0x304>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	3301      	adds	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f47f ae8e 	bne.w	8000ac4 <HAL_GPIO_Init+0x14>
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	372c      	adds	r7, #44	@ 0x2c
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dd4:	e003      	b.n	8000dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	041a      	lsls	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	611a      	str	r2, [r3, #16]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df4:	695a      	ldr	r2, [r3, #20]
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f806 	bl	8000e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e272      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8087 	beq.w	8000f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4c:	4b92      	ldr	r3, [pc, #584]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d00c      	beq.n	8000e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e58:	4b8f      	ldr	r3, [pc, #572]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d112      	bne.n	8000e8a <HAL_RCC_OscConfig+0x5e>
 8000e64:	4b8c      	ldr	r3, [pc, #560]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e70:	d10b      	bne.n	8000e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e72:	4b89      	ldr	r3, [pc, #548]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d06c      	beq.n	8000f58 <HAL_RCC_OscConfig+0x12c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d168      	bne.n	8000f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e24c      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x76>
 8000e94:	4b80      	ldr	r3, [pc, #512]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a7f      	ldr	r2, [pc, #508]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e02e      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x98>
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a7a      	ldr	r2, [pc, #488]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b78      	ldr	r3, [pc, #480]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a77      	ldr	r2, [pc, #476]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e01d      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0xbc>
 8000ece:	4b72      	ldr	r3, [pc, #456]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a71      	ldr	r2, [pc, #452]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b6f      	ldr	r3, [pc, #444]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6e      	ldr	r2, [pc, #440]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6a      	ldr	r2, [pc, #424]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b68      	ldr	r3, [pc, #416]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a67      	ldr	r2, [pc, #412]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fcba 	bl	8000880 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fcb6 	bl	8000880 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	@ 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e200      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f22:	4b5d      	ldr	r3, [pc, #372]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0xe4>
 8000f2e:	e014      	b.n	8000f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fca6 	bl	8000880 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fca2 	bl	8000880 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	@ 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1ec      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	4b53      	ldr	r3, [pc, #332]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x10c>
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d063      	beq.n	800102e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f66:	4b4c      	ldr	r3, [pc, #304]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00b      	beq.n	8000f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f72:	4b49      	ldr	r3, [pc, #292]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d11c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x18c>
 8000f7e:	4b46      	ldr	r3, [pc, #280]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d116      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x176>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e1c0      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4939      	ldr	r1, [pc, #228]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb6:	e03a      	b.n	800102e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d020      	beq.n	8001002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc0:	4b36      	ldr	r3, [pc, #216]	@ (800109c <HAL_RCC_OscConfig+0x270>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fc5b 	bl	8000880 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff fc57 	bl	8000880 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1a1      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fec:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4927      	ldr	r1, [pc, #156]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <HAL_RCC_OscConfig+0x270>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fc3a 	bl	8000880 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001010:	f7ff fc36 	bl	8000880 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e180      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001022:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03a      	beq.n	80010b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d019      	beq.n	8001076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <HAL_RCC_OscConfig+0x274>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001048:	f7ff fc1a 	bl	8000880 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff fc16 	bl	8000880 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e160      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <HAL_RCC_OscConfig+0x26c>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f000 face 	bl	8001610 <RCC_Delay>
 8001074:	e01c      	b.n	80010b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_RCC_OscConfig+0x274>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107c:	f7ff fc00 	bl	8000880 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001082:	e00f      	b.n	80010a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fbfc 	bl	8000880 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d908      	bls.n	80010a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e146      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	42420000 	.word	0x42420000
 80010a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	4b92      	ldr	r3, [pc, #584]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e9      	bne.n	8001084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a6 	beq.w	800120a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c2:	4b8b      	ldr	r3, [pc, #556]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b88      	ldr	r3, [pc, #544]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a87      	ldr	r2, [pc, #540]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b85      	ldr	r3, [pc, #532]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010e6:	2301      	movs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ea:	4b82      	ldr	r3, [pc, #520]	@ (80012f4 <HAL_RCC_OscConfig+0x4c8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d118      	bne.n	8001128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f6:	4b7f      	ldr	r3, [pc, #508]	@ (80012f4 <HAL_RCC_OscConfig+0x4c8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a7e      	ldr	r2, [pc, #504]	@ (80012f4 <HAL_RCC_OscConfig+0x4c8>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001102:	f7ff fbbd 	bl	8000880 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110a:	f7ff fbb9 	bl	8000880 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	@ 0x64
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e103      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	4b75      	ldr	r3, [pc, #468]	@ (80012f4 <HAL_RCC_OscConfig+0x4c8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d106      	bne.n	800113e <HAL_RCC_OscConfig+0x312>
 8001130:	4b6f      	ldr	r3, [pc, #444]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a6e      	ldr	r2, [pc, #440]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6213      	str	r3, [r2, #32]
 800113c:	e02d      	b.n	800119a <HAL_RCC_OscConfig+0x36e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x334>
 8001146:	4b6a      	ldr	r3, [pc, #424]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a69      	ldr	r2, [pc, #420]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	6213      	str	r3, [r2, #32]
 8001152:	4b67      	ldr	r3, [pc, #412]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4a66      	ldr	r2, [pc, #408]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	6213      	str	r3, [r2, #32]
 800115e:	e01c      	b.n	800119a <HAL_RCC_OscConfig+0x36e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x356>
 8001168:	4b61      	ldr	r3, [pc, #388]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4a60      	ldr	r2, [pc, #384]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6213      	str	r3, [r2, #32]
 8001174:	4b5e      	ldr	r3, [pc, #376]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a5d      	ldr	r2, [pc, #372]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e00b      	b.n	800119a <HAL_RCC_OscConfig+0x36e>
 8001182:	4b5b      	ldr	r3, [pc, #364]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	4a5a      	ldr	r2, [pc, #360]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	6213      	str	r3, [r2, #32]
 800118e:	4b58      	ldr	r3, [pc, #352]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a57      	ldr	r2, [pc, #348]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 0304 	bic.w	r3, r3, #4
 8001198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d015      	beq.n	80011ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fb6d 	bl	8000880 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fb69 	bl	8000880 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0b1      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c0:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0ee      	beq.n	80011aa <HAL_RCC_OscConfig+0x37e>
 80011cc:	e014      	b.n	80011f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb57 	bl	8000880 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fb53 	bl	8000880 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e09b      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ec:	4b40      	ldr	r3, [pc, #256]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1ee      	bne.n	80011d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d105      	bne.n	800120a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fe:	4b3c      	ldr	r3, [pc, #240]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a3b      	ldr	r2, [pc, #236]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8087 	beq.w	8001322 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001214:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d061      	beq.n	80012e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d146      	bne.n	80012b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001228:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <HAL_RCC_OscConfig+0x4cc>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fb27 	bl	8000880 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fb23 	bl	8000880 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e06d      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125c:	d108      	bne.n	8001270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4921      	ldr	r1, [pc, #132]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a19      	ldr	r1, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	430b      	orrs	r3, r1
 8001282:	491b      	ldr	r1, [pc, #108]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <HAL_RCC_OscConfig+0x4cc>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff faf7 	bl	8000880 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff faf3 	bl	8000880 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e03d      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x46a>
 80012b4:	e035      	b.n	8001322 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_RCC_OscConfig+0x4cc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fae0 	bl	8000880 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff fadc 	bl	8000880 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e026      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x498>
 80012e2:	e01e      	b.n	8001322 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d107      	bne.n	80012fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e019      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40007000 	.word	0x40007000
 80012f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x500>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	429a      	cmp	r2, r3
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131a:	429a      	cmp	r2, r3
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0d0      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b6a      	ldr	r3, [pc, #424]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d910      	bls.n	8001374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b67      	ldr	r3, [pc, #412]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4965      	ldr	r1, [pc, #404]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b63      	ldr	r3, [pc, #396]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0b8      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138c:	4b59      	ldr	r3, [pc, #356]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a58      	ldr	r2, [pc, #352]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001396:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a4:	4b53      	ldr	r3, [pc, #332]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a52      	ldr	r2, [pc, #328]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	4b50      	ldr	r3, [pc, #320]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	494d      	ldr	r1, [pc, #308]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d040      	beq.n	8001450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b47      	ldr	r3, [pc, #284]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e07f      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e073      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06b      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140e:	4b39      	ldr	r3, [pc, #228]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 0203 	bic.w	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4936      	ldr	r1, [pc, #216]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff fa2e 	bl	8000880 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff fa2a 	bl	8000880 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e053      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 020c 	and.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1eb      	bne.n	8001428 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d210      	bcs.n	8001480 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 0207 	bic.w	r2, r3, #7
 8001466:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e032      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4916      	ldr	r1, [pc, #88]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	490e      	ldr	r1, [pc, #56]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014be:	f000 f821 	bl	8001504 <HAL_RCC_GetSysClockFreq>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	490a      	ldr	r1, [pc, #40]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	5ccb      	ldrb	r3, [r1, r3]
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_RCC_ClockConfig+0x1cc>)
 80014d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_ClockConfig+0x1d0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f98c 	bl	80007fc <HAL_InitTick>

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	08002c9c 	.word	0x08002c9c
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x94>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b04      	cmp	r3, #4
 800152c:	d002      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x30>
 800152e:	2b08      	cmp	r3, #8
 8001530:	d003      	beq.n	800153a <HAL_RCC_GetSysClockFreq+0x36>
 8001532:	e027      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_RCC_GetSysClockFreq+0x98>)
 8001536:	613b      	str	r3, [r7, #16]
      break;
 8001538:	e027      	b.n	800158a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0c9b      	lsrs	r3, r3, #18
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d010      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x94>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0c5b      	lsrs	r3, r3, #17
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <HAL_RCC_GetSysClockFreq+0x98>)
 8001566:	fb03 f202 	mul.w	r2, r3, r2
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e004      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	613b      	str	r3, [r7, #16]
      break;
 8001582:	e002      	b.n	800158a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_RCC_GetSysClockFreq+0x98>)
 8001586:	613b      	str	r3, [r7, #16]
      break;
 8001588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158a:	693b      	ldr	r3, [r7, #16]
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	007a1200 	.word	0x007a1200
 80015a0:	08002cb4 	.word	0x08002cb4
 80015a4:	08002cc4 	.word	0x08002cc4
 80015a8:	003d0900 	.word	0x003d0900

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b02      	ldr	r3, [pc, #8]	@ (80015bc <HAL_RCC_GetHCLKFreq+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000000 	.word	0x20000000

080015c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c4:	f7ff fff2 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	4903      	ldr	r1, [pc, #12]	@ (80015e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	08002cac 	.word	0x08002cac

080015e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ec:	f7ff ffde 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0adb      	lsrs	r3, r3, #11
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	4903      	ldr	r1, [pc, #12]	@ (800160c <HAL_RCC_GetPCLK2Freq+0x24>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	08002cac 	.word	0x08002cac

08001610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <RCC_Delay+0x34>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <RCC_Delay+0x38>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800162c:	bf00      	nop
  }
  while (Delay --);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	60fa      	str	r2, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f9      	bne.n	800162c <RCC_Delay+0x1c>
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000000 	.word	0x20000000
 8001648:	10624dd3 	.word	0x10624dd3

0800164c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e041      	b.n	80016e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe ff76 	bl	8000564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3304      	adds	r3, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4610      	mov	r0, r2
 800168c:	f000 faa6 	bl	8001bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d001      	beq.n	8001704 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <HAL_TIM_Base_Start+0x88>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00e      	beq.n	8001734 <HAL_TIM_Base_Start+0x48>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800171e:	d009      	beq.n	8001734 <HAL_TIM_Base_Start+0x48>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <HAL_TIM_Base_Start+0x8c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d004      	beq.n	8001734 <HAL_TIM_Base_Start+0x48>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <HAL_TIM_Base_Start+0x90>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d111      	bne.n	8001758 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b06      	cmp	r3, #6
 8001744:	d010      	beq.n	8001768 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001756:	e007      	b.n	8001768 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40012c00 	.word	0x40012c00
 8001778:	40000400 	.word	0x40000400
 800177c:	40000800 	.word	0x40000800

08001780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d001      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e03a      	b.n	800180e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <HAL_TIM_Base_Start_IT+0x98>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00e      	beq.n	80017d8 <HAL_TIM_Base_Start_IT+0x58>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c2:	d009      	beq.n	80017d8 <HAL_TIM_Base_Start_IT+0x58>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_TIM_Base_Start_IT+0x9c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d004      	beq.n	80017d8 <HAL_TIM_Base_Start_IT+0x58>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a13      	ldr	r2, [pc, #76]	@ (8001820 <HAL_TIM_Base_Start_IT+0xa0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d111      	bne.n	80017fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d010      	beq.n	800180c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017fa:	e007      	b.n	800180c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40000400 	.word	0x40000400
 8001820:	40000800 	.word	0x40000800

08001824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d020      	beq.n	8001888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0202 	mvn.w	r2, #2
 8001858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f998 	bl	8001ba4 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f98b 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f99a 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d020      	beq.n	80018d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0204 	mvn.w	r2, #4
 80018a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f972 	bl	8001ba4 <HAL_TIM_IC_CaptureCallback>
 80018c0:	e005      	b.n	80018ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f965 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f974 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d020      	beq.n	8001920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01b      	beq.n	8001920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0208 	mvn.w	r2, #8
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f94c 	bl	8001ba4 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f93f 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f94e 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d020      	beq.n	800196c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0210 	mvn.w	r2, #16
 800193c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2208      	movs	r2, #8
 8001942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f926 	bl	8001ba4 <HAL_TIM_IC_CaptureCallback>
 8001958:	e005      	b.n	8001966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f919 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f928 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f06f 0201 	mvn.w	r2, #1
 8001988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fbf8 	bl	8000180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80019ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa7f 	bl	8001eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80019d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8f8 	bl	8001bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0220 	mvn.w	r2, #32
 80019f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fa52 	bl	8001ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_TIM_ConfigClockSource+0x1c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0b4      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x186>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a58:	d03e      	beq.n	8001ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8001a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a5e:	f200 8087 	bhi.w	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a66:	f000 8086 	beq.w	8001b76 <HAL_TIM_ConfigClockSource+0x172>
 8001a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a6e:	d87f      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a70:	2b70      	cmp	r3, #112	@ 0x70
 8001a72:	d01a      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0xa6>
 8001a74:	2b70      	cmp	r3, #112	@ 0x70
 8001a76:	d87b      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a78:	2b60      	cmp	r3, #96	@ 0x60
 8001a7a:	d050      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0x11a>
 8001a7c:	2b60      	cmp	r3, #96	@ 0x60
 8001a7e:	d877      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a80:	2b50      	cmp	r3, #80	@ 0x50
 8001a82:	d03c      	beq.n	8001afe <HAL_TIM_ConfigClockSource+0xfa>
 8001a84:	2b50      	cmp	r3, #80	@ 0x50
 8001a86:	d873      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a88:	2b40      	cmp	r3, #64	@ 0x40
 8001a8a:	d058      	beq.n	8001b3e <HAL_TIM_ConfigClockSource+0x13a>
 8001a8c:	2b40      	cmp	r3, #64	@ 0x40
 8001a8e:	d86f      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a90:	2b30      	cmp	r3, #48	@ 0x30
 8001a92:	d064      	beq.n	8001b5e <HAL_TIM_ConfigClockSource+0x15a>
 8001a94:	2b30      	cmp	r3, #48	@ 0x30
 8001a96:	d86b      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d060      	beq.n	8001b5e <HAL_TIM_ConfigClockSource+0x15a>
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d867      	bhi.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05c      	beq.n	8001b5e <HAL_TIM_ConfigClockSource+0x15a>
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d05a      	beq.n	8001b5e <HAL_TIM_ConfigClockSource+0x15a>
 8001aa8:	e062      	b.n	8001b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001aba:	f000 f974 	bl	8001da6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	609a      	str	r2, [r3, #8]
      break;
 8001ad6:	e04f      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ae8:	f000 f95d 	bl	8001da6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001afa:	609a      	str	r2, [r3, #8]
      break;
 8001afc:	e03c      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f000 f8d4 	bl	8001cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2150      	movs	r1, #80	@ 0x50
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f92b 	bl	8001d72 <TIM_ITRx_SetConfig>
      break;
 8001b1c:	e02c      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f000 f8f2 	bl	8001d14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2160      	movs	r1, #96	@ 0x60
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f91b 	bl	8001d72 <TIM_ITRx_SetConfig>
      break;
 8001b3c:	e01c      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f000 f8b4 	bl	8001cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2140      	movs	r1, #64	@ 0x40
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f90b 	bl	8001d72 <TIM_ITRx_SetConfig>
      break;
 8001b5c:	e00c      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f000 f902 	bl	8001d72 <TIM_ITRx_SetConfig>
      break;
 8001b6e:	e003      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
      break;
 8001b74:	e000      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
	...

08001bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a2f      	ldr	r2, [pc, #188]	@ (8001cac <TIM_Base_SetConfig+0xd0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00b      	beq.n	8001c0c <TIM_Base_SetConfig+0x30>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfa:	d007      	beq.n	8001c0c <TIM_Base_SetConfig+0x30>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb0 <TIM_Base_SetConfig+0xd4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <TIM_Base_SetConfig+0x30>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb4 <TIM_Base_SetConfig+0xd8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a22      	ldr	r2, [pc, #136]	@ (8001cac <TIM_Base_SetConfig+0xd0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00b      	beq.n	8001c3e <TIM_Base_SetConfig+0x62>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2c:	d007      	beq.n	8001c3e <TIM_Base_SetConfig+0x62>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb0 <TIM_Base_SetConfig+0xd4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d003      	beq.n	8001c3e <TIM_Base_SetConfig+0x62>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <TIM_Base_SetConfig+0xd8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d108      	bne.n	8001c50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <TIM_Base_SetConfig+0xd0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d103      	bne.n	8001c84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f023 0201 	bic.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f023 0201 	bic.w	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f023 030a 	bic.w	r3, r3, #10
 8001cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	621a      	str	r2, [r3, #32]
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f023 0210 	bic.w	r2, r3, #16
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	621a      	str	r2, [r3, #32]
}
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f043 0307 	orr.w	r3, r3, #7
 8001d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001dc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	021a      	lsls	r2, r3, #8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	609a      	str	r2, [r3, #8]
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e046      	b.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e48:	d009      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a10      	ldr	r2, [pc, #64]	@ (8001e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10c      	bne.n	8001e78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e042      	b.n	8001f5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fb92 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	@ 0x24
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f971 	bl	80021f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d175      	bne.n	8002070 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_UART_Transmit+0x2c>
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e06e      	b.n	8002072 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2221      	movs	r2, #33	@ 0x21
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fa2:	f7fe fc6d 	bl	8000880 <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fbc:	d108      	bne.n	8001fd0 <HAL_UART_Transmit+0x6c>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	e003      	b.n	8001fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fd8:	e02e      	b.n	8002038 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f848 	bl	800207a <UART_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e03a      	b.n	8002072 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3302      	adds	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	e007      	b.n	800202a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3301      	adds	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1cb      	bne.n	8001fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	@ 0x40
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f814 	bl	800207a <UART_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e006      	b.n	8002072 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208a:	e03b      	b.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d037      	beq.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7fe fbf4 	bl	8000880 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	6a3a      	ldr	r2, [r7, #32]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <UART_WaitOnFlagUntilTimeout+0x30>
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e03a      	b.n	8002124 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b80      	cmp	r3, #128	@ 0x80
 80020c0:	d020      	beq.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	d01d      	beq.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d116      	bne.n	8002104 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f81d 	bl	800212c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2208      	movs	r2, #8
 80020f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e00f      	b.n	8002124 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4013      	ands	r3, r2
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	429a      	cmp	r2, r3
 8002120:	d0b4      	beq.n	800208c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800212c:	b480      	push	{r7}
 800212e:	b095      	sub	sp, #84	@ 0x54
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	330c      	adds	r3, #12
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213e:	e853 3f00 	ldrex	r3, [r3]
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800214a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	330c      	adds	r3, #12
 8002152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002154:	643a      	str	r2, [r7, #64]	@ 0x40
 8002156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800215a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800215c:	e841 2300 	strex	r3, r2, [r1]
 8002160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e5      	bne.n	8002134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	e853 3f00 	ldrex	r3, [r3]
 8002176:	61fb      	str	r3, [r7, #28]
   return(result);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3314      	adds	r3, #20
 8002186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800218e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002190:	e841 2300 	strex	r3, r2, [r1]
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e5      	bne.n	8002168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d119      	bne.n	80021d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	e853 3f00 	ldrex	r3, [r3]
 80021b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f023 0310 	bic.w	r3, r3, #16
 80021ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021c4:	61ba      	str	r2, [r7, #24]
 80021c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c8:	6979      	ldr	r1, [r7, #20]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	613b      	str	r3, [r7, #16]
   return(result);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e5      	bne.n	80021a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021e6:	bf00      	nop
 80021e8:	3754      	adds	r7, #84	@ 0x54
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800222a:	f023 030c 	bic.w	r3, r3, #12
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	430b      	orrs	r3, r1
 8002236:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <UART_SetConfig+0x114>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002258:	f7ff f9c6 	bl	80015e8 <HAL_RCC_GetPCLK2Freq>
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	e002      	b.n	8002266 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002260:	f7ff f9ae 	bl	80015c0 <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <UART_SetConfig+0x118>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	0119      	lsls	r1, r3, #4
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f2f3 	udiv	r2, r2, r3
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <UART_SetConfig+0x118>)
 800229e:	fba3 0302 	umull	r0, r3, r3, r2
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2064      	movs	r0, #100	@ 0x64
 80022a6:	fb00 f303 	mul.w	r3, r0, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	@ 0x32
 80022b0:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <UART_SetConfig+0x118>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022bc:	4419      	add	r1, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009a      	lsls	r2, r3, #2
 80022c8:	441a      	add	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <UART_SetConfig+0x118>)
 80022d6:	fba3 0302 	umull	r0, r3, r3, r2
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2064      	movs	r0, #100	@ 0x64
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	3332      	adds	r3, #50	@ 0x32
 80022e8:	4a07      	ldr	r2, [pc, #28]	@ (8002308 <UART_SetConfig+0x118>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	440a      	add	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40013800 	.word	0x40013800
 8002308:	51eb851f 	.word	0x51eb851f

0800230c <siprintf>:
 800230c:	b40e      	push	{r1, r2, r3}
 800230e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002312:	b500      	push	{lr}
 8002314:	b09c      	sub	sp, #112	@ 0x70
 8002316:	ab1d      	add	r3, sp, #116	@ 0x74
 8002318:	9002      	str	r0, [sp, #8]
 800231a:	9006      	str	r0, [sp, #24]
 800231c:	9107      	str	r1, [sp, #28]
 800231e:	9104      	str	r1, [sp, #16]
 8002320:	4808      	ldr	r0, [pc, #32]	@ (8002344 <siprintf+0x38>)
 8002322:	4909      	ldr	r1, [pc, #36]	@ (8002348 <siprintf+0x3c>)
 8002324:	f853 2b04 	ldr.w	r2, [r3], #4
 8002328:	9105      	str	r1, [sp, #20]
 800232a:	6800      	ldr	r0, [r0, #0]
 800232c:	a902      	add	r1, sp, #8
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	f000 f992 	bl	8002658 <_svfiprintf_r>
 8002334:	2200      	movs	r2, #0
 8002336:	9b02      	ldr	r3, [sp, #8]
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	b01c      	add	sp, #112	@ 0x70
 800233c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002340:	b003      	add	sp, #12
 8002342:	4770      	bx	lr
 8002344:	2000000c 	.word	0x2000000c
 8002348:	ffff0208 	.word	0xffff0208

0800234c <memset>:
 800234c:	4603      	mov	r3, r0
 800234e:	4402      	add	r2, r0
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <memset+0xa>
 8002354:	4770      	bx	lr
 8002356:	f803 1b01 	strb.w	r1, [r3], #1
 800235a:	e7f9      	b.n	8002350 <memset+0x4>

0800235c <__errno>:
 800235c:	4b01      	ldr	r3, [pc, #4]	@ (8002364 <__errno+0x8>)
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000000c 	.word	0x2000000c

08002368 <__libc_init_array>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	2600      	movs	r6, #0
 800236c:	4d0c      	ldr	r5, [pc, #48]	@ (80023a0 <__libc_init_array+0x38>)
 800236e:	4c0d      	ldr	r4, [pc, #52]	@ (80023a4 <__libc_init_array+0x3c>)
 8002370:	1b64      	subs	r4, r4, r5
 8002372:	10a4      	asrs	r4, r4, #2
 8002374:	42a6      	cmp	r6, r4
 8002376:	d109      	bne.n	800238c <__libc_init_array+0x24>
 8002378:	f000 fc78 	bl	8002c6c <_init>
 800237c:	2600      	movs	r6, #0
 800237e:	4d0a      	ldr	r5, [pc, #40]	@ (80023a8 <__libc_init_array+0x40>)
 8002380:	4c0a      	ldr	r4, [pc, #40]	@ (80023ac <__libc_init_array+0x44>)
 8002382:	1b64      	subs	r4, r4, r5
 8002384:	10a4      	asrs	r4, r4, #2
 8002386:	42a6      	cmp	r6, r4
 8002388:	d105      	bne.n	8002396 <__libc_init_array+0x2e>
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002390:	4798      	blx	r3
 8002392:	3601      	adds	r6, #1
 8002394:	e7ee      	b.n	8002374 <__libc_init_array+0xc>
 8002396:	f855 3b04 	ldr.w	r3, [r5], #4
 800239a:	4798      	blx	r3
 800239c:	3601      	adds	r6, #1
 800239e:	e7f2      	b.n	8002386 <__libc_init_array+0x1e>
 80023a0:	08002cfc 	.word	0x08002cfc
 80023a4:	08002cfc 	.word	0x08002cfc
 80023a8:	08002cfc 	.word	0x08002cfc
 80023ac:	08002d00 	.word	0x08002d00

080023b0 <__retarget_lock_acquire_recursive>:
 80023b0:	4770      	bx	lr

080023b2 <__retarget_lock_release_recursive>:
 80023b2:	4770      	bx	lr

080023b4 <_free_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4605      	mov	r5, r0
 80023b8:	2900      	cmp	r1, #0
 80023ba:	d040      	beq.n	800243e <_free_r+0x8a>
 80023bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c0:	1f0c      	subs	r4, r1, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bfb8      	it	lt
 80023c6:	18e4      	addlt	r4, r4, r3
 80023c8:	f000 f8de 	bl	8002588 <__malloc_lock>
 80023cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002440 <_free_r+0x8c>)
 80023ce:	6813      	ldr	r3, [r2, #0]
 80023d0:	b933      	cbnz	r3, 80023e0 <_free_r+0x2c>
 80023d2:	6063      	str	r3, [r4, #4]
 80023d4:	6014      	str	r4, [r2, #0]
 80023d6:	4628      	mov	r0, r5
 80023d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023dc:	f000 b8da 	b.w	8002594 <__malloc_unlock>
 80023e0:	42a3      	cmp	r3, r4
 80023e2:	d908      	bls.n	80023f6 <_free_r+0x42>
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	1821      	adds	r1, r4, r0
 80023e8:	428b      	cmp	r3, r1
 80023ea:	bf01      	itttt	eq
 80023ec:	6819      	ldreq	r1, [r3, #0]
 80023ee:	685b      	ldreq	r3, [r3, #4]
 80023f0:	1809      	addeq	r1, r1, r0
 80023f2:	6021      	streq	r1, [r4, #0]
 80023f4:	e7ed      	b.n	80023d2 <_free_r+0x1e>
 80023f6:	461a      	mov	r2, r3
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	b10b      	cbz	r3, 8002400 <_free_r+0x4c>
 80023fc:	42a3      	cmp	r3, r4
 80023fe:	d9fa      	bls.n	80023f6 <_free_r+0x42>
 8002400:	6811      	ldr	r1, [r2, #0]
 8002402:	1850      	adds	r0, r2, r1
 8002404:	42a0      	cmp	r0, r4
 8002406:	d10b      	bne.n	8002420 <_free_r+0x6c>
 8002408:	6820      	ldr	r0, [r4, #0]
 800240a:	4401      	add	r1, r0
 800240c:	1850      	adds	r0, r2, r1
 800240e:	4283      	cmp	r3, r0
 8002410:	6011      	str	r1, [r2, #0]
 8002412:	d1e0      	bne.n	80023d6 <_free_r+0x22>
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4408      	add	r0, r1
 800241a:	6010      	str	r0, [r2, #0]
 800241c:	6053      	str	r3, [r2, #4]
 800241e:	e7da      	b.n	80023d6 <_free_r+0x22>
 8002420:	d902      	bls.n	8002428 <_free_r+0x74>
 8002422:	230c      	movs	r3, #12
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	e7d6      	b.n	80023d6 <_free_r+0x22>
 8002428:	6820      	ldr	r0, [r4, #0]
 800242a:	1821      	adds	r1, r4, r0
 800242c:	428b      	cmp	r3, r1
 800242e:	bf01      	itttt	eq
 8002430:	6819      	ldreq	r1, [r3, #0]
 8002432:	685b      	ldreq	r3, [r3, #4]
 8002434:	1809      	addeq	r1, r1, r0
 8002436:	6021      	streq	r1, [r4, #0]
 8002438:	6063      	str	r3, [r4, #4]
 800243a:	6054      	str	r4, [r2, #4]
 800243c:	e7cb      	b.n	80023d6 <_free_r+0x22>
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	200002cc 	.word	0x200002cc

08002444 <sbrk_aligned>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4e0f      	ldr	r6, [pc, #60]	@ (8002484 <sbrk_aligned+0x40>)
 8002448:	460c      	mov	r4, r1
 800244a:	6831      	ldr	r1, [r6, #0]
 800244c:	4605      	mov	r5, r0
 800244e:	b911      	cbnz	r1, 8002456 <sbrk_aligned+0x12>
 8002450:	f000 fbaa 	bl	8002ba8 <_sbrk_r>
 8002454:	6030      	str	r0, [r6, #0]
 8002456:	4621      	mov	r1, r4
 8002458:	4628      	mov	r0, r5
 800245a:	f000 fba5 	bl	8002ba8 <_sbrk_r>
 800245e:	1c43      	adds	r3, r0, #1
 8002460:	d103      	bne.n	800246a <sbrk_aligned+0x26>
 8002462:	f04f 34ff 	mov.w	r4, #4294967295
 8002466:	4620      	mov	r0, r4
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	1cc4      	adds	r4, r0, #3
 800246c:	f024 0403 	bic.w	r4, r4, #3
 8002470:	42a0      	cmp	r0, r4
 8002472:	d0f8      	beq.n	8002466 <sbrk_aligned+0x22>
 8002474:	1a21      	subs	r1, r4, r0
 8002476:	4628      	mov	r0, r5
 8002478:	f000 fb96 	bl	8002ba8 <_sbrk_r>
 800247c:	3001      	adds	r0, #1
 800247e:	d1f2      	bne.n	8002466 <sbrk_aligned+0x22>
 8002480:	e7ef      	b.n	8002462 <sbrk_aligned+0x1e>
 8002482:	bf00      	nop
 8002484:	200002c8 	.word	0x200002c8

08002488 <_malloc_r>:
 8002488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800248c:	1ccd      	adds	r5, r1, #3
 800248e:	f025 0503 	bic.w	r5, r5, #3
 8002492:	3508      	adds	r5, #8
 8002494:	2d0c      	cmp	r5, #12
 8002496:	bf38      	it	cc
 8002498:	250c      	movcc	r5, #12
 800249a:	2d00      	cmp	r5, #0
 800249c:	4606      	mov	r6, r0
 800249e:	db01      	blt.n	80024a4 <_malloc_r+0x1c>
 80024a0:	42a9      	cmp	r1, r5
 80024a2:	d904      	bls.n	80024ae <_malloc_r+0x26>
 80024a4:	230c      	movs	r3, #12
 80024a6:	6033      	str	r3, [r6, #0]
 80024a8:	2000      	movs	r0, #0
 80024aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002584 <_malloc_r+0xfc>
 80024b2:	f000 f869 	bl	8002588 <__malloc_lock>
 80024b6:	f8d8 3000 	ldr.w	r3, [r8]
 80024ba:	461c      	mov	r4, r3
 80024bc:	bb44      	cbnz	r4, 8002510 <_malloc_r+0x88>
 80024be:	4629      	mov	r1, r5
 80024c0:	4630      	mov	r0, r6
 80024c2:	f7ff ffbf 	bl	8002444 <sbrk_aligned>
 80024c6:	1c43      	adds	r3, r0, #1
 80024c8:	4604      	mov	r4, r0
 80024ca:	d158      	bne.n	800257e <_malloc_r+0xf6>
 80024cc:	f8d8 4000 	ldr.w	r4, [r8]
 80024d0:	4627      	mov	r7, r4
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	d143      	bne.n	800255e <_malloc_r+0xd6>
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d04b      	beq.n	8002572 <_malloc_r+0xea>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	4639      	mov	r1, r7
 80024de:	4630      	mov	r0, r6
 80024e0:	eb04 0903 	add.w	r9, r4, r3
 80024e4:	f000 fb60 	bl	8002ba8 <_sbrk_r>
 80024e8:	4581      	cmp	r9, r0
 80024ea:	d142      	bne.n	8002572 <_malloc_r+0xea>
 80024ec:	6821      	ldr	r1, [r4, #0]
 80024ee:	4630      	mov	r0, r6
 80024f0:	1a6d      	subs	r5, r5, r1
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7ff ffa6 	bl	8002444 <sbrk_aligned>
 80024f8:	3001      	adds	r0, #1
 80024fa:	d03a      	beq.n	8002572 <_malloc_r+0xea>
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	442b      	add	r3, r5
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	f8d8 3000 	ldr.w	r3, [r8]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	bb62      	cbnz	r2, 8002564 <_malloc_r+0xdc>
 800250a:	f8c8 7000 	str.w	r7, [r8]
 800250e:	e00f      	b.n	8002530 <_malloc_r+0xa8>
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	1b52      	subs	r2, r2, r5
 8002514:	d420      	bmi.n	8002558 <_malloc_r+0xd0>
 8002516:	2a0b      	cmp	r2, #11
 8002518:	d917      	bls.n	800254a <_malloc_r+0xc2>
 800251a:	1961      	adds	r1, r4, r5
 800251c:	42a3      	cmp	r3, r4
 800251e:	6025      	str	r5, [r4, #0]
 8002520:	bf18      	it	ne
 8002522:	6059      	strne	r1, [r3, #4]
 8002524:	6863      	ldr	r3, [r4, #4]
 8002526:	bf08      	it	eq
 8002528:	f8c8 1000 	streq.w	r1, [r8]
 800252c:	5162      	str	r2, [r4, r5]
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	4630      	mov	r0, r6
 8002532:	f000 f82f 	bl	8002594 <__malloc_unlock>
 8002536:	f104 000b 	add.w	r0, r4, #11
 800253a:	1d23      	adds	r3, r4, #4
 800253c:	f020 0007 	bic.w	r0, r0, #7
 8002540:	1ac2      	subs	r2, r0, r3
 8002542:	bf1c      	itt	ne
 8002544:	1a1b      	subne	r3, r3, r0
 8002546:	50a3      	strne	r3, [r4, r2]
 8002548:	e7af      	b.n	80024aa <_malloc_r+0x22>
 800254a:	6862      	ldr	r2, [r4, #4]
 800254c:	42a3      	cmp	r3, r4
 800254e:	bf0c      	ite	eq
 8002550:	f8c8 2000 	streq.w	r2, [r8]
 8002554:	605a      	strne	r2, [r3, #4]
 8002556:	e7eb      	b.n	8002530 <_malloc_r+0xa8>
 8002558:	4623      	mov	r3, r4
 800255a:	6864      	ldr	r4, [r4, #4]
 800255c:	e7ae      	b.n	80024bc <_malloc_r+0x34>
 800255e:	463c      	mov	r4, r7
 8002560:	687f      	ldr	r7, [r7, #4]
 8002562:	e7b6      	b.n	80024d2 <_malloc_r+0x4a>
 8002564:	461a      	mov	r2, r3
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	42a3      	cmp	r3, r4
 800256a:	d1fb      	bne.n	8002564 <_malloc_r+0xdc>
 800256c:	2300      	movs	r3, #0
 800256e:	6053      	str	r3, [r2, #4]
 8002570:	e7de      	b.n	8002530 <_malloc_r+0xa8>
 8002572:	230c      	movs	r3, #12
 8002574:	4630      	mov	r0, r6
 8002576:	6033      	str	r3, [r6, #0]
 8002578:	f000 f80c 	bl	8002594 <__malloc_unlock>
 800257c:	e794      	b.n	80024a8 <_malloc_r+0x20>
 800257e:	6005      	str	r5, [r0, #0]
 8002580:	e7d6      	b.n	8002530 <_malloc_r+0xa8>
 8002582:	bf00      	nop
 8002584:	200002cc 	.word	0x200002cc

08002588 <__malloc_lock>:
 8002588:	4801      	ldr	r0, [pc, #4]	@ (8002590 <__malloc_lock+0x8>)
 800258a:	f7ff bf11 	b.w	80023b0 <__retarget_lock_acquire_recursive>
 800258e:	bf00      	nop
 8002590:	200002c4 	.word	0x200002c4

08002594 <__malloc_unlock>:
 8002594:	4801      	ldr	r0, [pc, #4]	@ (800259c <__malloc_unlock+0x8>)
 8002596:	f7ff bf0c 	b.w	80023b2 <__retarget_lock_release_recursive>
 800259a:	bf00      	nop
 800259c:	200002c4 	.word	0x200002c4

080025a0 <__ssputs_r>:
 80025a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a4:	461f      	mov	r7, r3
 80025a6:	688e      	ldr	r6, [r1, #8]
 80025a8:	4682      	mov	sl, r0
 80025aa:	42be      	cmp	r6, r7
 80025ac:	460c      	mov	r4, r1
 80025ae:	4690      	mov	r8, r2
 80025b0:	680b      	ldr	r3, [r1, #0]
 80025b2:	d82d      	bhi.n	8002610 <__ssputs_r+0x70>
 80025b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80025bc:	d026      	beq.n	800260c <__ssputs_r+0x6c>
 80025be:	6965      	ldr	r5, [r4, #20]
 80025c0:	6909      	ldr	r1, [r1, #16]
 80025c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025c6:	eba3 0901 	sub.w	r9, r3, r1
 80025ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025ce:	1c7b      	adds	r3, r7, #1
 80025d0:	444b      	add	r3, r9
 80025d2:	106d      	asrs	r5, r5, #1
 80025d4:	429d      	cmp	r5, r3
 80025d6:	bf38      	it	cc
 80025d8:	461d      	movcc	r5, r3
 80025da:	0553      	lsls	r3, r2, #21
 80025dc:	d527      	bpl.n	800262e <__ssputs_r+0x8e>
 80025de:	4629      	mov	r1, r5
 80025e0:	f7ff ff52 	bl	8002488 <_malloc_r>
 80025e4:	4606      	mov	r6, r0
 80025e6:	b360      	cbz	r0, 8002642 <__ssputs_r+0xa2>
 80025e8:	464a      	mov	r2, r9
 80025ea:	6921      	ldr	r1, [r4, #16]
 80025ec:	f000 fafa 	bl	8002be4 <memcpy>
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80025f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fa:	81a3      	strh	r3, [r4, #12]
 80025fc:	6126      	str	r6, [r4, #16]
 80025fe:	444e      	add	r6, r9
 8002600:	6026      	str	r6, [r4, #0]
 8002602:	463e      	mov	r6, r7
 8002604:	6165      	str	r5, [r4, #20]
 8002606:	eba5 0509 	sub.w	r5, r5, r9
 800260a:	60a5      	str	r5, [r4, #8]
 800260c:	42be      	cmp	r6, r7
 800260e:	d900      	bls.n	8002612 <__ssputs_r+0x72>
 8002610:	463e      	mov	r6, r7
 8002612:	4632      	mov	r2, r6
 8002614:	4641      	mov	r1, r8
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f000 faac 	bl	8002b74 <memmove>
 800261c:	2000      	movs	r0, #0
 800261e:	68a3      	ldr	r3, [r4, #8]
 8002620:	1b9b      	subs	r3, r3, r6
 8002622:	60a3      	str	r3, [r4, #8]
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	4433      	add	r3, r6
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800262e:	462a      	mov	r2, r5
 8002630:	f000 fae6 	bl	8002c00 <_realloc_r>
 8002634:	4606      	mov	r6, r0
 8002636:	2800      	cmp	r0, #0
 8002638:	d1e0      	bne.n	80025fc <__ssputs_r+0x5c>
 800263a:	4650      	mov	r0, sl
 800263c:	6921      	ldr	r1, [r4, #16]
 800263e:	f7ff feb9 	bl	80023b4 <_free_r>
 8002642:	230c      	movs	r3, #12
 8002644:	f8ca 3000 	str.w	r3, [sl]
 8002648:	89a3      	ldrh	r3, [r4, #12]
 800264a:	f04f 30ff 	mov.w	r0, #4294967295
 800264e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002652:	81a3      	strh	r3, [r4, #12]
 8002654:	e7e9      	b.n	800262a <__ssputs_r+0x8a>
	...

08002658 <_svfiprintf_r>:
 8002658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265c:	4698      	mov	r8, r3
 800265e:	898b      	ldrh	r3, [r1, #12]
 8002660:	4607      	mov	r7, r0
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	460d      	mov	r5, r1
 8002666:	4614      	mov	r4, r2
 8002668:	b09d      	sub	sp, #116	@ 0x74
 800266a:	d510      	bpl.n	800268e <_svfiprintf_r+0x36>
 800266c:	690b      	ldr	r3, [r1, #16]
 800266e:	b973      	cbnz	r3, 800268e <_svfiprintf_r+0x36>
 8002670:	2140      	movs	r1, #64	@ 0x40
 8002672:	f7ff ff09 	bl	8002488 <_malloc_r>
 8002676:	6028      	str	r0, [r5, #0]
 8002678:	6128      	str	r0, [r5, #16]
 800267a:	b930      	cbnz	r0, 800268a <_svfiprintf_r+0x32>
 800267c:	230c      	movs	r3, #12
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	b01d      	add	sp, #116	@ 0x74
 8002686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268a:	2340      	movs	r3, #64	@ 0x40
 800268c:	616b      	str	r3, [r5, #20]
 800268e:	2300      	movs	r3, #0
 8002690:	9309      	str	r3, [sp, #36]	@ 0x24
 8002692:	2320      	movs	r3, #32
 8002694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002698:	2330      	movs	r3, #48	@ 0x30
 800269a:	f04f 0901 	mov.w	r9, #1
 800269e:	f8cd 800c 	str.w	r8, [sp, #12]
 80026a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800283c <_svfiprintf_r+0x1e4>
 80026a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026aa:	4623      	mov	r3, r4
 80026ac:	469a      	mov	sl, r3
 80026ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026b2:	b10a      	cbz	r2, 80026b8 <_svfiprintf_r+0x60>
 80026b4:	2a25      	cmp	r2, #37	@ 0x25
 80026b6:	d1f9      	bne.n	80026ac <_svfiprintf_r+0x54>
 80026b8:	ebba 0b04 	subs.w	fp, sl, r4
 80026bc:	d00b      	beq.n	80026d6 <_svfiprintf_r+0x7e>
 80026be:	465b      	mov	r3, fp
 80026c0:	4622      	mov	r2, r4
 80026c2:	4629      	mov	r1, r5
 80026c4:	4638      	mov	r0, r7
 80026c6:	f7ff ff6b 	bl	80025a0 <__ssputs_r>
 80026ca:	3001      	adds	r0, #1
 80026cc:	f000 80a7 	beq.w	800281e <_svfiprintf_r+0x1c6>
 80026d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026d2:	445a      	add	r2, fp
 80026d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80026d6:	f89a 3000 	ldrb.w	r3, [sl]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 809f 	beq.w	800281e <_svfiprintf_r+0x1c6>
 80026e0:	2300      	movs	r3, #0
 80026e2:	f04f 32ff 	mov.w	r2, #4294967295
 80026e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ea:	f10a 0a01 	add.w	sl, sl, #1
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	9307      	str	r3, [sp, #28]
 80026f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80026f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80026f8:	4654      	mov	r4, sl
 80026fa:	2205      	movs	r2, #5
 80026fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002700:	484e      	ldr	r0, [pc, #312]	@ (800283c <_svfiprintf_r+0x1e4>)
 8002702:	f000 fa61 	bl	8002bc8 <memchr>
 8002706:	9a04      	ldr	r2, [sp, #16]
 8002708:	b9d8      	cbnz	r0, 8002742 <_svfiprintf_r+0xea>
 800270a:	06d0      	lsls	r0, r2, #27
 800270c:	bf44      	itt	mi
 800270e:	2320      	movmi	r3, #32
 8002710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002714:	0711      	lsls	r1, r2, #28
 8002716:	bf44      	itt	mi
 8002718:	232b      	movmi	r3, #43	@ 0x2b
 800271a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800271e:	f89a 3000 	ldrb.w	r3, [sl]
 8002722:	2b2a      	cmp	r3, #42	@ 0x2a
 8002724:	d015      	beq.n	8002752 <_svfiprintf_r+0xfa>
 8002726:	4654      	mov	r4, sl
 8002728:	2000      	movs	r0, #0
 800272a:	f04f 0c0a 	mov.w	ip, #10
 800272e:	9a07      	ldr	r2, [sp, #28]
 8002730:	4621      	mov	r1, r4
 8002732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002736:	3b30      	subs	r3, #48	@ 0x30
 8002738:	2b09      	cmp	r3, #9
 800273a:	d94b      	bls.n	80027d4 <_svfiprintf_r+0x17c>
 800273c:	b1b0      	cbz	r0, 800276c <_svfiprintf_r+0x114>
 800273e:	9207      	str	r2, [sp, #28]
 8002740:	e014      	b.n	800276c <_svfiprintf_r+0x114>
 8002742:	eba0 0308 	sub.w	r3, r0, r8
 8002746:	fa09 f303 	lsl.w	r3, r9, r3
 800274a:	4313      	orrs	r3, r2
 800274c:	46a2      	mov	sl, r4
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	e7d2      	b.n	80026f8 <_svfiprintf_r+0xa0>
 8002752:	9b03      	ldr	r3, [sp, #12]
 8002754:	1d19      	adds	r1, r3, #4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	9103      	str	r1, [sp, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	bfbb      	ittet	lt
 800275e:	425b      	neglt	r3, r3
 8002760:	f042 0202 	orrlt.w	r2, r2, #2
 8002764:	9307      	strge	r3, [sp, #28]
 8002766:	9307      	strlt	r3, [sp, #28]
 8002768:	bfb8      	it	lt
 800276a:	9204      	strlt	r2, [sp, #16]
 800276c:	7823      	ldrb	r3, [r4, #0]
 800276e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002770:	d10a      	bne.n	8002788 <_svfiprintf_r+0x130>
 8002772:	7863      	ldrb	r3, [r4, #1]
 8002774:	2b2a      	cmp	r3, #42	@ 0x2a
 8002776:	d132      	bne.n	80027de <_svfiprintf_r+0x186>
 8002778:	9b03      	ldr	r3, [sp, #12]
 800277a:	3402      	adds	r4, #2
 800277c:	1d1a      	adds	r2, r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	9203      	str	r2, [sp, #12]
 8002782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002786:	9305      	str	r3, [sp, #20]
 8002788:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002840 <_svfiprintf_r+0x1e8>
 800278c:	2203      	movs	r2, #3
 800278e:	4650      	mov	r0, sl
 8002790:	7821      	ldrb	r1, [r4, #0]
 8002792:	f000 fa19 	bl	8002bc8 <memchr>
 8002796:	b138      	cbz	r0, 80027a8 <_svfiprintf_r+0x150>
 8002798:	2240      	movs	r2, #64	@ 0x40
 800279a:	9b04      	ldr	r3, [sp, #16]
 800279c:	eba0 000a 	sub.w	r0, r0, sl
 80027a0:	4082      	lsls	r2, r0
 80027a2:	4313      	orrs	r3, r2
 80027a4:	3401      	adds	r4, #1
 80027a6:	9304      	str	r3, [sp, #16]
 80027a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ac:	2206      	movs	r2, #6
 80027ae:	4825      	ldr	r0, [pc, #148]	@ (8002844 <_svfiprintf_r+0x1ec>)
 80027b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027b4:	f000 fa08 	bl	8002bc8 <memchr>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d036      	beq.n	800282a <_svfiprintf_r+0x1d2>
 80027bc:	4b22      	ldr	r3, [pc, #136]	@ (8002848 <_svfiprintf_r+0x1f0>)
 80027be:	bb1b      	cbnz	r3, 8002808 <_svfiprintf_r+0x1b0>
 80027c0:	9b03      	ldr	r3, [sp, #12]
 80027c2:	3307      	adds	r3, #7
 80027c4:	f023 0307 	bic.w	r3, r3, #7
 80027c8:	3308      	adds	r3, #8
 80027ca:	9303      	str	r3, [sp, #12]
 80027cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027ce:	4433      	add	r3, r6
 80027d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80027d2:	e76a      	b.n	80026aa <_svfiprintf_r+0x52>
 80027d4:	460c      	mov	r4, r1
 80027d6:	2001      	movs	r0, #1
 80027d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80027dc:	e7a8      	b.n	8002730 <_svfiprintf_r+0xd8>
 80027de:	2300      	movs	r3, #0
 80027e0:	f04f 0c0a 	mov.w	ip, #10
 80027e4:	4619      	mov	r1, r3
 80027e6:	3401      	adds	r4, #1
 80027e8:	9305      	str	r3, [sp, #20]
 80027ea:	4620      	mov	r0, r4
 80027ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027f0:	3a30      	subs	r2, #48	@ 0x30
 80027f2:	2a09      	cmp	r2, #9
 80027f4:	d903      	bls.n	80027fe <_svfiprintf_r+0x1a6>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0c6      	beq.n	8002788 <_svfiprintf_r+0x130>
 80027fa:	9105      	str	r1, [sp, #20]
 80027fc:	e7c4      	b.n	8002788 <_svfiprintf_r+0x130>
 80027fe:	4604      	mov	r4, r0
 8002800:	2301      	movs	r3, #1
 8002802:	fb0c 2101 	mla	r1, ip, r1, r2
 8002806:	e7f0      	b.n	80027ea <_svfiprintf_r+0x192>
 8002808:	ab03      	add	r3, sp, #12
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	462a      	mov	r2, r5
 800280e:	4638      	mov	r0, r7
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <_svfiprintf_r+0x1f4>)
 8002812:	a904      	add	r1, sp, #16
 8002814:	f3af 8000 	nop.w
 8002818:	1c42      	adds	r2, r0, #1
 800281a:	4606      	mov	r6, r0
 800281c:	d1d6      	bne.n	80027cc <_svfiprintf_r+0x174>
 800281e:	89ab      	ldrh	r3, [r5, #12]
 8002820:	065b      	lsls	r3, r3, #25
 8002822:	f53f af2d 	bmi.w	8002680 <_svfiprintf_r+0x28>
 8002826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002828:	e72c      	b.n	8002684 <_svfiprintf_r+0x2c>
 800282a:	ab03      	add	r3, sp, #12
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	462a      	mov	r2, r5
 8002830:	4638      	mov	r0, r7
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <_svfiprintf_r+0x1f4>)
 8002834:	a904      	add	r1, sp, #16
 8002836:	f000 f87d 	bl	8002934 <_printf_i>
 800283a:	e7ed      	b.n	8002818 <_svfiprintf_r+0x1c0>
 800283c:	08002cc6 	.word	0x08002cc6
 8002840:	08002ccc 	.word	0x08002ccc
 8002844:	08002cd0 	.word	0x08002cd0
 8002848:	00000000 	.word	0x00000000
 800284c:	080025a1 	.word	0x080025a1

08002850 <_printf_common>:
 8002850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	4616      	mov	r6, r2
 8002856:	4698      	mov	r8, r3
 8002858:	688a      	ldr	r2, [r1, #8]
 800285a:	690b      	ldr	r3, [r1, #16]
 800285c:	4607      	mov	r7, r0
 800285e:	4293      	cmp	r3, r2
 8002860:	bfb8      	it	lt
 8002862:	4613      	movlt	r3, r2
 8002864:	6033      	str	r3, [r6, #0]
 8002866:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800286a:	460c      	mov	r4, r1
 800286c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002870:	b10a      	cbz	r2, 8002876 <_printf_common+0x26>
 8002872:	3301      	adds	r3, #1
 8002874:	6033      	str	r3, [r6, #0]
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	0699      	lsls	r1, r3, #26
 800287a:	bf42      	ittt	mi
 800287c:	6833      	ldrmi	r3, [r6, #0]
 800287e:	3302      	addmi	r3, #2
 8002880:	6033      	strmi	r3, [r6, #0]
 8002882:	6825      	ldr	r5, [r4, #0]
 8002884:	f015 0506 	ands.w	r5, r5, #6
 8002888:	d106      	bne.n	8002898 <_printf_common+0x48>
 800288a:	f104 0a19 	add.w	sl, r4, #25
 800288e:	68e3      	ldr	r3, [r4, #12]
 8002890:	6832      	ldr	r2, [r6, #0]
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	42ab      	cmp	r3, r5
 8002896:	dc2b      	bgt.n	80028f0 <_printf_common+0xa0>
 8002898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800289c:	6822      	ldr	r2, [r4, #0]
 800289e:	3b00      	subs	r3, #0
 80028a0:	bf18      	it	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	0692      	lsls	r2, r2, #26
 80028a6:	d430      	bmi.n	800290a <_printf_common+0xba>
 80028a8:	4641      	mov	r1, r8
 80028aa:	4638      	mov	r0, r7
 80028ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80028b0:	47c8      	blx	r9
 80028b2:	3001      	adds	r0, #1
 80028b4:	d023      	beq.n	80028fe <_printf_common+0xae>
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	6922      	ldr	r2, [r4, #16]
 80028ba:	f003 0306 	and.w	r3, r3, #6
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf14      	ite	ne
 80028c2:	2500      	movne	r5, #0
 80028c4:	6833      	ldreq	r3, [r6, #0]
 80028c6:	f04f 0600 	mov.w	r6, #0
 80028ca:	bf08      	it	eq
 80028cc:	68e5      	ldreq	r5, [r4, #12]
 80028ce:	f104 041a 	add.w	r4, r4, #26
 80028d2:	bf08      	it	eq
 80028d4:	1aed      	subeq	r5, r5, r3
 80028d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80028da:	bf08      	it	eq
 80028dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028e0:	4293      	cmp	r3, r2
 80028e2:	bfc4      	itt	gt
 80028e4:	1a9b      	subgt	r3, r3, r2
 80028e6:	18ed      	addgt	r5, r5, r3
 80028e8:	42b5      	cmp	r5, r6
 80028ea:	d11a      	bne.n	8002922 <_printf_common+0xd2>
 80028ec:	2000      	movs	r0, #0
 80028ee:	e008      	b.n	8002902 <_printf_common+0xb2>
 80028f0:	2301      	movs	r3, #1
 80028f2:	4652      	mov	r2, sl
 80028f4:	4641      	mov	r1, r8
 80028f6:	4638      	mov	r0, r7
 80028f8:	47c8      	blx	r9
 80028fa:	3001      	adds	r0, #1
 80028fc:	d103      	bne.n	8002906 <_printf_common+0xb6>
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002906:	3501      	adds	r5, #1
 8002908:	e7c1      	b.n	800288e <_printf_common+0x3e>
 800290a:	2030      	movs	r0, #48	@ 0x30
 800290c:	18e1      	adds	r1, r4, r3
 800290e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002918:	4422      	add	r2, r4
 800291a:	3302      	adds	r3, #2
 800291c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002920:	e7c2      	b.n	80028a8 <_printf_common+0x58>
 8002922:	2301      	movs	r3, #1
 8002924:	4622      	mov	r2, r4
 8002926:	4641      	mov	r1, r8
 8002928:	4638      	mov	r0, r7
 800292a:	47c8      	blx	r9
 800292c:	3001      	adds	r0, #1
 800292e:	d0e6      	beq.n	80028fe <_printf_common+0xae>
 8002930:	3601      	adds	r6, #1
 8002932:	e7d9      	b.n	80028e8 <_printf_common+0x98>

08002934 <_printf_i>:
 8002934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	7e0f      	ldrb	r7, [r1, #24]
 800293a:	4691      	mov	r9, r2
 800293c:	2f78      	cmp	r7, #120	@ 0x78
 800293e:	4680      	mov	r8, r0
 8002940:	460c      	mov	r4, r1
 8002942:	469a      	mov	sl, r3
 8002944:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800294a:	d807      	bhi.n	800295c <_printf_i+0x28>
 800294c:	2f62      	cmp	r7, #98	@ 0x62
 800294e:	d80a      	bhi.n	8002966 <_printf_i+0x32>
 8002950:	2f00      	cmp	r7, #0
 8002952:	f000 80d3 	beq.w	8002afc <_printf_i+0x1c8>
 8002956:	2f58      	cmp	r7, #88	@ 0x58
 8002958:	f000 80ba 	beq.w	8002ad0 <_printf_i+0x19c>
 800295c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002964:	e03a      	b.n	80029dc <_printf_i+0xa8>
 8002966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800296a:	2b15      	cmp	r3, #21
 800296c:	d8f6      	bhi.n	800295c <_printf_i+0x28>
 800296e:	a101      	add	r1, pc, #4	@ (adr r1, 8002974 <_printf_i+0x40>)
 8002970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002974:	080029cd 	.word	0x080029cd
 8002978:	080029e1 	.word	0x080029e1
 800297c:	0800295d 	.word	0x0800295d
 8002980:	0800295d 	.word	0x0800295d
 8002984:	0800295d 	.word	0x0800295d
 8002988:	0800295d 	.word	0x0800295d
 800298c:	080029e1 	.word	0x080029e1
 8002990:	0800295d 	.word	0x0800295d
 8002994:	0800295d 	.word	0x0800295d
 8002998:	0800295d 	.word	0x0800295d
 800299c:	0800295d 	.word	0x0800295d
 80029a0:	08002ae3 	.word	0x08002ae3
 80029a4:	08002a0b 	.word	0x08002a0b
 80029a8:	08002a9d 	.word	0x08002a9d
 80029ac:	0800295d 	.word	0x0800295d
 80029b0:	0800295d 	.word	0x0800295d
 80029b4:	08002b05 	.word	0x08002b05
 80029b8:	0800295d 	.word	0x0800295d
 80029bc:	08002a0b 	.word	0x08002a0b
 80029c0:	0800295d 	.word	0x0800295d
 80029c4:	0800295d 	.word	0x0800295d
 80029c8:	08002aa5 	.word	0x08002aa5
 80029cc:	6833      	ldr	r3, [r6, #0]
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6032      	str	r2, [r6, #0]
 80029d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029dc:	2301      	movs	r3, #1
 80029de:	e09e      	b.n	8002b1e <_printf_i+0x1ea>
 80029e0:	6833      	ldr	r3, [r6, #0]
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	1d19      	adds	r1, r3, #4
 80029e6:	6031      	str	r1, [r6, #0]
 80029e8:	0606      	lsls	r6, r0, #24
 80029ea:	d501      	bpl.n	80029f0 <_printf_i+0xbc>
 80029ec:	681d      	ldr	r5, [r3, #0]
 80029ee:	e003      	b.n	80029f8 <_printf_i+0xc4>
 80029f0:	0645      	lsls	r5, r0, #25
 80029f2:	d5fb      	bpl.n	80029ec <_printf_i+0xb8>
 80029f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80029f8:	2d00      	cmp	r5, #0
 80029fa:	da03      	bge.n	8002a04 <_printf_i+0xd0>
 80029fc:	232d      	movs	r3, #45	@ 0x2d
 80029fe:	426d      	negs	r5, r5
 8002a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a04:	230a      	movs	r3, #10
 8002a06:	4859      	ldr	r0, [pc, #356]	@ (8002b6c <_printf_i+0x238>)
 8002a08:	e011      	b.n	8002a2e <_printf_i+0xfa>
 8002a0a:	6821      	ldr	r1, [r4, #0]
 8002a0c:	6833      	ldr	r3, [r6, #0]
 8002a0e:	0608      	lsls	r0, r1, #24
 8002a10:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a14:	d402      	bmi.n	8002a1c <_printf_i+0xe8>
 8002a16:	0649      	lsls	r1, r1, #25
 8002a18:	bf48      	it	mi
 8002a1a:	b2ad      	uxthmi	r5, r5
 8002a1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a1e:	6033      	str	r3, [r6, #0]
 8002a20:	bf14      	ite	ne
 8002a22:	230a      	movne	r3, #10
 8002a24:	2308      	moveq	r3, #8
 8002a26:	4851      	ldr	r0, [pc, #324]	@ (8002b6c <_printf_i+0x238>)
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a2e:	6866      	ldr	r6, [r4, #4]
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	bfa8      	it	ge
 8002a34:	6821      	ldrge	r1, [r4, #0]
 8002a36:	60a6      	str	r6, [r4, #8]
 8002a38:	bfa4      	itt	ge
 8002a3a:	f021 0104 	bicge.w	r1, r1, #4
 8002a3e:	6021      	strge	r1, [r4, #0]
 8002a40:	b90d      	cbnz	r5, 8002a46 <_printf_i+0x112>
 8002a42:	2e00      	cmp	r6, #0
 8002a44:	d04b      	beq.n	8002ade <_printf_i+0x1aa>
 8002a46:	4616      	mov	r6, r2
 8002a48:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a4c:	fb03 5711 	mls	r7, r3, r1, r5
 8002a50:	5dc7      	ldrb	r7, [r0, r7]
 8002a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a56:	462f      	mov	r7, r5
 8002a58:	42bb      	cmp	r3, r7
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	d9f4      	bls.n	8002a48 <_printf_i+0x114>
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d10b      	bne.n	8002a7a <_printf_i+0x146>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	07df      	lsls	r7, r3, #31
 8002a66:	d508      	bpl.n	8002a7a <_printf_i+0x146>
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	6861      	ldr	r1, [r4, #4]
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	bfde      	ittt	le
 8002a70:	2330      	movle	r3, #48	@ 0x30
 8002a72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a7a:	1b92      	subs	r2, r2, r6
 8002a7c:	6122      	str	r2, [r4, #16]
 8002a7e:	464b      	mov	r3, r9
 8002a80:	4621      	mov	r1, r4
 8002a82:	4640      	mov	r0, r8
 8002a84:	f8cd a000 	str.w	sl, [sp]
 8002a88:	aa03      	add	r2, sp, #12
 8002a8a:	f7ff fee1 	bl	8002850 <_printf_common>
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d14a      	bne.n	8002b28 <_printf_i+0x1f4>
 8002a92:	f04f 30ff 	mov.w	r0, #4294967295
 8002a96:	b004      	add	sp, #16
 8002a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	2778      	movs	r7, #120	@ 0x78
 8002aa6:	4832      	ldr	r0, [pc, #200]	@ (8002b70 <_printf_i+0x23c>)
 8002aa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	6831      	ldr	r1, [r6, #0]
 8002ab0:	061f      	lsls	r7, r3, #24
 8002ab2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ab6:	d402      	bmi.n	8002abe <_printf_i+0x18a>
 8002ab8:	065f      	lsls	r7, r3, #25
 8002aba:	bf48      	it	mi
 8002abc:	b2ad      	uxthmi	r5, r5
 8002abe:	6031      	str	r1, [r6, #0]
 8002ac0:	07d9      	lsls	r1, r3, #31
 8002ac2:	bf44      	itt	mi
 8002ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ac8:	6023      	strmi	r3, [r4, #0]
 8002aca:	b11d      	cbz	r5, 8002ad4 <_printf_i+0x1a0>
 8002acc:	2310      	movs	r3, #16
 8002ace:	e7ab      	b.n	8002a28 <_printf_i+0xf4>
 8002ad0:	4826      	ldr	r0, [pc, #152]	@ (8002b6c <_printf_i+0x238>)
 8002ad2:	e7e9      	b.n	8002aa8 <_printf_i+0x174>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	f023 0320 	bic.w	r3, r3, #32
 8002ada:	6023      	str	r3, [r4, #0]
 8002adc:	e7f6      	b.n	8002acc <_printf_i+0x198>
 8002ade:	4616      	mov	r6, r2
 8002ae0:	e7bd      	b.n	8002a5e <_printf_i+0x12a>
 8002ae2:	6833      	ldr	r3, [r6, #0]
 8002ae4:	6825      	ldr	r5, [r4, #0]
 8002ae6:	1d18      	adds	r0, r3, #4
 8002ae8:	6961      	ldr	r1, [r4, #20]
 8002aea:	6030      	str	r0, [r6, #0]
 8002aec:	062e      	lsls	r6, r5, #24
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	d501      	bpl.n	8002af6 <_printf_i+0x1c2>
 8002af2:	6019      	str	r1, [r3, #0]
 8002af4:	e002      	b.n	8002afc <_printf_i+0x1c8>
 8002af6:	0668      	lsls	r0, r5, #25
 8002af8:	d5fb      	bpl.n	8002af2 <_printf_i+0x1be>
 8002afa:	8019      	strh	r1, [r3, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	4616      	mov	r6, r2
 8002b00:	6123      	str	r3, [r4, #16]
 8002b02:	e7bc      	b.n	8002a7e <_printf_i+0x14a>
 8002b04:	6833      	ldr	r3, [r6, #0]
 8002b06:	2100      	movs	r1, #0
 8002b08:	1d1a      	adds	r2, r3, #4
 8002b0a:	6032      	str	r2, [r6, #0]
 8002b0c:	681e      	ldr	r6, [r3, #0]
 8002b0e:	6862      	ldr	r2, [r4, #4]
 8002b10:	4630      	mov	r0, r6
 8002b12:	f000 f859 	bl	8002bc8 <memchr>
 8002b16:	b108      	cbz	r0, 8002b1c <_printf_i+0x1e8>
 8002b18:	1b80      	subs	r0, r0, r6
 8002b1a:	6060      	str	r0, [r4, #4]
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	6123      	str	r3, [r4, #16]
 8002b20:	2300      	movs	r3, #0
 8002b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b26:	e7aa      	b.n	8002a7e <_printf_i+0x14a>
 8002b28:	4632      	mov	r2, r6
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	47d0      	blx	sl
 8002b32:	3001      	adds	r0, #1
 8002b34:	d0ad      	beq.n	8002a92 <_printf_i+0x15e>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	079b      	lsls	r3, r3, #30
 8002b3a:	d413      	bmi.n	8002b64 <_printf_i+0x230>
 8002b3c:	68e0      	ldr	r0, [r4, #12]
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	4298      	cmp	r0, r3
 8002b42:	bfb8      	it	lt
 8002b44:	4618      	movlt	r0, r3
 8002b46:	e7a6      	b.n	8002a96 <_printf_i+0x162>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	4640      	mov	r0, r8
 8002b50:	47d0      	blx	sl
 8002b52:	3001      	adds	r0, #1
 8002b54:	d09d      	beq.n	8002a92 <_printf_i+0x15e>
 8002b56:	3501      	adds	r5, #1
 8002b58:	68e3      	ldr	r3, [r4, #12]
 8002b5a:	9903      	ldr	r1, [sp, #12]
 8002b5c:	1a5b      	subs	r3, r3, r1
 8002b5e:	42ab      	cmp	r3, r5
 8002b60:	dcf2      	bgt.n	8002b48 <_printf_i+0x214>
 8002b62:	e7eb      	b.n	8002b3c <_printf_i+0x208>
 8002b64:	2500      	movs	r5, #0
 8002b66:	f104 0619 	add.w	r6, r4, #25
 8002b6a:	e7f5      	b.n	8002b58 <_printf_i+0x224>
 8002b6c:	08002cd7 	.word	0x08002cd7
 8002b70:	08002ce8 	.word	0x08002ce8

08002b74 <memmove>:
 8002b74:	4288      	cmp	r0, r1
 8002b76:	b510      	push	{r4, lr}
 8002b78:	eb01 0402 	add.w	r4, r1, r2
 8002b7c:	d902      	bls.n	8002b84 <memmove+0x10>
 8002b7e:	4284      	cmp	r4, r0
 8002b80:	4623      	mov	r3, r4
 8002b82:	d807      	bhi.n	8002b94 <memmove+0x20>
 8002b84:	1e43      	subs	r3, r0, #1
 8002b86:	42a1      	cmp	r1, r4
 8002b88:	d008      	beq.n	8002b9c <memmove+0x28>
 8002b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b92:	e7f8      	b.n	8002b86 <memmove+0x12>
 8002b94:	4601      	mov	r1, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	d100      	bne.n	8002b9e <memmove+0x2a>
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ba6:	e7f7      	b.n	8002b98 <memmove+0x24>

08002ba8 <_sbrk_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	2300      	movs	r3, #0
 8002bac:	4d05      	ldr	r5, [pc, #20]	@ (8002bc4 <_sbrk_r+0x1c>)
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	602b      	str	r3, [r5, #0]
 8002bb4:	f7fd fdaa 	bl	800070c <_sbrk>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_sbrk_r+0x1a>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_sbrk_r+0x1a>
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	200002c0 	.word	0x200002c0

08002bc8 <memchr>:
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b510      	push	{r4, lr}
 8002bcc:	b2c9      	uxtb	r1, r1
 8002bce:	4402      	add	r2, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	d101      	bne.n	8002bda <memchr+0x12>
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	e003      	b.n	8002be2 <memchr+0x1a>
 8002bda:	7804      	ldrb	r4, [r0, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	428c      	cmp	r4, r1
 8002be0:	d1f6      	bne.n	8002bd0 <memchr+0x8>
 8002be2:	bd10      	pop	{r4, pc}

08002be4 <memcpy>:
 8002be4:	440a      	add	r2, r1
 8002be6:	4291      	cmp	r1, r2
 8002be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bec:	d100      	bne.n	8002bf0 <memcpy+0xc>
 8002bee:	4770      	bx	lr
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bf6:	4291      	cmp	r1, r2
 8002bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bfc:	d1f9      	bne.n	8002bf2 <memcpy+0xe>
 8002bfe:	bd10      	pop	{r4, pc}

08002c00 <_realloc_r>:
 8002c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c04:	4680      	mov	r8, r0
 8002c06:	4615      	mov	r5, r2
 8002c08:	460c      	mov	r4, r1
 8002c0a:	b921      	cbnz	r1, 8002c16 <_realloc_r+0x16>
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c12:	f7ff bc39 	b.w	8002488 <_malloc_r>
 8002c16:	b92a      	cbnz	r2, 8002c24 <_realloc_r+0x24>
 8002c18:	f7ff fbcc 	bl	80023b4 <_free_r>
 8002c1c:	2400      	movs	r4, #0
 8002c1e:	4620      	mov	r0, r4
 8002c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c24:	f000 f81a 	bl	8002c5c <_malloc_usable_size_r>
 8002c28:	4285      	cmp	r5, r0
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	d802      	bhi.n	8002c34 <_realloc_r+0x34>
 8002c2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002c32:	d8f4      	bhi.n	8002c1e <_realloc_r+0x1e>
 8002c34:	4629      	mov	r1, r5
 8002c36:	4640      	mov	r0, r8
 8002c38:	f7ff fc26 	bl	8002488 <_malloc_r>
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d0ec      	beq.n	8002c1c <_realloc_r+0x1c>
 8002c42:	42b5      	cmp	r5, r6
 8002c44:	462a      	mov	r2, r5
 8002c46:	4621      	mov	r1, r4
 8002c48:	bf28      	it	cs
 8002c4a:	4632      	movcs	r2, r6
 8002c4c:	f7ff ffca 	bl	8002be4 <memcpy>
 8002c50:	4621      	mov	r1, r4
 8002c52:	4640      	mov	r0, r8
 8002c54:	f7ff fbae 	bl	80023b4 <_free_r>
 8002c58:	463c      	mov	r4, r7
 8002c5a:	e7e0      	b.n	8002c1e <_realloc_r+0x1e>

08002c5c <_malloc_usable_size_r>:
 8002c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c60:	1f18      	subs	r0, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bfbc      	itt	lt
 8002c66:	580b      	ldrlt	r3, [r1, r0]
 8002c68:	18c0      	addlt	r0, r0, r3
 8002c6a:	4770      	bx	lr

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
