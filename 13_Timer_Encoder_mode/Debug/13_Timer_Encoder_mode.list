
13_Timer_Encoder_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002804  08002804  00003804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080028cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08002928  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08002928  00004258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad46  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b3  00000000  00000000  0000edcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00010680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f4  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e3f  00000000  00000000  00011adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8b0  00000000  00000000  0002891b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887a8  00000000  00000000  000351cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd973  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  000bd9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c0e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027ec 	.word	0x080027ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080027ec 	.word	0x080027ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	@ 0x38
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint8_t MSG[50] = { '\0' };
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	222e      	movs	r2, #46	@ 0x2e
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f001 feb4 	bl	8001ecc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fad4 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f840 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f906 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8da 	bl	8000328 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000174:	f000 f880 	bl	8000278 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000178:	213c      	movs	r1, #60	@ 0x3c
 800017a:	4816      	ldr	r0, [pc, #88]	@ (80001d4 <main+0x88>)
 800017c:	f001 fae4 	bl	8001748 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 8000180:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000184:	4814      	ldr	r0, [pc, #80]	@ (80001d8 <main+0x8c>)
 8000186:	f000 fddb 	bl	8000d40 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d00e      	beq.n	80001ae <main+0x62>
	  {
		  sprintf(MSG, "Encoder switch released, encoder ticks = %d \n\r", ((TIM1->CNT)>>2));
 8000190:	4b12      	ldr	r3, [pc, #72]	@ (80001dc <main+0x90>)
 8000192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000194:	089a      	lsrs	r2, r3, #2
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4911      	ldr	r1, [pc, #68]	@ (80001e0 <main+0x94>)
 800019a:	4618      	mov	r0, r3
 800019c:	f001 fe76 	bl	8001e8c <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80001a0:	1d39      	adds	r1, r7, #4
 80001a2:	2364      	movs	r3, #100	@ 0x64
 80001a4:	2232      	movs	r2, #50	@ 0x32
 80001a6:	480f      	ldr	r0, [pc, #60]	@ (80001e4 <main+0x98>)
 80001a8:	f001 fc9c 	bl	8001ae4 <HAL_UART_Transmit>
 80001ac:	e00d      	b.n	80001ca <main+0x7e>
	  }
	  else
	  {
		  sprintf(MSG, "Encoder switch pressed, encoder ticks = %d \n\r", ((TIM1->CNT)>>2));
 80001ae:	4b0b      	ldr	r3, [pc, #44]	@ (80001dc <main+0x90>)
 80001b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001b2:	089a      	lsrs	r2, r3, #2
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	490c      	ldr	r1, [pc, #48]	@ (80001e8 <main+0x9c>)
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fe67 	bl	8001e8c <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80001be:	1d39      	adds	r1, r7, #4
 80001c0:	2364      	movs	r3, #100	@ 0x64
 80001c2:	2232      	movs	r2, #50	@ 0x32
 80001c4:	4807      	ldr	r0, [pc, #28]	@ (80001e4 <main+0x98>)
 80001c6:	f001 fc8d 	bl	8001ae4 <HAL_UART_Transmit>
	  }
	  HAL_Delay(100);
 80001ca:	2064      	movs	r0, #100	@ 0x64
 80001cc:	f000 fb02 	bl	80007d4 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 80001d0:	e7d6      	b.n	8000180 <main+0x34>
 80001d2:	bf00      	nop
 80001d4:	20000078 	.word	0x20000078
 80001d8:	40010c00 	.word	0x40010c00
 80001dc:	40012c00 	.word	0x40012c00
 80001e0:	08002804 	.word	0x08002804
 80001e4:	200000c0 	.word	0x200000c0
 80001e8:	08002834 	.word	0x08002834

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	@ 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fe66 	bl	8001ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000220:	2302      	movs	r3, #2
 8000222:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fdd5 	bl	8000de4 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000240:	f000 f91a 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f842 	bl	80012e8 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026a:	f000 f905 	bl	8000478 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08c      	sub	sp, #48	@ 0x30
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800027e:	f107 030c 	add.w	r3, r7, #12
 8000282:	2224      	movs	r2, #36	@ 0x24
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fe20 	bl	8001ecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000294:	4b22      	ldr	r3, [pc, #136]	@ (8000320 <MX_TIM1_Init+0xa8>)
 8000296:	4a23      	ldr	r2, [pc, #140]	@ (8000324 <MX_TIM1_Init+0xac>)
 8000298:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800029a:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <MX_TIM1_Init+0xa8>)
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000320 <MX_TIM1_Init+0xa8>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <MX_TIM1_Init+0xa8>)
 80002a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <MX_TIM1_Init+0xa8>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <MX_TIM1_Init+0xa8>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002ba:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <MX_TIM1_Init+0xa8>)
 80002bc:	2280      	movs	r2, #128	@ 0x80
 80002be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002c0:	2303      	movs	r3, #3
 80002c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002c8:	2301      	movs	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80002d0:	230a      	movs	r3, #10
 80002d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002d8:	2301      	movs	r3, #1
 80002da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80002e0:	230a      	movs	r3, #10
 80002e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4619      	mov	r1, r3
 80002ea:	480d      	ldr	r0, [pc, #52]	@ (8000320 <MX_TIM1_Init+0xa8>)
 80002ec:	f001 f98a 	bl	8001604 <HAL_TIM_Encoder_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80002f6:	f000 f8bf 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	@ (8000320 <MX_TIM1_Init+0xa8>)
 8000308:	f001 fb3e 	bl	8001988 <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000312:	f000 f8b1 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3730      	adds	r7, #48	@ 0x30
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000078 	.word	0x20000078
 8000324:	40012c00 	.word	0x40012c00

08000328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	@ (8000378 <MX_USART2_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000360:	f001 fb70 	bl	8001a44 <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f885 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000c0 	.word	0x200000c0
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b34      	ldr	r3, [pc, #208]	@ (8000464 <MX_GPIO_Init+0xe8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a33      	ldr	r2, [pc, #204]	@ (8000464 <MX_GPIO_Init+0xe8>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b31      	ldr	r3, [pc, #196]	@ (8000464 <MX_GPIO_Init+0xe8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a27      	ldr	r2, [pc, #156]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d8:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a21      	ldr	r2, [pc, #132]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_GPIO_Init+0xe8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	481c      	ldr	r0, [pc, #112]	@ (8000468 <MX_GPIO_Init+0xec>)
 80003f6:	f000 fcba 	bl	8000d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000400:	4b1a      	ldr	r3, [pc, #104]	@ (800046c <MX_GPIO_Init+0xf0>)
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4818      	ldr	r0, [pc, #96]	@ (8000470 <MX_GPIO_Init+0xf4>)
 8000410:	f000 fb12 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000414:	2320      	movs	r3, #32
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2302      	movs	r3, #2
 8000422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	480f      	ldr	r0, [pc, #60]	@ (8000468 <MX_GPIO_Init+0xec>)
 800042c:	f000 fb04 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043a:	2301      	movs	r3, #1
 800043c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	480b      	ldr	r0, [pc, #44]	@ (8000474 <MX_GPIO_Init+0xf8>)
 8000446:	f000 faf7 	bl	8000a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2028      	movs	r0, #40	@ 0x28
 8000450:	f000 fabb 	bl	80009ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000454:	2028      	movs	r0, #40	@ 0x28
 8000456:	f000 fad4 	bl	8000a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800
 800046c:	10110000 	.word	0x10110000
 8000470:	40011000 	.word	0x40011000
 8000474:	40010c00 	.word	0x40010c00

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a16      	ldr	r2, [pc, #88]	@ (800055c <HAL_TIM_Encoder_MspInit+0x74>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d124      	bne.n	8000552 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 800050e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000538:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800053c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	@ (8000564 <HAL_TIM_Encoder_MspInit+0x7c>)
 800054e:	f000 fa73 	bl	8000a38 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40012c00 	.word	0x40012c00
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a15      	ldr	r2, [pc, #84]	@ (80005d8 <HAL_UART_MspInit+0x70>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d123      	bne.n	80005d0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <HAL_UART_MspInit+0x74>)
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	4a13      	ldr	r2, [pc, #76]	@ (80005dc <HAL_UART_MspInit+0x74>)
 800058e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000592:	61d3      	str	r3, [r2, #28]
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <HAL_UART_MspInit+0x74>)
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <HAL_UART_MspInit+0x74>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <HAL_UART_MspInit+0x74>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <HAL_UART_MspInit+0x74>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005b8:	230c      	movs	r3, #12
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <HAL_UART_MspInit+0x78>)
 80005cc:	f000 fa34 	bl	8000a38 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40004400 	.word	0x40004400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f8b2 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000640:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000644:	f000 fbac 	bl	8000da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f001 fc2e 	bl	8001edc <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20005000 	.word	0x20005000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	20000108 	.word	0x20000108
 80006b4:	20000258 	.word	0x20000258

080006b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c4:	f7ff fff8 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ca:	490c      	ldr	r1, [pc, #48]	@ (80006fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000700 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a09      	ldr	r2, [pc, #36]	@ (8000704 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006e0:	4c09      	ldr	r4, [pc, #36]	@ (8000708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ee:	f001 fbfb 	bl	8001ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fd2b 	bl	800014c <main>
  bx lr
 80006f6:	4770      	bx	lr
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000700:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 8000704:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000708:	20000258 	.word	0x20000258

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f947 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff feaa 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f95f 	bl	8000a1e <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f927 	bl	80009ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	@ (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	20000008 	.word	0x20000008
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <HAL_IncTick+0x20>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000008 	.word	0x20000008
 80007bc:	2000010c 	.word	0x2000010c

080007c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	@ (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	2000010c 	.word	0x2000010c

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff fff0 	bl	80007c0 <HAL_GetTick>
 80007e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d005      	beq.n	80007fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_Delay+0x44>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fa:	bf00      	nop
 80007fc:	f7ff ffe0 	bl	80007c0 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <HAL_Delay+0x28>
  {
  }
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4906      	ldr	r1, [pc, #24]	@ (80008b4 <__NVIC_EnableIRQ+0x34>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	@ (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	@ (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	@ 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	@ 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	210f      	movs	r1, #15
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f7ff ff90 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff2d 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff42 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff90 	bl	800090c <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5f 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff35 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffa2 	bl	8000970 <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b08b      	sub	sp, #44	@ 0x2c
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	e169      	b.n	8000d20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	f040 8158 	bne.w	8000d1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	4a9a      	ldr	r2, [pc, #616]	@ (8000cd8 <HAL_GPIO_Init+0x2a0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d05e      	beq.n	8000b32 <HAL_GPIO_Init+0xfa>
 8000a74:	4a98      	ldr	r2, [pc, #608]	@ (8000cd8 <HAL_GPIO_Init+0x2a0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d875      	bhi.n	8000b66 <HAL_GPIO_Init+0x12e>
 8000a7a:	4a98      	ldr	r2, [pc, #608]	@ (8000cdc <HAL_GPIO_Init+0x2a4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d058      	beq.n	8000b32 <HAL_GPIO_Init+0xfa>
 8000a80:	4a96      	ldr	r2, [pc, #600]	@ (8000cdc <HAL_GPIO_Init+0x2a4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d86f      	bhi.n	8000b66 <HAL_GPIO_Init+0x12e>
 8000a86:	4a96      	ldr	r2, [pc, #600]	@ (8000ce0 <HAL_GPIO_Init+0x2a8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d052      	beq.n	8000b32 <HAL_GPIO_Init+0xfa>
 8000a8c:	4a94      	ldr	r2, [pc, #592]	@ (8000ce0 <HAL_GPIO_Init+0x2a8>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d869      	bhi.n	8000b66 <HAL_GPIO_Init+0x12e>
 8000a92:	4a94      	ldr	r2, [pc, #592]	@ (8000ce4 <HAL_GPIO_Init+0x2ac>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d04c      	beq.n	8000b32 <HAL_GPIO_Init+0xfa>
 8000a98:	4a92      	ldr	r2, [pc, #584]	@ (8000ce4 <HAL_GPIO_Init+0x2ac>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d863      	bhi.n	8000b66 <HAL_GPIO_Init+0x12e>
 8000a9e:	4a92      	ldr	r2, [pc, #584]	@ (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d046      	beq.n	8000b32 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a90      	ldr	r2, [pc, #576]	@ (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d85d      	bhi.n	8000b66 <HAL_GPIO_Init+0x12e>
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d82a      	bhi.n	8000b04 <HAL_GPIO_Init+0xcc>
 8000aae:	2b12      	cmp	r3, #18
 8000ab0:	d859      	bhi.n	8000b66 <HAL_GPIO_Init+0x12e>
 8000ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab8 <HAL_GPIO_Init+0x80>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000b33 	.word	0x08000b33
 8000abc:	08000b0d 	.word	0x08000b0d
 8000ac0:	08000b1f 	.word	0x08000b1f
 8000ac4:	08000b61 	.word	0x08000b61
 8000ac8:	08000b67 	.word	0x08000b67
 8000acc:	08000b67 	.word	0x08000b67
 8000ad0:	08000b67 	.word	0x08000b67
 8000ad4:	08000b67 	.word	0x08000b67
 8000ad8:	08000b67 	.word	0x08000b67
 8000adc:	08000b67 	.word	0x08000b67
 8000ae0:	08000b67 	.word	0x08000b67
 8000ae4:	08000b67 	.word	0x08000b67
 8000ae8:	08000b67 	.word	0x08000b67
 8000aec:	08000b67 	.word	0x08000b67
 8000af0:	08000b67 	.word	0x08000b67
 8000af4:	08000b67 	.word	0x08000b67
 8000af8:	08000b67 	.word	0x08000b67
 8000afc:	08000b15 	.word	0x08000b15
 8000b00:	08000b29 	.word	0x08000b29
 8000b04:	4a79      	ldr	r2, [pc, #484]	@ (8000cec <HAL_GPIO_Init+0x2b4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d013      	beq.n	8000b32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b0a:	e02c      	b.n	8000b66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e029      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	623b      	str	r3, [r7, #32]
          break;
 8000b1c:	e024      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	3308      	adds	r3, #8
 8000b24:	623b      	str	r3, [r7, #32]
          break;
 8000b26:	e01f      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	330c      	adds	r3, #12
 8000b2e:	623b      	str	r3, [r7, #32]
          break;
 8000b30:	e01a      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e013      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d105      	bne.n	8000b54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69fa      	ldr	r2, [r7, #28]
 8000b50:	611a      	str	r2, [r3, #16]
          break;
 8000b52:	e009      	b.n	8000b68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b54:	2308      	movs	r3, #8
 8000b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	615a      	str	r2, [r3, #20]
          break;
 8000b5e:	e003      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
          break;
 8000b64:	e000      	b.n	8000b68 <HAL_GPIO_Init+0x130>
          break;
 8000b66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2bff      	cmp	r3, #255	@ 0xff
 8000b6c:	d801      	bhi.n	8000b72 <HAL_GPIO_Init+0x13a>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	e001      	b.n	8000b76 <HAL_GPIO_Init+0x13e>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3304      	adds	r3, #4
 8000b76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2bff      	cmp	r3, #255	@ 0xff
 8000b7c:	d802      	bhi.n	8000b84 <HAL_GPIO_Init+0x14c>
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x152>
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	3b08      	subs	r3, #8
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	210f      	movs	r1, #15
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	6a39      	ldr	r1, [r7, #32]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80b1 	beq.w	8000d1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf0 <HAL_GPIO_Init+0x2b8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf0 <HAL_GPIO_Init+0x2b8>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf0 <HAL_GPIO_Init+0x2b8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bd0:	4a48      	ldr	r2, [pc, #288]	@ (8000cf4 <HAL_GPIO_Init+0x2bc>)
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <HAL_GPIO_Init+0x2c0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d013      	beq.n	8000c24 <HAL_GPIO_Init+0x1ec>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000cfc <HAL_GPIO_Init+0x2c4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d00d      	beq.n	8000c20 <HAL_GPIO_Init+0x1e8>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a3e      	ldr	r2, [pc, #248]	@ (8000d00 <HAL_GPIO_Init+0x2c8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d007      	beq.n	8000c1c <HAL_GPIO_Init+0x1e4>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d101      	bne.n	8000c18 <HAL_GPIO_Init+0x1e0>
 8000c14:	2303      	movs	r3, #3
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x1ee>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e004      	b.n	8000c26 <HAL_GPIO_Init+0x1ee>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e002      	b.n	8000c26 <HAL_GPIO_Init+0x1ee>
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <HAL_GPIO_Init+0x1ee>
 8000c24:	2300      	movs	r3, #0
 8000c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c28:	f002 0203 	and.w	r2, r2, #3
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	4093      	lsls	r3, r2
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c36:	492f      	ldr	r1, [pc, #188]	@ (8000cf4 <HAL_GPIO_Init+0x2bc>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	492c      	ldr	r1, [pc, #176]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	608b      	str	r3, [r1, #8]
 8000c5c:	e006      	b.n	8000c6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4928      	ldr	r1, [pc, #160]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c78:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	4922      	ldr	r1, [pc, #136]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60cb      	str	r3, [r1, #12]
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	491e      	ldr	r1, [pc, #120]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca0:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4918      	ldr	r1, [pc, #96]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4914      	ldr	r1, [pc, #80]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d021      	beq.n	8000d0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	490e      	ldr	r1, [pc, #56]	@ (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	e021      	b.n	8000d1a <HAL_GPIO_Init+0x2e2>
 8000cd6:	bf00      	nop
 8000cd8:	10320000 	.word	0x10320000
 8000cdc:	10310000 	.word	0x10310000
 8000ce0:	10220000 	.word	0x10220000
 8000ce4:	10210000 	.word	0x10210000
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	10110000 	.word	0x10110000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40011000 	.word	0x40011000
 8000d04:	40011400 	.word	0x40011400
 8000d08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_GPIO_Init+0x304>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	4909      	ldr	r1, [pc, #36]	@ (8000d3c <HAL_GPIO_Init+0x304>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d26:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f47f ae8e 	bne.w	8000a4c <HAL_GPIO_Init+0x14>
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	372c      	adds	r7, #44	@ 0x2c
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	40010400 	.word	0x40010400

08000d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e001      	b.n	8000d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	807b      	strh	r3, [r7, #2]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7e:	787b      	ldrb	r3, [r7, #1]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d84:	887a      	ldrh	r2, [r7, #2]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d8a:	e003      	b.n	8000d94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	041a      	lsls	r2, r3, #16
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	611a      	str	r2, [r3, #16]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f806 	bl	8000dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e272      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8087 	beq.w	8000f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e04:	4b92      	ldr	r3, [pc, #584]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d00c      	beq.n	8000e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e10:	4b8f      	ldr	r3, [pc, #572]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d112      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e28:	d10b      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2a:	4b89      	ldr	r3, [pc, #548]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d06c      	beq.n	8000f10 <HAL_RCC_OscConfig+0x12c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d168      	bne.n	8000f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e24c      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e4a:	d106      	bne.n	8000e5a <HAL_RCC_OscConfig+0x76>
 8000e4c:	4b80      	ldr	r3, [pc, #512]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a7f      	ldr	r2, [pc, #508]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e02e      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0x98>
 8000e62:	4b7b      	ldr	r3, [pc, #492]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7a      	ldr	r2, [pc, #488]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b78      	ldr	r3, [pc, #480]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a77      	ldr	r2, [pc, #476]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e01d      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xbc>
 8000e86:	4b72      	ldr	r3, [pc, #456]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a71      	ldr	r2, [pc, #452]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b6f      	ldr	r3, [pc, #444]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a6e      	ldr	r2, [pc, #440]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b68      	ldr	r3, [pc, #416]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a67      	ldr	r2, [pc, #412]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc7e 	bl	80007c0 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fc7a 	bl	80007c0 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e200      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	4b5d      	ldr	r3, [pc, #372]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xe4>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc6a 	bl	80007c0 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fc66 	bl	80007c0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e1ec      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x10c>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d063      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2a:	4b49      	ldr	r3, [pc, #292]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d11c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
 8000f36:	4b46      	ldr	r3, [pc, #280]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d001      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e1c0      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4939      	ldr	r1, [pc, #228]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	e03a      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f78:	4b36      	ldr	r3, [pc, #216]	@ (8001054 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc1f 	bl	80007c0 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fc1b 	bl	80007c0 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e1a1      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4927      	ldr	r1, [pc, #156]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
 8000fb8:	e015      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fbfe 	bl	80007c0 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fbfa 	bl	80007c0 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e180      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d03a      	beq.n	8001068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d019      	beq.n	800102e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_RCC_OscConfig+0x274>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001000:	f7ff fbde 	bl	80007c0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fbda 	bl	80007c0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e160      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_RCC_OscConfig+0x26c>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 face 	bl	80015c8 <RCC_Delay>
 800102c:	e01c      	b.n	8001068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_RCC_OscConfig+0x274>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fbc4 	bl	80007c0 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103a:	e00f      	b.n	800105c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fbc0 	bl	80007c0 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d908      	bls.n	800105c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e146      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	42420000 	.word	0x42420000
 8001058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105c:	4b92      	ldr	r3, [pc, #584]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e9      	bne.n	800103c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a6 	beq.w	80011c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b8b      	ldr	r3, [pc, #556]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b88      	ldr	r3, [pc, #544]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a87      	ldr	r2, [pc, #540]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b85      	ldr	r3, [pc, #532]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b82      	ldr	r3, [pc, #520]	@ (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b7f      	ldr	r3, [pc, #508]	@ (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a7e      	ldr	r2, [pc, #504]	@ (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb81 	bl	80007c0 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fb7d 	bl	80007c0 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	@ 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e103      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b75      	ldr	r3, [pc, #468]	@ (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x312>
 80010e8:	4b6f      	ldr	r3, [pc, #444]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a6e      	ldr	r2, [pc, #440]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x334>
 80010fe:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a69      	ldr	r2, [pc, #420]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b67      	ldr	r3, [pc, #412]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a66      	ldr	r2, [pc, #408]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x356>
 8001120:	4b61      	ldr	r3, [pc, #388]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a60      	ldr	r2, [pc, #384]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a5d      	ldr	r2, [pc, #372]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 800113a:	4b5b      	ldr	r3, [pc, #364]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a5a      	ldr	r2, [pc, #360]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	4b58      	ldr	r3, [pc, #352]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a57      	ldr	r2, [pc, #348]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d015      	beq.n	8001186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb31 	bl	80007c0 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb2d 	bl	80007c0 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e0b1      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001178:	4b4b      	ldr	r3, [pc, #300]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ee      	beq.n	8001162 <HAL_RCC_OscConfig+0x37e>
 8001184:	e014      	b.n	80011b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb1b 	bl	80007c0 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fb17 	bl	80007c0 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e09b      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a4:	4b40      	ldr	r3, [pc, #256]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ee      	bne.n	800118e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d105      	bne.n	80011c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8087 	beq.w	80012da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011cc:	4b36      	ldr	r3, [pc, #216]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d061      	beq.n	800129c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d146      	bne.n	800126e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e0:	4b33      	ldr	r3, [pc, #204]	@ (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff faeb 	bl	80007c0 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ee:	f7ff fae7 	bl	80007c0 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e06d      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001214:	d108      	bne.n	8001228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001216:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4921      	ldr	r1, [pc, #132]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a19      	ldr	r1, [r3, #32]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001238:	430b      	orrs	r3, r1
 800123a:	491b      	ldr	r1, [pc, #108]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fabb 	bl	80007c0 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fab7 	bl	80007c0 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03d      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x46a>
 800126c:	e035      	b.n	80012da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff faa4 	bl	80007c0 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff faa0 	bl	80007c0 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e026      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x498>
 800129a:	e01e      	b.n	80012da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d107      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e019      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_RCC_OscConfig+0x500>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0d0      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012fc:	4b6a      	ldr	r3, [pc, #424]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d910      	bls.n	800132c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b67      	ldr	r3, [pc, #412]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 0207 	bic.w	r2, r3, #7
 8001312:	4965      	ldr	r1, [pc, #404]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b63      	ldr	r3, [pc, #396]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0b8      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001344:	4b59      	ldr	r3, [pc, #356]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a58      	ldr	r2, [pc, #352]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800134e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800135c:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001368:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	494d      	ldr	r1, [pc, #308]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d040      	beq.n	8001408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d115      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e07f      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e073      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e06b      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c6:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f023 0203 	bic.w	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4936      	ldr	r1, [pc, #216]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d8:	f7ff f9f2 	bl	80007c0 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e0:	f7ff f9ee 	bl	80007c0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e053      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 020c 	and.w	r2, r3, #12
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	429a      	cmp	r2, r3
 8001406:	d1eb      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d210      	bcs.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0207 	bic.w	r2, r3, #7
 800141e:	4922      	ldr	r1, [pc, #136]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e032      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4916      	ldr	r1, [pc, #88]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	490e      	ldr	r1, [pc, #56]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001476:	f000 f821 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 800147a:	4602      	mov	r2, r0
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	490a      	ldr	r1, [pc, #40]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001488:	5ccb      	ldrb	r3, [r1, r3]
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f950 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08002864 	.word	0x08002864
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x94>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d002      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x30>
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_GetSysClockFreq+0x36>
 80014ea:	e027      	b.n	800153c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ee:	613b      	str	r3, [r7, #16]
      break;
 80014f0:	e027      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	0c9b      	lsrs	r3, r3, #18
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x94>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0c5b      	lsrs	r3, r3, #17
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x98>)
 800151e:	fb03 f202 	mul.w	r2, r3, r2
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e004      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a0c      	ldr	r2, [pc, #48]	@ (8001560 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	613b      	str	r3, [r7, #16]
      break;
 800153a:	e002      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x98>)
 800153e:	613b      	str	r3, [r7, #16]
      break;
 8001540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001542:	693b      	ldr	r3, [r7, #16]
}
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	007a1200 	.word	0x007a1200
 8001558:	0800287c 	.word	0x0800287c
 800155c:	0800288c 	.word	0x0800288c
 8001560:	003d0900 	.word	0x003d0900

08001564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001568:	4b02      	ldr	r3, [pc, #8]	@ (8001574 <HAL_RCC_GetHCLKFreq+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000000 	.word	0x20000000

08001578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800157c:	f7ff fff2 	bl	8001564 <HAL_RCC_GetHCLKFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4903      	ldr	r1, [pc, #12]	@ (800159c <HAL_RCC_GetPCLK1Freq+0x24>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	08002874 	.word	0x08002874

080015a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015a4:	f7ff ffde 	bl	8001564 <HAL_RCC_GetHCLKFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0adb      	lsrs	r3, r3, #11
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	4903      	ldr	r1, [pc, #12]	@ (80015c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08002874 	.word	0x08002874

080015c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <RCC_Delay+0x34>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <RCC_Delay+0x38>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a5b      	lsrs	r3, r3, #9
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e4:	bf00      	nop
  }
  while (Delay --);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	60fa      	str	r2, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <RCC_Delay+0x1c>
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000000 	.word	0x20000000
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e093      	b.n	8001740 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7fe ff5b 	bl	80004e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001648:	f023 0307 	bic.w	r3, r3, #7
 800164c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3304      	adds	r3, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f000 f903 	bl	8001864 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4313      	orrs	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	4313      	orrs	r3, r2
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80016a4:	f023 030c 	bic.w	r3, r3, #12
 80016a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80016b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	4313      	orrs	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	011a      	lsls	r2, r3, #4
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	031b      	lsls	r3, r3, #12
 80016d4:	4313      	orrs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80016e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	4313      	orrs	r3, r2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001758:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001760:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001768:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001770:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d110      	bne.n	800179a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800177e:	7b7b      	ldrb	r3, [r7, #13]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d001      	beq.n	8001788 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e069      	b.n	800185c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001798:	e031      	b.n	80017fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d110      	bne.n	80017c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80017a6:	7b3b      	ldrb	r3, [r7, #12]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d001      	beq.n	80017b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e055      	b.n	800185c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017c0:	e01d      	b.n	80017fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e03e      	b.n	800185c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_TIM_Encoder_Start+0xc4>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d008      	beq.n	800181c <HAL_TIM_Encoder_Start+0xd4>
 800180a:	e00f      	b.n	800182c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f893 	bl	8001940 <TIM_CCxChannelCmd>
      break;
 800181a:	e016      	b.n	800184a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	2104      	movs	r1, #4
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f88b 	bl	8001940 <TIM_CCxChannelCmd>
      break;
 800182a:	e00e      	b.n	800184a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f883 	bl	8001940 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	2104      	movs	r1, #4
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f87c 	bl	8001940 <TIM_CCxChannelCmd>
      break;
 8001848:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a2f      	ldr	r2, [pc, #188]	@ (8001934 <TIM_Base_SetConfig+0xd0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00b      	beq.n	8001894 <TIM_Base_SetConfig+0x30>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001882:	d007      	beq.n	8001894 <TIM_Base_SetConfig+0x30>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a2c      	ldr	r2, [pc, #176]	@ (8001938 <TIM_Base_SetConfig+0xd4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d003      	beq.n	8001894 <TIM_Base_SetConfig+0x30>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a2b      	ldr	r2, [pc, #172]	@ (800193c <TIM_Base_SetConfig+0xd8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d108      	bne.n	80018a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800189a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a22      	ldr	r2, [pc, #136]	@ (8001934 <TIM_Base_SetConfig+0xd0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00b      	beq.n	80018c6 <TIM_Base_SetConfig+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b4:	d007      	beq.n	80018c6 <TIM_Base_SetConfig+0x62>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001938 <TIM_Base_SetConfig+0xd4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d003      	beq.n	80018c6 <TIM_Base_SetConfig+0x62>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <TIM_Base_SetConfig+0xd8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d108      	bne.n	80018d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <TIM_Base_SetConfig+0xd0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d103      	bne.n	800190c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f023 0201 	bic.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
  }
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40012c00 	.word	0x40012c00
 8001938:	40000400 	.word	0x40000400
 800193c:	40000800 	.word	0x40000800

08001940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2201      	movs	r2, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a1a      	ldr	r2, [r3, #32]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	621a      	str	r2, [r3, #32]
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800199c:	2302      	movs	r3, #2
 800199e:	e046      	b.n	8001a2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ec:	d009      	beq.n	8001a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d004      	beq.n	8001a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a10      	ldr	r2, [pc, #64]	@ (8001a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10c      	bne.n	8001a1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40000800 	.word	0x40000800

08001a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e042      	b.n	8001adc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fd7c 	bl	8000568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	@ 0x24
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f971 	bl	8001d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d175      	bne.n	8001bf0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_UART_Transmit+0x2c>
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e06e      	b.n	8001bf2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2221      	movs	r2, #33	@ 0x21
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b22:	f7fe fe4d 	bl	80007c0 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	88fa      	ldrh	r2, [r7, #6]
 8001b2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b3c:	d108      	bne.n	8001b50 <HAL_UART_Transmit+0x6c>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d104      	bne.n	8001b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	e003      	b.n	8001b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b58:	e02e      	b.n	8001bb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f848 	bl	8001bfa <UART_WaitOnFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e03a      	b.n	8001bf2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10b      	bne.n	8001b9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3302      	adds	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	e007      	b.n	8001baa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1cb      	bne.n	8001b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2140      	movs	r1, #64	@ 0x40
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f814 	bl	8001bfa <UART_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e006      	b.n	8001bf2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c0a:	e03b      	b.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d037      	beq.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7fe fdd4 	bl	80007c0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	6a3a      	ldr	r2, [r7, #32]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e03a      	b.n	8001ca4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b80      	cmp	r3, #128	@ 0x80
 8001c40:	d020      	beq.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b40      	cmp	r3, #64	@ 0x40
 8001c46:	d01d      	beq.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d116      	bne.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f81d 	bl	8001cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2208      	movs	r2, #8
 8001c76:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e00f      	b.n	8001ca4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d0b4      	beq.n	8001c0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b095      	sub	sp, #84	@ 0x54
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	330c      	adds	r3, #12
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	e853 3f00 	ldrex	r3, [r3]
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cd4:	643a      	str	r2, [r7, #64]	@ 0x40
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cdc:	e841 2300 	strex	r3, r2, [r1]
 8001ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e5      	bne.n	8001cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3314      	adds	r3, #20
 8001cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	e853 3f00 	ldrex	r3, [r3]
 8001cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3314      	adds	r3, #20
 8001d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d10:	e841 2300 	strex	r3, r2, [r1]
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e5      	bne.n	8001ce8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d119      	bne.n	8001d58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	e853 3f00 	ldrex	r3, [r3]
 8001d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f023 0310 	bic.w	r3, r3, #16
 8001d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	330c      	adds	r3, #12
 8001d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d44:	61ba      	str	r2, [r7, #24]
 8001d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d48:	6979      	ldr	r1, [r7, #20]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	e841 2300 	strex	r3, r2, [r1]
 8001d50:	613b      	str	r3, [r7, #16]
   return(result);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e5      	bne.n	8001d24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d66:	bf00      	nop
 8001d68:	3754      	adds	r7, #84	@ 0x54
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001daa:	f023 030c 	bic.w	r3, r3, #12
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <UART_SetConfig+0x114>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001dd8:	f7ff fbe2 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	e002      	b.n	8001de6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001de0:	f7ff fbca 	bl	8001578 <HAL_RCC_GetPCLK1Freq>
 8001de4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	4a22      	ldr	r2, [pc, #136]	@ (8001e88 <UART_SetConfig+0x118>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	0119      	lsls	r1, r3, #4
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <UART_SetConfig+0x118>)
 8001e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2064      	movs	r0, #100	@ 0x64
 8001e26:	fb00 f303 	mul.w	r3, r0, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	3332      	adds	r3, #50	@ 0x32
 8001e30:	4a15      	ldr	r2, [pc, #84]	@ (8001e88 <UART_SetConfig+0x118>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3c:	4419      	add	r1, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	009a      	lsls	r2, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <UART_SetConfig+0x118>)
 8001e56:	fba3 0302 	umull	r0, r3, r3, r2
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2064      	movs	r0, #100	@ 0x64
 8001e5e:	fb00 f303 	mul.w	r3, r0, r3
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	3332      	adds	r3, #50	@ 0x32
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <UART_SetConfig+0x118>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	440a      	add	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40013800 	.word	0x40013800
 8001e88:	51eb851f 	.word	0x51eb851f

08001e8c <siprintf>:
 8001e8c:	b40e      	push	{r1, r2, r3}
 8001e8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001e92:	b500      	push	{lr}
 8001e94:	b09c      	sub	sp, #112	@ 0x70
 8001e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8001e98:	9002      	str	r0, [sp, #8]
 8001e9a:	9006      	str	r0, [sp, #24]
 8001e9c:	9107      	str	r1, [sp, #28]
 8001e9e:	9104      	str	r1, [sp, #16]
 8001ea0:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <siprintf+0x38>)
 8001ea2:	4909      	ldr	r1, [pc, #36]	@ (8001ec8 <siprintf+0x3c>)
 8001ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ea8:	9105      	str	r1, [sp, #20]
 8001eaa:	6800      	ldr	r0, [r0, #0]
 8001eac:	a902      	add	r1, sp, #8
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	f000 f992 	bl	80021d8 <_svfiprintf_r>
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	b01c      	add	sp, #112	@ 0x70
 8001ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ec0:	b003      	add	sp, #12
 8001ec2:	4770      	bx	lr
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	ffff0208 	.word	0xffff0208

08001ecc <memset>:
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4402      	add	r2, r0
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <memset+0xa>
 8001ed4:	4770      	bx	lr
 8001ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eda:	e7f9      	b.n	8001ed0 <memset+0x4>

08001edc <__errno>:
 8001edc:	4b01      	ldr	r3, [pc, #4]	@ (8001ee4 <__errno+0x8>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	2000000c 	.word	0x2000000c

08001ee8 <__libc_init_array>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	2600      	movs	r6, #0
 8001eec:	4d0c      	ldr	r5, [pc, #48]	@ (8001f20 <__libc_init_array+0x38>)
 8001eee:	4c0d      	ldr	r4, [pc, #52]	@ (8001f24 <__libc_init_array+0x3c>)
 8001ef0:	1b64      	subs	r4, r4, r5
 8001ef2:	10a4      	asrs	r4, r4, #2
 8001ef4:	42a6      	cmp	r6, r4
 8001ef6:	d109      	bne.n	8001f0c <__libc_init_array+0x24>
 8001ef8:	f000 fc78 	bl	80027ec <_init>
 8001efc:	2600      	movs	r6, #0
 8001efe:	4d0a      	ldr	r5, [pc, #40]	@ (8001f28 <__libc_init_array+0x40>)
 8001f00:	4c0a      	ldr	r4, [pc, #40]	@ (8001f2c <__libc_init_array+0x44>)
 8001f02:	1b64      	subs	r4, r4, r5
 8001f04:	10a4      	asrs	r4, r4, #2
 8001f06:	42a6      	cmp	r6, r4
 8001f08:	d105      	bne.n	8001f16 <__libc_init_array+0x2e>
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
 8001f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f10:	4798      	blx	r3
 8001f12:	3601      	adds	r6, #1
 8001f14:	e7ee      	b.n	8001ef4 <__libc_init_array+0xc>
 8001f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1a:	4798      	blx	r3
 8001f1c:	3601      	adds	r6, #1
 8001f1e:	e7f2      	b.n	8001f06 <__libc_init_array+0x1e>
 8001f20:	080028c4 	.word	0x080028c4
 8001f24:	080028c4 	.word	0x080028c4
 8001f28:	080028c4 	.word	0x080028c4
 8001f2c:	080028c8 	.word	0x080028c8

08001f30 <__retarget_lock_acquire_recursive>:
 8001f30:	4770      	bx	lr

08001f32 <__retarget_lock_release_recursive>:
 8001f32:	4770      	bx	lr

08001f34 <_free_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4605      	mov	r5, r0
 8001f38:	2900      	cmp	r1, #0
 8001f3a:	d040      	beq.n	8001fbe <_free_r+0x8a>
 8001f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f40:	1f0c      	subs	r4, r1, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bfb8      	it	lt
 8001f46:	18e4      	addlt	r4, r4, r3
 8001f48:	f000 f8de 	bl	8002108 <__malloc_lock>
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <_free_r+0x8c>)
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	b933      	cbnz	r3, 8001f60 <_free_r+0x2c>
 8001f52:	6063      	str	r3, [r4, #4]
 8001f54:	6014      	str	r4, [r2, #0]
 8001f56:	4628      	mov	r0, r5
 8001f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f5c:	f000 b8da 	b.w	8002114 <__malloc_unlock>
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	d908      	bls.n	8001f76 <_free_r+0x42>
 8001f64:	6820      	ldr	r0, [r4, #0]
 8001f66:	1821      	adds	r1, r4, r0
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	bf01      	itttt	eq
 8001f6c:	6819      	ldreq	r1, [r3, #0]
 8001f6e:	685b      	ldreq	r3, [r3, #4]
 8001f70:	1809      	addeq	r1, r1, r0
 8001f72:	6021      	streq	r1, [r4, #0]
 8001f74:	e7ed      	b.n	8001f52 <_free_r+0x1e>
 8001f76:	461a      	mov	r2, r3
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	b10b      	cbz	r3, 8001f80 <_free_r+0x4c>
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	d9fa      	bls.n	8001f76 <_free_r+0x42>
 8001f80:	6811      	ldr	r1, [r2, #0]
 8001f82:	1850      	adds	r0, r2, r1
 8001f84:	42a0      	cmp	r0, r4
 8001f86:	d10b      	bne.n	8001fa0 <_free_r+0x6c>
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	4401      	add	r1, r0
 8001f8c:	1850      	adds	r0, r2, r1
 8001f8e:	4283      	cmp	r3, r0
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	d1e0      	bne.n	8001f56 <_free_r+0x22>
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4408      	add	r0, r1
 8001f9a:	6010      	str	r0, [r2, #0]
 8001f9c:	6053      	str	r3, [r2, #4]
 8001f9e:	e7da      	b.n	8001f56 <_free_r+0x22>
 8001fa0:	d902      	bls.n	8001fa8 <_free_r+0x74>
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	602b      	str	r3, [r5, #0]
 8001fa6:	e7d6      	b.n	8001f56 <_free_r+0x22>
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	1821      	adds	r1, r4, r0
 8001fac:	428b      	cmp	r3, r1
 8001fae:	bf01      	itttt	eq
 8001fb0:	6819      	ldreq	r1, [r3, #0]
 8001fb2:	685b      	ldreq	r3, [r3, #4]
 8001fb4:	1809      	addeq	r1, r1, r0
 8001fb6:	6021      	streq	r1, [r4, #0]
 8001fb8:	6063      	str	r3, [r4, #4]
 8001fba:	6054      	str	r4, [r2, #4]
 8001fbc:	e7cb      	b.n	8001f56 <_free_r+0x22>
 8001fbe:	bd38      	pop	{r3, r4, r5, pc}
 8001fc0:	20000254 	.word	0x20000254

08001fc4 <sbrk_aligned>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8002004 <sbrk_aligned+0x40>)
 8001fc8:	460c      	mov	r4, r1
 8001fca:	6831      	ldr	r1, [r6, #0]
 8001fcc:	4605      	mov	r5, r0
 8001fce:	b911      	cbnz	r1, 8001fd6 <sbrk_aligned+0x12>
 8001fd0:	f000 fbaa 	bl	8002728 <_sbrk_r>
 8001fd4:	6030      	str	r0, [r6, #0]
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f000 fba5 	bl	8002728 <_sbrk_r>
 8001fde:	1c43      	adds	r3, r0, #1
 8001fe0:	d103      	bne.n	8001fea <sbrk_aligned+0x26>
 8001fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
 8001fea:	1cc4      	adds	r4, r0, #3
 8001fec:	f024 0403 	bic.w	r4, r4, #3
 8001ff0:	42a0      	cmp	r0, r4
 8001ff2:	d0f8      	beq.n	8001fe6 <sbrk_aligned+0x22>
 8001ff4:	1a21      	subs	r1, r4, r0
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	f000 fb96 	bl	8002728 <_sbrk_r>
 8001ffc:	3001      	adds	r0, #1
 8001ffe:	d1f2      	bne.n	8001fe6 <sbrk_aligned+0x22>
 8002000:	e7ef      	b.n	8001fe2 <sbrk_aligned+0x1e>
 8002002:	bf00      	nop
 8002004:	20000250 	.word	0x20000250

08002008 <_malloc_r>:
 8002008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800200c:	1ccd      	adds	r5, r1, #3
 800200e:	f025 0503 	bic.w	r5, r5, #3
 8002012:	3508      	adds	r5, #8
 8002014:	2d0c      	cmp	r5, #12
 8002016:	bf38      	it	cc
 8002018:	250c      	movcc	r5, #12
 800201a:	2d00      	cmp	r5, #0
 800201c:	4606      	mov	r6, r0
 800201e:	db01      	blt.n	8002024 <_malloc_r+0x1c>
 8002020:	42a9      	cmp	r1, r5
 8002022:	d904      	bls.n	800202e <_malloc_r+0x26>
 8002024:	230c      	movs	r3, #12
 8002026:	6033      	str	r3, [r6, #0]
 8002028:	2000      	movs	r0, #0
 800202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800202e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002104 <_malloc_r+0xfc>
 8002032:	f000 f869 	bl	8002108 <__malloc_lock>
 8002036:	f8d8 3000 	ldr.w	r3, [r8]
 800203a:	461c      	mov	r4, r3
 800203c:	bb44      	cbnz	r4, 8002090 <_malloc_r+0x88>
 800203e:	4629      	mov	r1, r5
 8002040:	4630      	mov	r0, r6
 8002042:	f7ff ffbf 	bl	8001fc4 <sbrk_aligned>
 8002046:	1c43      	adds	r3, r0, #1
 8002048:	4604      	mov	r4, r0
 800204a:	d158      	bne.n	80020fe <_malloc_r+0xf6>
 800204c:	f8d8 4000 	ldr.w	r4, [r8]
 8002050:	4627      	mov	r7, r4
 8002052:	2f00      	cmp	r7, #0
 8002054:	d143      	bne.n	80020de <_malloc_r+0xd6>
 8002056:	2c00      	cmp	r4, #0
 8002058:	d04b      	beq.n	80020f2 <_malloc_r+0xea>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	4639      	mov	r1, r7
 800205e:	4630      	mov	r0, r6
 8002060:	eb04 0903 	add.w	r9, r4, r3
 8002064:	f000 fb60 	bl	8002728 <_sbrk_r>
 8002068:	4581      	cmp	r9, r0
 800206a:	d142      	bne.n	80020f2 <_malloc_r+0xea>
 800206c:	6821      	ldr	r1, [r4, #0]
 800206e:	4630      	mov	r0, r6
 8002070:	1a6d      	subs	r5, r5, r1
 8002072:	4629      	mov	r1, r5
 8002074:	f7ff ffa6 	bl	8001fc4 <sbrk_aligned>
 8002078:	3001      	adds	r0, #1
 800207a:	d03a      	beq.n	80020f2 <_malloc_r+0xea>
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	442b      	add	r3, r5
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	f8d8 3000 	ldr.w	r3, [r8]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	bb62      	cbnz	r2, 80020e4 <_malloc_r+0xdc>
 800208a:	f8c8 7000 	str.w	r7, [r8]
 800208e:	e00f      	b.n	80020b0 <_malloc_r+0xa8>
 8002090:	6822      	ldr	r2, [r4, #0]
 8002092:	1b52      	subs	r2, r2, r5
 8002094:	d420      	bmi.n	80020d8 <_malloc_r+0xd0>
 8002096:	2a0b      	cmp	r2, #11
 8002098:	d917      	bls.n	80020ca <_malloc_r+0xc2>
 800209a:	1961      	adds	r1, r4, r5
 800209c:	42a3      	cmp	r3, r4
 800209e:	6025      	str	r5, [r4, #0]
 80020a0:	bf18      	it	ne
 80020a2:	6059      	strne	r1, [r3, #4]
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	bf08      	it	eq
 80020a8:	f8c8 1000 	streq.w	r1, [r8]
 80020ac:	5162      	str	r2, [r4, r5]
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	4630      	mov	r0, r6
 80020b2:	f000 f82f 	bl	8002114 <__malloc_unlock>
 80020b6:	f104 000b 	add.w	r0, r4, #11
 80020ba:	1d23      	adds	r3, r4, #4
 80020bc:	f020 0007 	bic.w	r0, r0, #7
 80020c0:	1ac2      	subs	r2, r0, r3
 80020c2:	bf1c      	itt	ne
 80020c4:	1a1b      	subne	r3, r3, r0
 80020c6:	50a3      	strne	r3, [r4, r2]
 80020c8:	e7af      	b.n	800202a <_malloc_r+0x22>
 80020ca:	6862      	ldr	r2, [r4, #4]
 80020cc:	42a3      	cmp	r3, r4
 80020ce:	bf0c      	ite	eq
 80020d0:	f8c8 2000 	streq.w	r2, [r8]
 80020d4:	605a      	strne	r2, [r3, #4]
 80020d6:	e7eb      	b.n	80020b0 <_malloc_r+0xa8>
 80020d8:	4623      	mov	r3, r4
 80020da:	6864      	ldr	r4, [r4, #4]
 80020dc:	e7ae      	b.n	800203c <_malloc_r+0x34>
 80020de:	463c      	mov	r4, r7
 80020e0:	687f      	ldr	r7, [r7, #4]
 80020e2:	e7b6      	b.n	8002052 <_malloc_r+0x4a>
 80020e4:	461a      	mov	r2, r3
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	42a3      	cmp	r3, r4
 80020ea:	d1fb      	bne.n	80020e4 <_malloc_r+0xdc>
 80020ec:	2300      	movs	r3, #0
 80020ee:	6053      	str	r3, [r2, #4]
 80020f0:	e7de      	b.n	80020b0 <_malloc_r+0xa8>
 80020f2:	230c      	movs	r3, #12
 80020f4:	4630      	mov	r0, r6
 80020f6:	6033      	str	r3, [r6, #0]
 80020f8:	f000 f80c 	bl	8002114 <__malloc_unlock>
 80020fc:	e794      	b.n	8002028 <_malloc_r+0x20>
 80020fe:	6005      	str	r5, [r0, #0]
 8002100:	e7d6      	b.n	80020b0 <_malloc_r+0xa8>
 8002102:	bf00      	nop
 8002104:	20000254 	.word	0x20000254

08002108 <__malloc_lock>:
 8002108:	4801      	ldr	r0, [pc, #4]	@ (8002110 <__malloc_lock+0x8>)
 800210a:	f7ff bf11 	b.w	8001f30 <__retarget_lock_acquire_recursive>
 800210e:	bf00      	nop
 8002110:	2000024c 	.word	0x2000024c

08002114 <__malloc_unlock>:
 8002114:	4801      	ldr	r0, [pc, #4]	@ (800211c <__malloc_unlock+0x8>)
 8002116:	f7ff bf0c 	b.w	8001f32 <__retarget_lock_release_recursive>
 800211a:	bf00      	nop
 800211c:	2000024c 	.word	0x2000024c

08002120 <__ssputs_r>:
 8002120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002124:	461f      	mov	r7, r3
 8002126:	688e      	ldr	r6, [r1, #8]
 8002128:	4682      	mov	sl, r0
 800212a:	42be      	cmp	r6, r7
 800212c:	460c      	mov	r4, r1
 800212e:	4690      	mov	r8, r2
 8002130:	680b      	ldr	r3, [r1, #0]
 8002132:	d82d      	bhi.n	8002190 <__ssputs_r+0x70>
 8002134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002138:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800213c:	d026      	beq.n	800218c <__ssputs_r+0x6c>
 800213e:	6965      	ldr	r5, [r4, #20]
 8002140:	6909      	ldr	r1, [r1, #16]
 8002142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002146:	eba3 0901 	sub.w	r9, r3, r1
 800214a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800214e:	1c7b      	adds	r3, r7, #1
 8002150:	444b      	add	r3, r9
 8002152:	106d      	asrs	r5, r5, #1
 8002154:	429d      	cmp	r5, r3
 8002156:	bf38      	it	cc
 8002158:	461d      	movcc	r5, r3
 800215a:	0553      	lsls	r3, r2, #21
 800215c:	d527      	bpl.n	80021ae <__ssputs_r+0x8e>
 800215e:	4629      	mov	r1, r5
 8002160:	f7ff ff52 	bl	8002008 <_malloc_r>
 8002164:	4606      	mov	r6, r0
 8002166:	b360      	cbz	r0, 80021c2 <__ssputs_r+0xa2>
 8002168:	464a      	mov	r2, r9
 800216a:	6921      	ldr	r1, [r4, #16]
 800216c:	f000 fafa 	bl	8002764 <memcpy>
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800217a:	81a3      	strh	r3, [r4, #12]
 800217c:	6126      	str	r6, [r4, #16]
 800217e:	444e      	add	r6, r9
 8002180:	6026      	str	r6, [r4, #0]
 8002182:	463e      	mov	r6, r7
 8002184:	6165      	str	r5, [r4, #20]
 8002186:	eba5 0509 	sub.w	r5, r5, r9
 800218a:	60a5      	str	r5, [r4, #8]
 800218c:	42be      	cmp	r6, r7
 800218e:	d900      	bls.n	8002192 <__ssputs_r+0x72>
 8002190:	463e      	mov	r6, r7
 8002192:	4632      	mov	r2, r6
 8002194:	4641      	mov	r1, r8
 8002196:	6820      	ldr	r0, [r4, #0]
 8002198:	f000 faac 	bl	80026f4 <memmove>
 800219c:	2000      	movs	r0, #0
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	1b9b      	subs	r3, r3, r6
 80021a2:	60a3      	str	r3, [r4, #8]
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	4433      	add	r3, r6
 80021a8:	6023      	str	r3, [r4, #0]
 80021aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ae:	462a      	mov	r2, r5
 80021b0:	f000 fae6 	bl	8002780 <_realloc_r>
 80021b4:	4606      	mov	r6, r0
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d1e0      	bne.n	800217c <__ssputs_r+0x5c>
 80021ba:	4650      	mov	r0, sl
 80021bc:	6921      	ldr	r1, [r4, #16]
 80021be:	f7ff feb9 	bl	8001f34 <_free_r>
 80021c2:	230c      	movs	r3, #12
 80021c4:	f8ca 3000 	str.w	r3, [sl]
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	f04f 30ff 	mov.w	r0, #4294967295
 80021ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021d2:	81a3      	strh	r3, [r4, #12]
 80021d4:	e7e9      	b.n	80021aa <__ssputs_r+0x8a>
	...

080021d8 <_svfiprintf_r>:
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021dc:	4698      	mov	r8, r3
 80021de:	898b      	ldrh	r3, [r1, #12]
 80021e0:	4607      	mov	r7, r0
 80021e2:	061b      	lsls	r3, r3, #24
 80021e4:	460d      	mov	r5, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	b09d      	sub	sp, #116	@ 0x74
 80021ea:	d510      	bpl.n	800220e <_svfiprintf_r+0x36>
 80021ec:	690b      	ldr	r3, [r1, #16]
 80021ee:	b973      	cbnz	r3, 800220e <_svfiprintf_r+0x36>
 80021f0:	2140      	movs	r1, #64	@ 0x40
 80021f2:	f7ff ff09 	bl	8002008 <_malloc_r>
 80021f6:	6028      	str	r0, [r5, #0]
 80021f8:	6128      	str	r0, [r5, #16]
 80021fa:	b930      	cbnz	r0, 800220a <_svfiprintf_r+0x32>
 80021fc:	230c      	movs	r3, #12
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	b01d      	add	sp, #116	@ 0x74
 8002206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220a:	2340      	movs	r3, #64	@ 0x40
 800220c:	616b      	str	r3, [r5, #20]
 800220e:	2300      	movs	r3, #0
 8002210:	9309      	str	r3, [sp, #36]	@ 0x24
 8002212:	2320      	movs	r3, #32
 8002214:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002218:	2330      	movs	r3, #48	@ 0x30
 800221a:	f04f 0901 	mov.w	r9, #1
 800221e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002222:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80023bc <_svfiprintf_r+0x1e4>
 8002226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800222a:	4623      	mov	r3, r4
 800222c:	469a      	mov	sl, r3
 800222e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002232:	b10a      	cbz	r2, 8002238 <_svfiprintf_r+0x60>
 8002234:	2a25      	cmp	r2, #37	@ 0x25
 8002236:	d1f9      	bne.n	800222c <_svfiprintf_r+0x54>
 8002238:	ebba 0b04 	subs.w	fp, sl, r4
 800223c:	d00b      	beq.n	8002256 <_svfiprintf_r+0x7e>
 800223e:	465b      	mov	r3, fp
 8002240:	4622      	mov	r2, r4
 8002242:	4629      	mov	r1, r5
 8002244:	4638      	mov	r0, r7
 8002246:	f7ff ff6b 	bl	8002120 <__ssputs_r>
 800224a:	3001      	adds	r0, #1
 800224c:	f000 80a7 	beq.w	800239e <_svfiprintf_r+0x1c6>
 8002250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002252:	445a      	add	r2, fp
 8002254:	9209      	str	r2, [sp, #36]	@ 0x24
 8002256:	f89a 3000 	ldrb.w	r3, [sl]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 809f 	beq.w	800239e <_svfiprintf_r+0x1c6>
 8002260:	2300      	movs	r3, #0
 8002262:	f04f 32ff 	mov.w	r2, #4294967295
 8002266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800226a:	f10a 0a01 	add.w	sl, sl, #1
 800226e:	9304      	str	r3, [sp, #16]
 8002270:	9307      	str	r3, [sp, #28]
 8002272:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002276:	931a      	str	r3, [sp, #104]	@ 0x68
 8002278:	4654      	mov	r4, sl
 800227a:	2205      	movs	r2, #5
 800227c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002280:	484e      	ldr	r0, [pc, #312]	@ (80023bc <_svfiprintf_r+0x1e4>)
 8002282:	f000 fa61 	bl	8002748 <memchr>
 8002286:	9a04      	ldr	r2, [sp, #16]
 8002288:	b9d8      	cbnz	r0, 80022c2 <_svfiprintf_r+0xea>
 800228a:	06d0      	lsls	r0, r2, #27
 800228c:	bf44      	itt	mi
 800228e:	2320      	movmi	r3, #32
 8002290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002294:	0711      	lsls	r1, r2, #28
 8002296:	bf44      	itt	mi
 8002298:	232b      	movmi	r3, #43	@ 0x2b
 800229a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800229e:	f89a 3000 	ldrb.w	r3, [sl]
 80022a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80022a4:	d015      	beq.n	80022d2 <_svfiprintf_r+0xfa>
 80022a6:	4654      	mov	r4, sl
 80022a8:	2000      	movs	r0, #0
 80022aa:	f04f 0c0a 	mov.w	ip, #10
 80022ae:	9a07      	ldr	r2, [sp, #28]
 80022b0:	4621      	mov	r1, r4
 80022b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022b6:	3b30      	subs	r3, #48	@ 0x30
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d94b      	bls.n	8002354 <_svfiprintf_r+0x17c>
 80022bc:	b1b0      	cbz	r0, 80022ec <_svfiprintf_r+0x114>
 80022be:	9207      	str	r2, [sp, #28]
 80022c0:	e014      	b.n	80022ec <_svfiprintf_r+0x114>
 80022c2:	eba0 0308 	sub.w	r3, r0, r8
 80022c6:	fa09 f303 	lsl.w	r3, r9, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	46a2      	mov	sl, r4
 80022ce:	9304      	str	r3, [sp, #16]
 80022d0:	e7d2      	b.n	8002278 <_svfiprintf_r+0xa0>
 80022d2:	9b03      	ldr	r3, [sp, #12]
 80022d4:	1d19      	adds	r1, r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	9103      	str	r1, [sp, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bfbb      	ittet	lt
 80022de:	425b      	neglt	r3, r3
 80022e0:	f042 0202 	orrlt.w	r2, r2, #2
 80022e4:	9307      	strge	r3, [sp, #28]
 80022e6:	9307      	strlt	r3, [sp, #28]
 80022e8:	bfb8      	it	lt
 80022ea:	9204      	strlt	r2, [sp, #16]
 80022ec:	7823      	ldrb	r3, [r4, #0]
 80022ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80022f0:	d10a      	bne.n	8002308 <_svfiprintf_r+0x130>
 80022f2:	7863      	ldrb	r3, [r4, #1]
 80022f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80022f6:	d132      	bne.n	800235e <_svfiprintf_r+0x186>
 80022f8:	9b03      	ldr	r3, [sp, #12]
 80022fa:	3402      	adds	r4, #2
 80022fc:	1d1a      	adds	r2, r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9203      	str	r2, [sp, #12]
 8002302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002306:	9305      	str	r3, [sp, #20]
 8002308:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80023c0 <_svfiprintf_r+0x1e8>
 800230c:	2203      	movs	r2, #3
 800230e:	4650      	mov	r0, sl
 8002310:	7821      	ldrb	r1, [r4, #0]
 8002312:	f000 fa19 	bl	8002748 <memchr>
 8002316:	b138      	cbz	r0, 8002328 <_svfiprintf_r+0x150>
 8002318:	2240      	movs	r2, #64	@ 0x40
 800231a:	9b04      	ldr	r3, [sp, #16]
 800231c:	eba0 000a 	sub.w	r0, r0, sl
 8002320:	4082      	lsls	r2, r0
 8002322:	4313      	orrs	r3, r2
 8002324:	3401      	adds	r4, #1
 8002326:	9304      	str	r3, [sp, #16]
 8002328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800232c:	2206      	movs	r2, #6
 800232e:	4825      	ldr	r0, [pc, #148]	@ (80023c4 <_svfiprintf_r+0x1ec>)
 8002330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002334:	f000 fa08 	bl	8002748 <memchr>
 8002338:	2800      	cmp	r0, #0
 800233a:	d036      	beq.n	80023aa <_svfiprintf_r+0x1d2>
 800233c:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <_svfiprintf_r+0x1f0>)
 800233e:	bb1b      	cbnz	r3, 8002388 <_svfiprintf_r+0x1b0>
 8002340:	9b03      	ldr	r3, [sp, #12]
 8002342:	3307      	adds	r3, #7
 8002344:	f023 0307 	bic.w	r3, r3, #7
 8002348:	3308      	adds	r3, #8
 800234a:	9303      	str	r3, [sp, #12]
 800234c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800234e:	4433      	add	r3, r6
 8002350:	9309      	str	r3, [sp, #36]	@ 0x24
 8002352:	e76a      	b.n	800222a <_svfiprintf_r+0x52>
 8002354:	460c      	mov	r4, r1
 8002356:	2001      	movs	r0, #1
 8002358:	fb0c 3202 	mla	r2, ip, r2, r3
 800235c:	e7a8      	b.n	80022b0 <_svfiprintf_r+0xd8>
 800235e:	2300      	movs	r3, #0
 8002360:	f04f 0c0a 	mov.w	ip, #10
 8002364:	4619      	mov	r1, r3
 8002366:	3401      	adds	r4, #1
 8002368:	9305      	str	r3, [sp, #20]
 800236a:	4620      	mov	r0, r4
 800236c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002370:	3a30      	subs	r2, #48	@ 0x30
 8002372:	2a09      	cmp	r2, #9
 8002374:	d903      	bls.n	800237e <_svfiprintf_r+0x1a6>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0c6      	beq.n	8002308 <_svfiprintf_r+0x130>
 800237a:	9105      	str	r1, [sp, #20]
 800237c:	e7c4      	b.n	8002308 <_svfiprintf_r+0x130>
 800237e:	4604      	mov	r4, r0
 8002380:	2301      	movs	r3, #1
 8002382:	fb0c 2101 	mla	r1, ip, r1, r2
 8002386:	e7f0      	b.n	800236a <_svfiprintf_r+0x192>
 8002388:	ab03      	add	r3, sp, #12
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	462a      	mov	r2, r5
 800238e:	4638      	mov	r0, r7
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <_svfiprintf_r+0x1f4>)
 8002392:	a904      	add	r1, sp, #16
 8002394:	f3af 8000 	nop.w
 8002398:	1c42      	adds	r2, r0, #1
 800239a:	4606      	mov	r6, r0
 800239c:	d1d6      	bne.n	800234c <_svfiprintf_r+0x174>
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	065b      	lsls	r3, r3, #25
 80023a2:	f53f af2d 	bmi.w	8002200 <_svfiprintf_r+0x28>
 80023a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80023a8:	e72c      	b.n	8002204 <_svfiprintf_r+0x2c>
 80023aa:	ab03      	add	r3, sp, #12
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	462a      	mov	r2, r5
 80023b0:	4638      	mov	r0, r7
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <_svfiprintf_r+0x1f4>)
 80023b4:	a904      	add	r1, sp, #16
 80023b6:	f000 f87d 	bl	80024b4 <_printf_i>
 80023ba:	e7ed      	b.n	8002398 <_svfiprintf_r+0x1c0>
 80023bc:	0800288e 	.word	0x0800288e
 80023c0:	08002894 	.word	0x08002894
 80023c4:	08002898 	.word	0x08002898
 80023c8:	00000000 	.word	0x00000000
 80023cc:	08002121 	.word	0x08002121

080023d0 <_printf_common>:
 80023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d4:	4616      	mov	r6, r2
 80023d6:	4698      	mov	r8, r3
 80023d8:	688a      	ldr	r2, [r1, #8]
 80023da:	690b      	ldr	r3, [r1, #16]
 80023dc:	4607      	mov	r7, r0
 80023de:	4293      	cmp	r3, r2
 80023e0:	bfb8      	it	lt
 80023e2:	4613      	movlt	r3, r2
 80023e4:	6033      	str	r3, [r6, #0]
 80023e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023ea:	460c      	mov	r4, r1
 80023ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023f0:	b10a      	cbz	r2, 80023f6 <_printf_common+0x26>
 80023f2:	3301      	adds	r3, #1
 80023f4:	6033      	str	r3, [r6, #0]
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	0699      	lsls	r1, r3, #26
 80023fa:	bf42      	ittt	mi
 80023fc:	6833      	ldrmi	r3, [r6, #0]
 80023fe:	3302      	addmi	r3, #2
 8002400:	6033      	strmi	r3, [r6, #0]
 8002402:	6825      	ldr	r5, [r4, #0]
 8002404:	f015 0506 	ands.w	r5, r5, #6
 8002408:	d106      	bne.n	8002418 <_printf_common+0x48>
 800240a:	f104 0a19 	add.w	sl, r4, #25
 800240e:	68e3      	ldr	r3, [r4, #12]
 8002410:	6832      	ldr	r2, [r6, #0]
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	42ab      	cmp	r3, r5
 8002416:	dc2b      	bgt.n	8002470 <_printf_common+0xa0>
 8002418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800241c:	6822      	ldr	r2, [r4, #0]
 800241e:	3b00      	subs	r3, #0
 8002420:	bf18      	it	ne
 8002422:	2301      	movne	r3, #1
 8002424:	0692      	lsls	r2, r2, #26
 8002426:	d430      	bmi.n	800248a <_printf_common+0xba>
 8002428:	4641      	mov	r1, r8
 800242a:	4638      	mov	r0, r7
 800242c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002430:	47c8      	blx	r9
 8002432:	3001      	adds	r0, #1
 8002434:	d023      	beq.n	800247e <_printf_common+0xae>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	6922      	ldr	r2, [r4, #16]
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf14      	ite	ne
 8002442:	2500      	movne	r5, #0
 8002444:	6833      	ldreq	r3, [r6, #0]
 8002446:	f04f 0600 	mov.w	r6, #0
 800244a:	bf08      	it	eq
 800244c:	68e5      	ldreq	r5, [r4, #12]
 800244e:	f104 041a 	add.w	r4, r4, #26
 8002452:	bf08      	it	eq
 8002454:	1aed      	subeq	r5, r5, r3
 8002456:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800245a:	bf08      	it	eq
 800245c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002460:	4293      	cmp	r3, r2
 8002462:	bfc4      	itt	gt
 8002464:	1a9b      	subgt	r3, r3, r2
 8002466:	18ed      	addgt	r5, r5, r3
 8002468:	42b5      	cmp	r5, r6
 800246a:	d11a      	bne.n	80024a2 <_printf_common+0xd2>
 800246c:	2000      	movs	r0, #0
 800246e:	e008      	b.n	8002482 <_printf_common+0xb2>
 8002470:	2301      	movs	r3, #1
 8002472:	4652      	mov	r2, sl
 8002474:	4641      	mov	r1, r8
 8002476:	4638      	mov	r0, r7
 8002478:	47c8      	blx	r9
 800247a:	3001      	adds	r0, #1
 800247c:	d103      	bne.n	8002486 <_printf_common+0xb6>
 800247e:	f04f 30ff 	mov.w	r0, #4294967295
 8002482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002486:	3501      	adds	r5, #1
 8002488:	e7c1      	b.n	800240e <_printf_common+0x3e>
 800248a:	2030      	movs	r0, #48	@ 0x30
 800248c:	18e1      	adds	r1, r4, r3
 800248e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002498:	4422      	add	r2, r4
 800249a:	3302      	adds	r3, #2
 800249c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80024a0:	e7c2      	b.n	8002428 <_printf_common+0x58>
 80024a2:	2301      	movs	r3, #1
 80024a4:	4622      	mov	r2, r4
 80024a6:	4641      	mov	r1, r8
 80024a8:	4638      	mov	r0, r7
 80024aa:	47c8      	blx	r9
 80024ac:	3001      	adds	r0, #1
 80024ae:	d0e6      	beq.n	800247e <_printf_common+0xae>
 80024b0:	3601      	adds	r6, #1
 80024b2:	e7d9      	b.n	8002468 <_printf_common+0x98>

080024b4 <_printf_i>:
 80024b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024b8:	7e0f      	ldrb	r7, [r1, #24]
 80024ba:	4691      	mov	r9, r2
 80024bc:	2f78      	cmp	r7, #120	@ 0x78
 80024be:	4680      	mov	r8, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	469a      	mov	sl, r3
 80024c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024ca:	d807      	bhi.n	80024dc <_printf_i+0x28>
 80024cc:	2f62      	cmp	r7, #98	@ 0x62
 80024ce:	d80a      	bhi.n	80024e6 <_printf_i+0x32>
 80024d0:	2f00      	cmp	r7, #0
 80024d2:	f000 80d3 	beq.w	800267c <_printf_i+0x1c8>
 80024d6:	2f58      	cmp	r7, #88	@ 0x58
 80024d8:	f000 80ba 	beq.w	8002650 <_printf_i+0x19c>
 80024dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024e4:	e03a      	b.n	800255c <_printf_i+0xa8>
 80024e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024ea:	2b15      	cmp	r3, #21
 80024ec:	d8f6      	bhi.n	80024dc <_printf_i+0x28>
 80024ee:	a101      	add	r1, pc, #4	@ (adr r1, 80024f4 <_printf_i+0x40>)
 80024f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024f4:	0800254d 	.word	0x0800254d
 80024f8:	08002561 	.word	0x08002561
 80024fc:	080024dd 	.word	0x080024dd
 8002500:	080024dd 	.word	0x080024dd
 8002504:	080024dd 	.word	0x080024dd
 8002508:	080024dd 	.word	0x080024dd
 800250c:	08002561 	.word	0x08002561
 8002510:	080024dd 	.word	0x080024dd
 8002514:	080024dd 	.word	0x080024dd
 8002518:	080024dd 	.word	0x080024dd
 800251c:	080024dd 	.word	0x080024dd
 8002520:	08002663 	.word	0x08002663
 8002524:	0800258b 	.word	0x0800258b
 8002528:	0800261d 	.word	0x0800261d
 800252c:	080024dd 	.word	0x080024dd
 8002530:	080024dd 	.word	0x080024dd
 8002534:	08002685 	.word	0x08002685
 8002538:	080024dd 	.word	0x080024dd
 800253c:	0800258b 	.word	0x0800258b
 8002540:	080024dd 	.word	0x080024dd
 8002544:	080024dd 	.word	0x080024dd
 8002548:	08002625 	.word	0x08002625
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6032      	str	r2, [r6, #0]
 8002554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800255c:	2301      	movs	r3, #1
 800255e:	e09e      	b.n	800269e <_printf_i+0x1ea>
 8002560:	6833      	ldr	r3, [r6, #0]
 8002562:	6820      	ldr	r0, [r4, #0]
 8002564:	1d19      	adds	r1, r3, #4
 8002566:	6031      	str	r1, [r6, #0]
 8002568:	0606      	lsls	r6, r0, #24
 800256a:	d501      	bpl.n	8002570 <_printf_i+0xbc>
 800256c:	681d      	ldr	r5, [r3, #0]
 800256e:	e003      	b.n	8002578 <_printf_i+0xc4>
 8002570:	0645      	lsls	r5, r0, #25
 8002572:	d5fb      	bpl.n	800256c <_printf_i+0xb8>
 8002574:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002578:	2d00      	cmp	r5, #0
 800257a:	da03      	bge.n	8002584 <_printf_i+0xd0>
 800257c:	232d      	movs	r3, #45	@ 0x2d
 800257e:	426d      	negs	r5, r5
 8002580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002584:	230a      	movs	r3, #10
 8002586:	4859      	ldr	r0, [pc, #356]	@ (80026ec <_printf_i+0x238>)
 8002588:	e011      	b.n	80025ae <_printf_i+0xfa>
 800258a:	6821      	ldr	r1, [r4, #0]
 800258c:	6833      	ldr	r3, [r6, #0]
 800258e:	0608      	lsls	r0, r1, #24
 8002590:	f853 5b04 	ldr.w	r5, [r3], #4
 8002594:	d402      	bmi.n	800259c <_printf_i+0xe8>
 8002596:	0649      	lsls	r1, r1, #25
 8002598:	bf48      	it	mi
 800259a:	b2ad      	uxthmi	r5, r5
 800259c:	2f6f      	cmp	r7, #111	@ 0x6f
 800259e:	6033      	str	r3, [r6, #0]
 80025a0:	bf14      	ite	ne
 80025a2:	230a      	movne	r3, #10
 80025a4:	2308      	moveq	r3, #8
 80025a6:	4851      	ldr	r0, [pc, #324]	@ (80026ec <_printf_i+0x238>)
 80025a8:	2100      	movs	r1, #0
 80025aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025ae:	6866      	ldr	r6, [r4, #4]
 80025b0:	2e00      	cmp	r6, #0
 80025b2:	bfa8      	it	ge
 80025b4:	6821      	ldrge	r1, [r4, #0]
 80025b6:	60a6      	str	r6, [r4, #8]
 80025b8:	bfa4      	itt	ge
 80025ba:	f021 0104 	bicge.w	r1, r1, #4
 80025be:	6021      	strge	r1, [r4, #0]
 80025c0:	b90d      	cbnz	r5, 80025c6 <_printf_i+0x112>
 80025c2:	2e00      	cmp	r6, #0
 80025c4:	d04b      	beq.n	800265e <_printf_i+0x1aa>
 80025c6:	4616      	mov	r6, r2
 80025c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80025cc:	fb03 5711 	mls	r7, r3, r1, r5
 80025d0:	5dc7      	ldrb	r7, [r0, r7]
 80025d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025d6:	462f      	mov	r7, r5
 80025d8:	42bb      	cmp	r3, r7
 80025da:	460d      	mov	r5, r1
 80025dc:	d9f4      	bls.n	80025c8 <_printf_i+0x114>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d10b      	bne.n	80025fa <_printf_i+0x146>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	07df      	lsls	r7, r3, #31
 80025e6:	d508      	bpl.n	80025fa <_printf_i+0x146>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	6861      	ldr	r1, [r4, #4]
 80025ec:	4299      	cmp	r1, r3
 80025ee:	bfde      	ittt	le
 80025f0:	2330      	movle	r3, #48	@ 0x30
 80025f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025fa:	1b92      	subs	r2, r2, r6
 80025fc:	6122      	str	r2, [r4, #16]
 80025fe:	464b      	mov	r3, r9
 8002600:	4621      	mov	r1, r4
 8002602:	4640      	mov	r0, r8
 8002604:	f8cd a000 	str.w	sl, [sp]
 8002608:	aa03      	add	r2, sp, #12
 800260a:	f7ff fee1 	bl	80023d0 <_printf_common>
 800260e:	3001      	adds	r0, #1
 8002610:	d14a      	bne.n	80026a8 <_printf_i+0x1f4>
 8002612:	f04f 30ff 	mov.w	r0, #4294967295
 8002616:	b004      	add	sp, #16
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	2778      	movs	r7, #120	@ 0x78
 8002626:	4832      	ldr	r0, [pc, #200]	@ (80026f0 <_printf_i+0x23c>)
 8002628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	6831      	ldr	r1, [r6, #0]
 8002630:	061f      	lsls	r7, r3, #24
 8002632:	f851 5b04 	ldr.w	r5, [r1], #4
 8002636:	d402      	bmi.n	800263e <_printf_i+0x18a>
 8002638:	065f      	lsls	r7, r3, #25
 800263a:	bf48      	it	mi
 800263c:	b2ad      	uxthmi	r5, r5
 800263e:	6031      	str	r1, [r6, #0]
 8002640:	07d9      	lsls	r1, r3, #31
 8002642:	bf44      	itt	mi
 8002644:	f043 0320 	orrmi.w	r3, r3, #32
 8002648:	6023      	strmi	r3, [r4, #0]
 800264a:	b11d      	cbz	r5, 8002654 <_printf_i+0x1a0>
 800264c:	2310      	movs	r3, #16
 800264e:	e7ab      	b.n	80025a8 <_printf_i+0xf4>
 8002650:	4826      	ldr	r0, [pc, #152]	@ (80026ec <_printf_i+0x238>)
 8002652:	e7e9      	b.n	8002628 <_printf_i+0x174>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f023 0320 	bic.w	r3, r3, #32
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	e7f6      	b.n	800264c <_printf_i+0x198>
 800265e:	4616      	mov	r6, r2
 8002660:	e7bd      	b.n	80025de <_printf_i+0x12a>
 8002662:	6833      	ldr	r3, [r6, #0]
 8002664:	6825      	ldr	r5, [r4, #0]
 8002666:	1d18      	adds	r0, r3, #4
 8002668:	6961      	ldr	r1, [r4, #20]
 800266a:	6030      	str	r0, [r6, #0]
 800266c:	062e      	lsls	r6, r5, #24
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	d501      	bpl.n	8002676 <_printf_i+0x1c2>
 8002672:	6019      	str	r1, [r3, #0]
 8002674:	e002      	b.n	800267c <_printf_i+0x1c8>
 8002676:	0668      	lsls	r0, r5, #25
 8002678:	d5fb      	bpl.n	8002672 <_printf_i+0x1be>
 800267a:	8019      	strh	r1, [r3, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	4616      	mov	r6, r2
 8002680:	6123      	str	r3, [r4, #16]
 8002682:	e7bc      	b.n	80025fe <_printf_i+0x14a>
 8002684:	6833      	ldr	r3, [r6, #0]
 8002686:	2100      	movs	r1, #0
 8002688:	1d1a      	adds	r2, r3, #4
 800268a:	6032      	str	r2, [r6, #0]
 800268c:	681e      	ldr	r6, [r3, #0]
 800268e:	6862      	ldr	r2, [r4, #4]
 8002690:	4630      	mov	r0, r6
 8002692:	f000 f859 	bl	8002748 <memchr>
 8002696:	b108      	cbz	r0, 800269c <_printf_i+0x1e8>
 8002698:	1b80      	subs	r0, r0, r6
 800269a:	6060      	str	r0, [r4, #4]
 800269c:	6863      	ldr	r3, [r4, #4]
 800269e:	6123      	str	r3, [r4, #16]
 80026a0:	2300      	movs	r3, #0
 80026a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026a6:	e7aa      	b.n	80025fe <_printf_i+0x14a>
 80026a8:	4632      	mov	r2, r6
 80026aa:	4649      	mov	r1, r9
 80026ac:	4640      	mov	r0, r8
 80026ae:	6923      	ldr	r3, [r4, #16]
 80026b0:	47d0      	blx	sl
 80026b2:	3001      	adds	r0, #1
 80026b4:	d0ad      	beq.n	8002612 <_printf_i+0x15e>
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	079b      	lsls	r3, r3, #30
 80026ba:	d413      	bmi.n	80026e4 <_printf_i+0x230>
 80026bc:	68e0      	ldr	r0, [r4, #12]
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	4298      	cmp	r0, r3
 80026c2:	bfb8      	it	lt
 80026c4:	4618      	movlt	r0, r3
 80026c6:	e7a6      	b.n	8002616 <_printf_i+0x162>
 80026c8:	2301      	movs	r3, #1
 80026ca:	4632      	mov	r2, r6
 80026cc:	4649      	mov	r1, r9
 80026ce:	4640      	mov	r0, r8
 80026d0:	47d0      	blx	sl
 80026d2:	3001      	adds	r0, #1
 80026d4:	d09d      	beq.n	8002612 <_printf_i+0x15e>
 80026d6:	3501      	adds	r5, #1
 80026d8:	68e3      	ldr	r3, [r4, #12]
 80026da:	9903      	ldr	r1, [sp, #12]
 80026dc:	1a5b      	subs	r3, r3, r1
 80026de:	42ab      	cmp	r3, r5
 80026e0:	dcf2      	bgt.n	80026c8 <_printf_i+0x214>
 80026e2:	e7eb      	b.n	80026bc <_printf_i+0x208>
 80026e4:	2500      	movs	r5, #0
 80026e6:	f104 0619 	add.w	r6, r4, #25
 80026ea:	e7f5      	b.n	80026d8 <_printf_i+0x224>
 80026ec:	0800289f 	.word	0x0800289f
 80026f0:	080028b0 	.word	0x080028b0

080026f4 <memmove>:
 80026f4:	4288      	cmp	r0, r1
 80026f6:	b510      	push	{r4, lr}
 80026f8:	eb01 0402 	add.w	r4, r1, r2
 80026fc:	d902      	bls.n	8002704 <memmove+0x10>
 80026fe:	4284      	cmp	r4, r0
 8002700:	4623      	mov	r3, r4
 8002702:	d807      	bhi.n	8002714 <memmove+0x20>
 8002704:	1e43      	subs	r3, r0, #1
 8002706:	42a1      	cmp	r1, r4
 8002708:	d008      	beq.n	800271c <memmove+0x28>
 800270a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800270e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002712:	e7f8      	b.n	8002706 <memmove+0x12>
 8002714:	4601      	mov	r1, r0
 8002716:	4402      	add	r2, r0
 8002718:	428a      	cmp	r2, r1
 800271a:	d100      	bne.n	800271e <memmove+0x2a>
 800271c:	bd10      	pop	{r4, pc}
 800271e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002726:	e7f7      	b.n	8002718 <memmove+0x24>

08002728 <_sbrk_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	2300      	movs	r3, #0
 800272c:	4d05      	ldr	r5, [pc, #20]	@ (8002744 <_sbrk_r+0x1c>)
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fd ff8a 	bl	800064c <_sbrk>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_sbrk_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_sbrk_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20000248 	.word	0x20000248

08002748 <memchr>:
 8002748:	4603      	mov	r3, r0
 800274a:	b510      	push	{r4, lr}
 800274c:	b2c9      	uxtb	r1, r1
 800274e:	4402      	add	r2, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	4618      	mov	r0, r3
 8002754:	d101      	bne.n	800275a <memchr+0x12>
 8002756:	2000      	movs	r0, #0
 8002758:	e003      	b.n	8002762 <memchr+0x1a>
 800275a:	7804      	ldrb	r4, [r0, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	428c      	cmp	r4, r1
 8002760:	d1f6      	bne.n	8002750 <memchr+0x8>
 8002762:	bd10      	pop	{r4, pc}

08002764 <memcpy>:
 8002764:	440a      	add	r2, r1
 8002766:	4291      	cmp	r1, r2
 8002768:	f100 33ff 	add.w	r3, r0, #4294967295
 800276c:	d100      	bne.n	8002770 <memcpy+0xc>
 800276e:	4770      	bx	lr
 8002770:	b510      	push	{r4, lr}
 8002772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002776:	4291      	cmp	r1, r2
 8002778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800277c:	d1f9      	bne.n	8002772 <memcpy+0xe>
 800277e:	bd10      	pop	{r4, pc}

08002780 <_realloc_r>:
 8002780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002784:	4680      	mov	r8, r0
 8002786:	4615      	mov	r5, r2
 8002788:	460c      	mov	r4, r1
 800278a:	b921      	cbnz	r1, 8002796 <_realloc_r+0x16>
 800278c:	4611      	mov	r1, r2
 800278e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002792:	f7ff bc39 	b.w	8002008 <_malloc_r>
 8002796:	b92a      	cbnz	r2, 80027a4 <_realloc_r+0x24>
 8002798:	f7ff fbcc 	bl	8001f34 <_free_r>
 800279c:	2400      	movs	r4, #0
 800279e:	4620      	mov	r0, r4
 80027a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027a4:	f000 f81a 	bl	80027dc <_malloc_usable_size_r>
 80027a8:	4285      	cmp	r5, r0
 80027aa:	4606      	mov	r6, r0
 80027ac:	d802      	bhi.n	80027b4 <_realloc_r+0x34>
 80027ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80027b2:	d8f4      	bhi.n	800279e <_realloc_r+0x1e>
 80027b4:	4629      	mov	r1, r5
 80027b6:	4640      	mov	r0, r8
 80027b8:	f7ff fc26 	bl	8002008 <_malloc_r>
 80027bc:	4607      	mov	r7, r0
 80027be:	2800      	cmp	r0, #0
 80027c0:	d0ec      	beq.n	800279c <_realloc_r+0x1c>
 80027c2:	42b5      	cmp	r5, r6
 80027c4:	462a      	mov	r2, r5
 80027c6:	4621      	mov	r1, r4
 80027c8:	bf28      	it	cs
 80027ca:	4632      	movcs	r2, r6
 80027cc:	f7ff ffca 	bl	8002764 <memcpy>
 80027d0:	4621      	mov	r1, r4
 80027d2:	4640      	mov	r0, r8
 80027d4:	f7ff fbae 	bl	8001f34 <_free_r>
 80027d8:	463c      	mov	r4, r7
 80027da:	e7e0      	b.n	800279e <_realloc_r+0x1e>

080027dc <_malloc_usable_size_r>:
 80027dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e0:	1f18      	subs	r0, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfbc      	itt	lt
 80027e6:	580b      	ldrlt	r3, [r1, r0]
 80027e8:	18c0      	addlt	r0, r0, r3
 80027ea:	4770      	bx	lr

080027ec <_init>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr

080027f8 <_fini>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	bf00      	nop
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr
