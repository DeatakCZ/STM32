
10_Timer_CounterMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc8  08002bc8  00004080  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc8  08002bc8  00004080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc8  08002bc8  00004080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bcc  08002bcc  00003bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08002bd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000080  08002c50  00004080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08002c50  0000427c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b453  00000000  00000000  000040a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ff  00000000  00000000  0000f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00010f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ff  00000000  00000000  00011a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e3f  00000000  00000000  00012377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8eb  00000000  00000000  000291b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887c9  00000000  00000000  00035aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be26a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003524  00000000  00000000  000be2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c17d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b40 	.word	0x08002b40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002b40 	.word	0x08002b40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint8_t MSG[20] = {'\0'};
 8000152:	2300      	movs	r3, #0
 8000154:	603b      	str	r3, [r7, #0]
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
 8000160:	60da      	str	r2, [r3, #12]
	uint16_t CounterTicks = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fac3 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f837 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f8f7 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f8cb 	bl	800030c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000176:	f000 f877 	bl	8000268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800017a:	480c      	ldr	r0, [pc, #48]	@ (80001ac <main+0x60>)
 800017c:	f001 fa6a 	bl	8001654 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

//	Read the counter ticks register
	  CounterTicks = TIM2->CNT;
 8000180:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000186:	82fb      	strh	r3, [r7, #22]
//	Print the ticks count via UART2
	  sprintf(MSG, "Ticks = %d\n\r", CounterTicks);
 8000188:	8afa      	ldrh	r2, [r7, #22]
 800018a:	463b      	mov	r3, r7
 800018c:	4908      	ldr	r1, [pc, #32]	@ (80001b0 <main+0x64>)
 800018e:	4618      	mov	r0, r3
 8000190:	f002 f826 	bl	80021e0 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000194:	4639      	mov	r1, r7
 8000196:	2364      	movs	r3, #100	@ 0x64
 8000198:	2214      	movs	r2, #20
 800019a:	4806      	ldr	r0, [pc, #24]	@ (80001b4 <main+0x68>)
 800019c:	f001 fe4c 	bl	8001e38 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80001a0:	2064      	movs	r0, #100	@ 0x64
 80001a2:	f000 fb07 	bl	80007b4 <HAL_Delay>
  {
 80001a6:	bf00      	nop
 80001a8:	e7ea      	b.n	8000180 <main+0x34>
 80001aa:	bf00      	nop
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	08002b58 	.word	0x08002b58
 80001b4:	200000e4 	.word	0x200000e4

080001b8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}


HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, END_MSG, sizeof(END_MSG), 100);
 80001c0:	2364      	movs	r3, #100	@ 0x64
 80001c2:	2223      	movs	r2, #35	@ 0x23
 80001c4:	4903      	ldr	r1, [pc, #12]	@ (80001d4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80001c6:	4804      	ldr	r0, [pc, #16]	@ (80001d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80001c8:	f001 fe36 	bl	8001e38 <HAL_UART_Transmit>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	200000e4 	.word	0x200000e4

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b090      	sub	sp, #64	@ 0x40
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2228      	movs	r2, #40	@ 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 f818 	bl	8002220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000210:	2302      	movs	r3, #2
 8000212:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000218:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800021e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fdb5 	bl	8000d94 <HAL_RCC_OscConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000230:	f000 f904 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000234:	230f      	movs	r3, #15
 8000236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000238:	2302      	movs	r3, #2
 800023a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f001 f822 	bl	8001298 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800025a:	f000 f8ef 	bl	800043c <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	@ 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000284:	4b20      	ldr	r3, [pc, #128]	@ (8000308 <MX_TIM2_Init+0xa0>)
 8000286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <MX_TIM2_Init+0xa0>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000292:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <MX_TIM2_Init+0xa0>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_TIM2_Init+0xa0>)
 800029a:	2214      	movs	r2, #20
 800029c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800029e:	4b1a      	ldr	r3, [pc, #104]	@ (8000308 <MX_TIM2_Init+0xa0>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002a4:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <MX_TIM2_Init+0xa0>)
 80002a6:	2280      	movs	r2, #128	@ 0x80
 80002a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002aa:	4817      	ldr	r0, [pc, #92]	@ (8000308 <MX_TIM2_Init+0xa0>)
 80002ac:	f001 f982 	bl	80015b4 <HAL_TIM_Base_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80002b6:	f000 f8c1 	bl	800043c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80002ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002be:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 80002c8:	230f      	movs	r3, #15
 80002ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	4619      	mov	r1, r3
 80002d2:	480d      	ldr	r0, [pc, #52]	@ (8000308 <MX_TIM2_Init+0xa0>)
 80002d4:	f001 fb00 	bl	80018d8 <HAL_TIM_ConfigClockSource>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80002de:	f000 f8ad 	bl	800043c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	4619      	mov	r1, r3
 80002ee:	4806      	ldr	r0, [pc, #24]	@ (8000308 <MX_TIM2_Init+0xa0>)
 80002f0:	f001 fce2 	bl	8001cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80002fa:	f000 f89f 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000009c 	.word	0x2000009c

0800030c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART2_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART2_UART_Init+0x4c>)
 8000344:	f001 fd28 	bl	8001d98 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f875 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000e4 	.word	0x200000e4
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b2d      	ldr	r3, [pc, #180]	@ (800042c <MX_GPIO_Init+0xcc>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a2c      	ldr	r2, [pc, #176]	@ (800042c <MX_GPIO_Init+0xcc>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b2a      	ldr	r3, [pc, #168]	@ (800042c <MX_GPIO_Init+0xcc>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <MX_GPIO_Init+0xcc>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a26      	ldr	r2, [pc, #152]	@ (800042c <MX_GPIO_Init+0xcc>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <MX_GPIO_Init+0xcc>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a20      	ldr	r2, [pc, #128]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2120      	movs	r1, #32
 80003d8:	4815      	ldr	r0, [pc, #84]	@ (8000430 <MX_GPIO_Init+0xd0>)
 80003da:	f000 fca1 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <MX_GPIO_Init+0xd4>)
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4811      	ldr	r0, [pc, #68]	@ (8000438 <MX_GPIO_Init+0xd8>)
 80003f4:	f000 fb10 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f8:	2320      	movs	r3, #32
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2302      	movs	r3, #2
 8000406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4808      	ldr	r0, [pc, #32]	@ (8000430 <MX_GPIO_Init+0xd0>)
 8000410:	f000 fb02 	bl	8000a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	2028      	movs	r0, #40	@ 0x28
 800041a:	f000 fac6 	bl	80009aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800041e:	2028      	movs	r0, #40	@ 0x28
 8000420:	f000 fadf 	bl	80009e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40021000 	.word	0x40021000
 8000430:	40010800 	.word	0x40010800
 8000434:	10110000 	.word	0x10110000
 8000438:	40011000 	.word	0x40011000

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004ca:	d12b      	bne.n	8000524 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004cc:	4b17      	ldr	r3, [pc, #92]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	4a16      	ldr	r2, [pc, #88]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	61d3      	str	r3, [r2, #28]
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a10      	ldr	r2, [pc, #64]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004fc:	2301      	movs	r3, #1
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	4808      	ldr	r0, [pc, #32]	@ (8000530 <HAL_TIM_Base_MspInit+0x84>)
 8000510:	f000 fa82 	bl	8000a18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	201c      	movs	r0, #28
 800051a:	f000 fa46 	bl	80009aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800051e:	201c      	movs	r0, #28
 8000520:	f000 fa5f 	bl	80009e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	40010800 	.word	0x40010800

08000534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <HAL_UART_MspInit+0x70>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d123      	bne.n	800059c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_UART_MspInit+0x74>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	4a13      	ldr	r2, [pc, #76]	@ (80005a8 <HAL_UART_MspInit+0x74>)
 800055a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800055e:	61d3      	str	r3, [r2, #28]
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <HAL_UART_MspInit+0x74>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <HAL_UART_MspInit+0x74>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <HAL_UART_MspInit+0x74>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <HAL_UART_MspInit+0x74>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000584:	230c      	movs	r3, #12
 8000586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000588:	2302      	movs	r3, #2
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <HAL_UART_MspInit+0x78>)
 8000598:	f000 fa3e 	bl	8000a18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <MemManage_Handler+0x4>

080005c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f8bc 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <TIM2_IRQHandler+0x10>)
 800060e:	f001 f873 	bl	80016f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000009c 	.word	0x2000009c

0800061c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000620:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000624:	f000 fb94 	bl	8000d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f001 fde8 	bl	8002230 <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	2000012c 	.word	0x2000012c
 8000694:	20000280 	.word	0x20000280

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff fff8 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006aa:	490c      	ldr	r1, [pc, #48]	@ (80006dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c0:	4c09      	ldr	r4, [pc, #36]	@ (80006e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 fdb5 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd3b 	bl	800014c <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80006e0:	08002bd0 	.word	0x08002bd0
  ldr r2, =_sbss
 80006e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80006e8:	2000027c 	.word	0x2000027c

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f947 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fe9c 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f95f 	bl	80009fe <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f927 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000024 	.word	0x20000024
 8000774:	2000002c 	.word	0x2000002c
 8000778:	20000028 	.word	0x20000028

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	2000002c 	.word	0x2000002c
 800079c:	20000130 	.word	0x20000130

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000130 	.word	0x20000130

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff fff0 	bl	80007a0 <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_Delay+0x44>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffe0 	bl	80007a0 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000002c 	.word	0x2000002c

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	@ (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	@ (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	@ 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff90 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff2d 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff42 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff90 	bl	80008ec <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5f 	bl	8000898 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff35 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffa2 	bl	8000950 <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	@ 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e169      	b.n	8000d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8158 	bne.w	8000cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4a9a      	ldr	r2, [pc, #616]	@ (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d05e      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a54:	4a98      	ldr	r2, [pc, #608]	@ (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d875      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a98      	ldr	r2, [pc, #608]	@ (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d058      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a60:	4a96      	ldr	r2, [pc, #600]	@ (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d86f      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a66:	4a96      	ldr	r2, [pc, #600]	@ (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d052      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a94      	ldr	r2, [pc, #592]	@ (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d869      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a72:	4a94      	ldr	r2, [pc, #592]	@ (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d04c      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a78:	4a92      	ldr	r2, [pc, #584]	@ (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d863      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a92      	ldr	r2, [pc, #584]	@ (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d046      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a84:	4a90      	ldr	r2, [pc, #576]	@ (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d85d      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d82a      	bhi.n	8000ae4 <HAL_GPIO_Init+0xcc>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d859      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a92:	a201      	add	r2, pc, #4	@ (adr r2, 8000a98 <HAL_GPIO_Init+0x80>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000aed 	.word	0x08000aed
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000b41 	.word	0x08000b41
 8000aa8:	08000b47 	.word	0x08000b47
 8000aac:	08000b47 	.word	0x08000b47
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b47 	.word	0x08000b47
 8000ab8:	08000b47 	.word	0x08000b47
 8000abc:	08000b47 	.word	0x08000b47
 8000ac0:	08000b47 	.word	0x08000b47
 8000ac4:	08000b47 	.word	0x08000b47
 8000ac8:	08000b47 	.word	0x08000b47
 8000acc:	08000b47 	.word	0x08000b47
 8000ad0:	08000b47 	.word	0x08000b47
 8000ad4:	08000b47 	.word	0x08000b47
 8000ad8:	08000b47 	.word	0x08000b47
 8000adc:	08000af5 	.word	0x08000af5
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	4a79      	ldr	r2, [pc, #484]	@ (8000ccc <HAL_GPIO_Init+0x2b4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aea:	e02c      	b.n	8000b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e029      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3304      	adds	r3, #4
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e024      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3308      	adds	r3, #8
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e01f      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e01a      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e013      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	611a      	str	r2, [r3, #16]
          break;
 8000b32:	e009      	b.n	8000b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	615a      	str	r2, [r3, #20]
          break;
 8000b3e:	e003      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          break;
 8000b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d801      	bhi.n	8000b52 <HAL_GPIO_Init+0x13a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_Init+0x13e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3304      	adds	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	@ 0xff
 8000b5c:	d802      	bhi.n	8000b64 <HAL_GPIO_Init+0x14c>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x152>
 8000b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	210f      	movs	r1, #15
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	6a39      	ldr	r1, [r7, #32]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80b1 	beq.w	8000cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb0:	4a48      	ldr	r2, [pc, #288]	@ (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a40      	ldr	r2, [pc, #256]	@ (8000cd8 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1ec>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3f      	ldr	r2, [pc, #252]	@ (8000cdc <HAL_GPIO_Init+0x2c4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1e8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3d      	ldr	r2, [pc, #244]	@ (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e0>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c16:	492f      	ldr	r1, [pc, #188]	@ (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	492c      	ldr	r1, [pc, #176]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4928      	ldr	r1, [pc, #160]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c58:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	4922      	ldr	r1, [pc, #136]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	60cb      	str	r3, [r1, #12]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	491e      	ldr	r1, [pc, #120]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c80:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4918      	ldr	r1, [pc, #96]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4914      	ldr	r1, [pc, #80]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d021      	beq.n	8000cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	490e      	ldr	r1, [pc, #56]	@ (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
 8000cb4:	e021      	b.n	8000cfa <HAL_GPIO_Init+0x2e2>
 8000cb6:	bf00      	nop
 8000cb8:	10320000 	.word	0x10320000
 8000cbc:	10310000 	.word	0x10310000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10110000 	.word	0x10110000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_GPIO_Init+0x304>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4909      	ldr	r1, [pc, #36]	@ (8000d1c <HAL_GPIO_Init+0x304>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f47f ae8e 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	372c      	adds	r7, #44	@ 0x2c
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3c:	e003      	b.n	8000d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f806 	bl	8000d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e272      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8087 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db4:	4b92      	ldr	r3, [pc, #584]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d00c      	beq.n	8000dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d112      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
 8000dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	4b89      	ldr	r3, [pc, #548]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d06c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d168      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e24c      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfa:	d106      	bne.n	8000e0a <HAL_RCC_OscConfig+0x76>
 8000dfc:	4b80      	ldr	r3, [pc, #512]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a7f      	ldr	r2, [pc, #508]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e02e      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x98>
 8000e12:	4b7b      	ldr	r3, [pc, #492]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7a      	ldr	r2, [pc, #488]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b78      	ldr	r3, [pc, #480]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a77      	ldr	r2, [pc, #476]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e01d      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0xbc>
 8000e36:	4b72      	ldr	r3, [pc, #456]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a71      	ldr	r2, [pc, #452]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b6f      	ldr	r3, [pc, #444]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a6e      	ldr	r2, [pc, #440]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e00b      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e50:	4b6b      	ldr	r3, [pc, #428]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a6a      	ldr	r2, [pc, #424]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b68      	ldr	r3, [pc, #416]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a67      	ldr	r2, [pc, #412]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d013      	beq.n	8000e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc96 	bl	80007a0 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fc92 	bl	80007a0 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	@ 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e200      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0xe4>
 8000e96:	e014      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fc82 	bl	80007a0 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc7e 	bl	80007a0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1ec      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	4b53      	ldr	r3, [pc, #332]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x10c>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d063      	beq.n	8000f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ece:	4b4c      	ldr	r3, [pc, #304]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eda:	4b49      	ldr	r3, [pc, #292]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d11c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
 8000ee6:	4b46      	ldr	r3, [pc, #280]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d116      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	4b43      	ldr	r3, [pc, #268]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d001      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e1c0      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4939      	ldr	r1, [pc, #228]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	e03a      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d020      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f28:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fc37 	bl	80007a0 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc33 	bl	80007a0 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1a1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4927      	ldr	r1, [pc, #156]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc16 	bl	80007a0 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc12 	bl	80007a0 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e180      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d03a      	beq.n	8001018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d019      	beq.n	8000fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fbf6 	bl	80007a0 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fbf2 	bl	80007a0 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e160      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 face 	bl	8001578 <RCC_Delay>
 8000fdc:	e01c      	b.n	8001018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fbdc 	bl	80007a0 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	e00f      	b.n	800100c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fbd8 	bl	80007a0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d908      	bls.n	800100c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e146      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	42420000 	.word	0x42420000
 8001008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100c:	4b92      	ldr	r3, [pc, #584]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e9      	bne.n	8000fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a6 	beq.w	8001172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102a:	4b8b      	ldr	r3, [pc, #556]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10d      	bne.n	8001052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b88      	ldr	r3, [pc, #544]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a87      	ldr	r2, [pc, #540]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b85      	ldr	r3, [pc, #532]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001052:	4b82      	ldr	r3, [pc, #520]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105e:	4b7f      	ldr	r3, [pc, #508]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7e      	ldr	r2, [pc, #504]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106a:	f7ff fb99 	bl	80007a0 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001072:	f7ff fb95 	bl	80007a0 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	@ 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e103      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	4b75      	ldr	r3, [pc, #468]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x312>
 8001098:	4b6f      	ldr	r3, [pc, #444]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a6e      	ldr	r2, [pc, #440]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e02d      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x334>
 80010ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a69      	ldr	r2, [pc, #420]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b67      	ldr	r3, [pc, #412]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a66      	ldr	r2, [pc, #408]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	e01c      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x356>
 80010d0:	4b61      	ldr	r3, [pc, #388]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a60      	ldr	r2, [pc, #384]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6213      	str	r3, [r2, #32]
 80010dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	e00b      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6213      	str	r3, [r2, #32]
 80010f6:	4b58      	ldr	r3, [pc, #352]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a57      	ldr	r2, [pc, #348]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fb49 	bl	80007a0 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fb45 	bl	80007a0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0b1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	4b4b      	ldr	r3, [pc, #300]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ee      	beq.n	8001112 <HAL_RCC_OscConfig+0x37e>
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb33 	bl	80007a0 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb2f 	bl	80007a0 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e09b      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	4b40      	ldr	r3, [pc, #256]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d105      	bne.n	8001172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	4b3c      	ldr	r3, [pc, #240]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a3b      	ldr	r2, [pc, #236]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d061      	beq.n	800124c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d146      	bne.n	800121e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb03 	bl	80007a0 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff faff 	bl	80007a0 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e06d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c4:	d108      	bne.n	80011d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4921      	ldr	r1, [pc, #132]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a19      	ldr	r1, [r3, #32]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	430b      	orrs	r3, r1
 80011ea:	491b      	ldr	r1, [pc, #108]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_RCC_OscConfig+0x4cc>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fad3 	bl	80007a0 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7ff facf 	bl	80007a0 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e03d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x46a>
 800121c:	e035      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fabc 	bl	80007a0 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fab8 	bl	80007a0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e026      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x498>
 800124a:	e01e      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e019      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_RCC_OscConfig+0x500>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	429a      	cmp	r2, r3
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d0      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d910      	bls.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b67      	ldr	r3, [pc, #412]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0207 	bic.w	r2, r3, #7
 80012c2:	4965      	ldr	r1, [pc, #404]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e073      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3d      	ldr	r3, [pc, #244]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e06b      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4936      	ldr	r1, [pc, #216]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa0a 	bl	80007a0 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa06 	bl	80007a0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e053      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d210      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4922      	ldr	r1, [pc, #136]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	@ (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_RCC_ClockConfig+0x1cc>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_RCC_ClockConfig+0x1d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f968 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	08002b68 	.word	0x08002b68
 8001464:	20000024 	.word	0x20000024
 8001468:	20000028 	.word	0x20000028

0800146c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <HAL_RCC_GetSysClockFreq+0x94>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d002      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x30>
 8001496:	2b08      	cmp	r3, #8
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_GetSysClockFreq+0x36>
 800149a:	e027      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x98>)
 800149e:	613b      	str	r3, [r7, #16]
      break;
 80014a0:	e027      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d010      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_RCC_GetSysClockFreq+0x94>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	0c5b      	lsrs	r3, r3, #17
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ce:	fb03 f202 	mul.w	r2, r3, r2
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e004      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	613b      	str	r3, [r7, #16]
      break;
 80014ea:	e002      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ee:	613b      	str	r3, [r7, #16]
      break;
 80014f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014f2:	693b      	ldr	r3, [r7, #16]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	007a1200 	.word	0x007a1200
 8001508:	08002b80 	.word	0x08002b80
 800150c:	08002b90 	.word	0x08002b90
 8001510:	003d0900 	.word	0x003d0900

08001514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001518:	4b02      	ldr	r3, [pc, #8]	@ (8001524 <HAL_RCC_GetHCLKFreq+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000024 	.word	0x20000024

08001528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800152c:	f7ff fff2 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	4903      	ldr	r1, [pc, #12]	@ (800154c <HAL_RCC_GetPCLK1Freq+0x24>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	08002b78 	.word	0x08002b78

08001550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001554:	f7ff ffde 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0adb      	lsrs	r3, r3, #11
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	4903      	ldr	r1, [pc, #12]	@ (8001574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	08002b78 	.word	0x08002b78

08001578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <RCC_Delay+0x34>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <RCC_Delay+0x38>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a5b      	lsrs	r3, r3, #9
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001594:	bf00      	nop
  }
  while (Delay --);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	60fa      	str	r2, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <RCC_Delay+0x1c>
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000024 	.word	0x20000024
 80015b0:	10624dd3 	.word	0x10624dd3

080015b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e041      	b.n	800164a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7fe ff66 	bl	80004ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3304      	adds	r3, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f000 fa5c 	bl	8001ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d001      	beq.n	800166c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e03a      	b.n	80016e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_TIM_Base_Start_IT+0x98>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001696:	d009      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d010      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ce:	e007      	b.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40000400 	.word	0x40000400
 80016f4:	40000800 	.word	0x40000800

080016f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d020      	beq.n	800175c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01b      	beq.n	800175c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0202 	mvn.w	r2, #2
 800172c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f998 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8001748:	e005      	b.n	8001756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f98b 	bl	8001a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f99a 	bl	8001a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d020      	beq.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01b      	beq.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0204 	mvn.w	r2, #4
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f972 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f965 	bl	8001a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f974 	bl	8001a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d020      	beq.n	80017f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01b      	beq.n	80017f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f06f 0208 	mvn.w	r2, #8
 80017c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2204      	movs	r2, #4
 80017ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f94c 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 80017e0:	e005      	b.n	80017ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f93f 	bl	8001a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f94e 	bl	8001a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d020      	beq.n	8001840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01b      	beq.n	8001840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0210 	mvn.w	r2, #16
 8001810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2208      	movs	r2, #8
 8001816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f926 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 800182c:	e005      	b.n	800183a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f919 	bl	8001a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f928 	bl	8001a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0201 	mvn.w	r2, #1
 800185c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fcaa 	bl	80001b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa7f 	bl	8001d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f8f8 	bl	8001a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0220 	mvn.w	r2, #32
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fa52 	bl	8001d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_TIM_ConfigClockSource+0x1c>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e0b4      	b.n	8001a5e <HAL_TIM_ConfigClockSource+0x186>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800191a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800192c:	d03e      	beq.n	80019ac <HAL_TIM_ConfigClockSource+0xd4>
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001932:	f200 8087 	bhi.w	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 8001936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800193a:	f000 8086 	beq.w	8001a4a <HAL_TIM_ConfigClockSource+0x172>
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001942:	d87f      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 8001944:	2b70      	cmp	r3, #112	@ 0x70
 8001946:	d01a      	beq.n	800197e <HAL_TIM_ConfigClockSource+0xa6>
 8001948:	2b70      	cmp	r3, #112	@ 0x70
 800194a:	d87b      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 800194c:	2b60      	cmp	r3, #96	@ 0x60
 800194e:	d050      	beq.n	80019f2 <HAL_TIM_ConfigClockSource+0x11a>
 8001950:	2b60      	cmp	r3, #96	@ 0x60
 8001952:	d877      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 8001954:	2b50      	cmp	r3, #80	@ 0x50
 8001956:	d03c      	beq.n	80019d2 <HAL_TIM_ConfigClockSource+0xfa>
 8001958:	2b50      	cmp	r3, #80	@ 0x50
 800195a:	d873      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 800195c:	2b40      	cmp	r3, #64	@ 0x40
 800195e:	d058      	beq.n	8001a12 <HAL_TIM_ConfigClockSource+0x13a>
 8001960:	2b40      	cmp	r3, #64	@ 0x40
 8001962:	d86f      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 8001964:	2b30      	cmp	r3, #48	@ 0x30
 8001966:	d064      	beq.n	8001a32 <HAL_TIM_ConfigClockSource+0x15a>
 8001968:	2b30      	cmp	r3, #48	@ 0x30
 800196a:	d86b      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 800196c:	2b20      	cmp	r3, #32
 800196e:	d060      	beq.n	8001a32 <HAL_TIM_ConfigClockSource+0x15a>
 8001970:	2b20      	cmp	r3, #32
 8001972:	d867      	bhi.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
 8001974:	2b00      	cmp	r3, #0
 8001976:	d05c      	beq.n	8001a32 <HAL_TIM_ConfigClockSource+0x15a>
 8001978:	2b10      	cmp	r3, #16
 800197a:	d05a      	beq.n	8001a32 <HAL_TIM_ConfigClockSource+0x15a>
 800197c:	e062      	b.n	8001a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800198e:	f000 f974 	bl	8001c7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80019a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	609a      	str	r2, [r3, #8]
      break;
 80019aa:	e04f      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019bc:	f000 f95d 	bl	8001c7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019ce:	609a      	str	r2, [r3, #8]
      break;
 80019d0:	e03c      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019de:	461a      	mov	r2, r3
 80019e0:	f000 f8d4 	bl	8001b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2150      	movs	r1, #80	@ 0x50
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f92b 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 80019f0:	e02c      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019fe:	461a      	mov	r2, r3
 8001a00:	f000 f8f2 	bl	8001be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2160      	movs	r1, #96	@ 0x60
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f91b 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 8001a10:	e01c      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f000 f8b4 	bl	8001b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2140      	movs	r1, #64	@ 0x40
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f90b 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 8001a30:	e00c      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f000 f902 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 8001a42:	e003      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
      break;
 8001a48:	e000      	b.n	8001a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8001b80 <TIM_Base_SetConfig+0xd0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00b      	beq.n	8001ae0 <TIM_Base_SetConfig+0x30>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ace:	d007      	beq.n	8001ae0 <TIM_Base_SetConfig+0x30>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b84 <TIM_Base_SetConfig+0xd4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <TIM_Base_SetConfig+0x30>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a2b      	ldr	r2, [pc, #172]	@ (8001b88 <TIM_Base_SetConfig+0xd8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d108      	bne.n	8001af2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a22      	ldr	r2, [pc, #136]	@ (8001b80 <TIM_Base_SetConfig+0xd0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00b      	beq.n	8001b12 <TIM_Base_SetConfig+0x62>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b00:	d007      	beq.n	8001b12 <TIM_Base_SetConfig+0x62>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <TIM_Base_SetConfig+0xd4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d003      	beq.n	8001b12 <TIM_Base_SetConfig+0x62>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <TIM_Base_SetConfig+0xd8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <TIM_Base_SetConfig+0xd0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d103      	bne.n	8001b58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f023 0201 	bic.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]
  }
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f023 0201 	bic.w	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f023 030a 	bic.w	r3, r3, #10
 8001bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	621a      	str	r2, [r3, #32]
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	f023 0210 	bic.w	r2, r3, #16
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	031b      	lsls	r3, r3, #12
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	621a      	str	r2, [r3, #32]
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f043 0307 	orr.w	r3, r3, #7
 8001c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	021a      	lsls	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e046      	b.n	8001d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d009      	beq.n	8001d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10c      	bne.n	8001d4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40012c00 	.word	0x40012c00
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800

08001d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e042      	b.n	8001e30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fbb8 	bl	8000534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	@ 0x24
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f971 	bl	80020c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d175      	bne.n	8001f44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_UART_Transmit+0x2c>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e06e      	b.n	8001f46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2221      	movs	r2, #33	@ 0x21
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e76:	f7fe fc93 	bl	80007a0 <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e90:	d108      	bne.n	8001ea4 <HAL_UART_Transmit+0x6c>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	e003      	b.n	8001eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001eac:	e02e      	b.n	8001f0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 f848 	bl	8001f4e <UART_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e03a      	b.n	8001f46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3302      	adds	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	e007      	b.n	8001efe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3301      	adds	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1cb      	bne.n	8001eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2140      	movs	r1, #64	@ 0x40
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f814 	bl	8001f4e <UART_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e006      	b.n	8001f46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f5e:	e03b      	b.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d037      	beq.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f68:	f7fe fc1a 	bl	80007a0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	6a3a      	ldr	r2, [r7, #32]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d302      	bcc.n	8001f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e03a      	b.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b80      	cmp	r3, #128	@ 0x80
 8001f94:	d020      	beq.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b40      	cmp	r3, #64	@ 0x40
 8001f9a:	d01d      	beq.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d116      	bne.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f81d 	bl	8002000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e00f      	b.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d0b4      	beq.n	8001f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002000:	b480      	push	{r7}
 8002002:	b095      	sub	sp, #84	@ 0x54
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	330c      	adds	r3, #12
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002012:	e853 3f00 	ldrex	r3, [r3]
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800201e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	330c      	adds	r3, #12
 8002026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002028:	643a      	str	r2, [r7, #64]	@ 0x40
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800202e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002030:	e841 2300 	strex	r3, r2, [r1]
 8002034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e5      	bne.n	8002008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3314      	adds	r3, #20
 8002042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	e853 3f00 	ldrex	r3, [r3]
 800204a:	61fb      	str	r3, [r7, #28]
   return(result);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3314      	adds	r3, #20
 800205a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800205c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800205e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002064:	e841 2300 	strex	r3, r2, [r1]
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e5      	bne.n	800203c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	2b01      	cmp	r3, #1
 8002076:	d119      	bne.n	80020ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	e853 3f00 	ldrex	r3, [r3]
 8002086:	60bb      	str	r3, [r7, #8]
   return(result);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f023 0310 	bic.w	r3, r3, #16
 800208e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002098:	61ba      	str	r2, [r7, #24]
 800209a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	e841 2300 	strex	r3, r2, [r1]
 80020a4:	613b      	str	r3, [r7, #16]
   return(result);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e5      	bne.n	8002078 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020ba:	bf00      	nop
 80020bc:	3754      	adds	r7, #84	@ 0x54
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80020fe:	f023 030c 	bic.w	r3, r3, #12
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	430b      	orrs	r3, r1
 800210a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2c      	ldr	r2, [pc, #176]	@ (80021d8 <UART_SetConfig+0x114>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d103      	bne.n	8002134 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800212c:	f7ff fa10 	bl	8001550 <HAL_RCC_GetPCLK2Freq>
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	e002      	b.n	800213a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002134:	f7ff f9f8 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8002138:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	4a22      	ldr	r2, [pc, #136]	@ (80021dc <UART_SetConfig+0x118>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	0119      	lsls	r1, r3, #4
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009a      	lsls	r2, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <UART_SetConfig+0x118>)
 8002172:	fba3 0302 	umull	r0, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2064      	movs	r0, #100	@ 0x64
 800217a:	fb00 f303 	mul.w	r3, r0, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	3332      	adds	r3, #50	@ 0x32
 8002184:	4a15      	ldr	r2, [pc, #84]	@ (80021dc <UART_SetConfig+0x118>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002190:	4419      	add	r1, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	441a      	add	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <UART_SetConfig+0x118>)
 80021aa:	fba3 0302 	umull	r0, r3, r3, r2
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2064      	movs	r0, #100	@ 0x64
 80021b2:	fb00 f303 	mul.w	r3, r0, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	3332      	adds	r3, #50	@ 0x32
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <UART_SetConfig+0x118>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	440a      	add	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40013800 	.word	0x40013800
 80021dc:	51eb851f 	.word	0x51eb851f

080021e0 <siprintf>:
 80021e0:	b40e      	push	{r1, r2, r3}
 80021e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80021e6:	b500      	push	{lr}
 80021e8:	b09c      	sub	sp, #112	@ 0x70
 80021ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80021ec:	9002      	str	r0, [sp, #8]
 80021ee:	9006      	str	r0, [sp, #24]
 80021f0:	9107      	str	r1, [sp, #28]
 80021f2:	9104      	str	r1, [sp, #16]
 80021f4:	4808      	ldr	r0, [pc, #32]	@ (8002218 <siprintf+0x38>)
 80021f6:	4909      	ldr	r1, [pc, #36]	@ (800221c <siprintf+0x3c>)
 80021f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80021fc:	9105      	str	r1, [sp, #20]
 80021fe:	6800      	ldr	r0, [r0, #0]
 8002200:	a902      	add	r1, sp, #8
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	f000 f992 	bl	800252c <_svfiprintf_r>
 8002208:	2200      	movs	r2, #0
 800220a:	9b02      	ldr	r3, [sp, #8]
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	b01c      	add	sp, #112	@ 0x70
 8002210:	f85d eb04 	ldr.w	lr, [sp], #4
 8002214:	b003      	add	sp, #12
 8002216:	4770      	bx	lr
 8002218:	20000030 	.word	0x20000030
 800221c:	ffff0208 	.word	0xffff0208

08002220 <memset>:
 8002220:	4603      	mov	r3, r0
 8002222:	4402      	add	r2, r0
 8002224:	4293      	cmp	r3, r2
 8002226:	d100      	bne.n	800222a <memset+0xa>
 8002228:	4770      	bx	lr
 800222a:	f803 1b01 	strb.w	r1, [r3], #1
 800222e:	e7f9      	b.n	8002224 <memset+0x4>

08002230 <__errno>:
 8002230:	4b01      	ldr	r3, [pc, #4]	@ (8002238 <__errno+0x8>)
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000030 	.word	0x20000030

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	2600      	movs	r6, #0
 8002240:	4d0c      	ldr	r5, [pc, #48]	@ (8002274 <__libc_init_array+0x38>)
 8002242:	4c0d      	ldr	r4, [pc, #52]	@ (8002278 <__libc_init_array+0x3c>)
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	f000 fc78 	bl	8002b40 <_init>
 8002250:	2600      	movs	r6, #0
 8002252:	4d0a      	ldr	r5, [pc, #40]	@ (800227c <__libc_init_array+0x40>)
 8002254:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <__libc_init_array+0x44>)
 8002256:	1b64      	subs	r4, r4, r5
 8002258:	10a4      	asrs	r4, r4, #2
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	08002bc8 	.word	0x08002bc8
 8002278:	08002bc8 	.word	0x08002bc8
 800227c:	08002bc8 	.word	0x08002bc8
 8002280:	08002bcc 	.word	0x08002bcc

08002284 <__retarget_lock_acquire_recursive>:
 8002284:	4770      	bx	lr

08002286 <__retarget_lock_release_recursive>:
 8002286:	4770      	bx	lr

08002288 <_free_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4605      	mov	r5, r0
 800228c:	2900      	cmp	r1, #0
 800228e:	d040      	beq.n	8002312 <_free_r+0x8a>
 8002290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002294:	1f0c      	subs	r4, r1, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	bfb8      	it	lt
 800229a:	18e4      	addlt	r4, r4, r3
 800229c:	f000 f8de 	bl	800245c <__malloc_lock>
 80022a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002314 <_free_r+0x8c>)
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	b933      	cbnz	r3, 80022b4 <_free_r+0x2c>
 80022a6:	6063      	str	r3, [r4, #4]
 80022a8:	6014      	str	r4, [r2, #0]
 80022aa:	4628      	mov	r0, r5
 80022ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022b0:	f000 b8da 	b.w	8002468 <__malloc_unlock>
 80022b4:	42a3      	cmp	r3, r4
 80022b6:	d908      	bls.n	80022ca <_free_r+0x42>
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	1821      	adds	r1, r4, r0
 80022bc:	428b      	cmp	r3, r1
 80022be:	bf01      	itttt	eq
 80022c0:	6819      	ldreq	r1, [r3, #0]
 80022c2:	685b      	ldreq	r3, [r3, #4]
 80022c4:	1809      	addeq	r1, r1, r0
 80022c6:	6021      	streq	r1, [r4, #0]
 80022c8:	e7ed      	b.n	80022a6 <_free_r+0x1e>
 80022ca:	461a      	mov	r2, r3
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	b10b      	cbz	r3, 80022d4 <_free_r+0x4c>
 80022d0:	42a3      	cmp	r3, r4
 80022d2:	d9fa      	bls.n	80022ca <_free_r+0x42>
 80022d4:	6811      	ldr	r1, [r2, #0]
 80022d6:	1850      	adds	r0, r2, r1
 80022d8:	42a0      	cmp	r0, r4
 80022da:	d10b      	bne.n	80022f4 <_free_r+0x6c>
 80022dc:	6820      	ldr	r0, [r4, #0]
 80022de:	4401      	add	r1, r0
 80022e0:	1850      	adds	r0, r2, r1
 80022e2:	4283      	cmp	r3, r0
 80022e4:	6011      	str	r1, [r2, #0]
 80022e6:	d1e0      	bne.n	80022aa <_free_r+0x22>
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4408      	add	r0, r1
 80022ee:	6010      	str	r0, [r2, #0]
 80022f0:	6053      	str	r3, [r2, #4]
 80022f2:	e7da      	b.n	80022aa <_free_r+0x22>
 80022f4:	d902      	bls.n	80022fc <_free_r+0x74>
 80022f6:	230c      	movs	r3, #12
 80022f8:	602b      	str	r3, [r5, #0]
 80022fa:	e7d6      	b.n	80022aa <_free_r+0x22>
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	1821      	adds	r1, r4, r0
 8002300:	428b      	cmp	r3, r1
 8002302:	bf01      	itttt	eq
 8002304:	6819      	ldreq	r1, [r3, #0]
 8002306:	685b      	ldreq	r3, [r3, #4]
 8002308:	1809      	addeq	r1, r1, r0
 800230a:	6021      	streq	r1, [r4, #0]
 800230c:	6063      	str	r3, [r4, #4]
 800230e:	6054      	str	r4, [r2, #4]
 8002310:	e7cb      	b.n	80022aa <_free_r+0x22>
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	20000278 	.word	0x20000278

08002318 <sbrk_aligned>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4e0f      	ldr	r6, [pc, #60]	@ (8002358 <sbrk_aligned+0x40>)
 800231c:	460c      	mov	r4, r1
 800231e:	6831      	ldr	r1, [r6, #0]
 8002320:	4605      	mov	r5, r0
 8002322:	b911      	cbnz	r1, 800232a <sbrk_aligned+0x12>
 8002324:	f000 fbaa 	bl	8002a7c <_sbrk_r>
 8002328:	6030      	str	r0, [r6, #0]
 800232a:	4621      	mov	r1, r4
 800232c:	4628      	mov	r0, r5
 800232e:	f000 fba5 	bl	8002a7c <_sbrk_r>
 8002332:	1c43      	adds	r3, r0, #1
 8002334:	d103      	bne.n	800233e <sbrk_aligned+0x26>
 8002336:	f04f 34ff 	mov.w	r4, #4294967295
 800233a:	4620      	mov	r0, r4
 800233c:	bd70      	pop	{r4, r5, r6, pc}
 800233e:	1cc4      	adds	r4, r0, #3
 8002340:	f024 0403 	bic.w	r4, r4, #3
 8002344:	42a0      	cmp	r0, r4
 8002346:	d0f8      	beq.n	800233a <sbrk_aligned+0x22>
 8002348:	1a21      	subs	r1, r4, r0
 800234a:	4628      	mov	r0, r5
 800234c:	f000 fb96 	bl	8002a7c <_sbrk_r>
 8002350:	3001      	adds	r0, #1
 8002352:	d1f2      	bne.n	800233a <sbrk_aligned+0x22>
 8002354:	e7ef      	b.n	8002336 <sbrk_aligned+0x1e>
 8002356:	bf00      	nop
 8002358:	20000274 	.word	0x20000274

0800235c <_malloc_r>:
 800235c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002360:	1ccd      	adds	r5, r1, #3
 8002362:	f025 0503 	bic.w	r5, r5, #3
 8002366:	3508      	adds	r5, #8
 8002368:	2d0c      	cmp	r5, #12
 800236a:	bf38      	it	cc
 800236c:	250c      	movcc	r5, #12
 800236e:	2d00      	cmp	r5, #0
 8002370:	4606      	mov	r6, r0
 8002372:	db01      	blt.n	8002378 <_malloc_r+0x1c>
 8002374:	42a9      	cmp	r1, r5
 8002376:	d904      	bls.n	8002382 <_malloc_r+0x26>
 8002378:	230c      	movs	r3, #12
 800237a:	6033      	str	r3, [r6, #0]
 800237c:	2000      	movs	r0, #0
 800237e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002458 <_malloc_r+0xfc>
 8002386:	f000 f869 	bl	800245c <__malloc_lock>
 800238a:	f8d8 3000 	ldr.w	r3, [r8]
 800238e:	461c      	mov	r4, r3
 8002390:	bb44      	cbnz	r4, 80023e4 <_malloc_r+0x88>
 8002392:	4629      	mov	r1, r5
 8002394:	4630      	mov	r0, r6
 8002396:	f7ff ffbf 	bl	8002318 <sbrk_aligned>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	4604      	mov	r4, r0
 800239e:	d158      	bne.n	8002452 <_malloc_r+0xf6>
 80023a0:	f8d8 4000 	ldr.w	r4, [r8]
 80023a4:	4627      	mov	r7, r4
 80023a6:	2f00      	cmp	r7, #0
 80023a8:	d143      	bne.n	8002432 <_malloc_r+0xd6>
 80023aa:	2c00      	cmp	r4, #0
 80023ac:	d04b      	beq.n	8002446 <_malloc_r+0xea>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	4639      	mov	r1, r7
 80023b2:	4630      	mov	r0, r6
 80023b4:	eb04 0903 	add.w	r9, r4, r3
 80023b8:	f000 fb60 	bl	8002a7c <_sbrk_r>
 80023bc:	4581      	cmp	r9, r0
 80023be:	d142      	bne.n	8002446 <_malloc_r+0xea>
 80023c0:	6821      	ldr	r1, [r4, #0]
 80023c2:	4630      	mov	r0, r6
 80023c4:	1a6d      	subs	r5, r5, r1
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7ff ffa6 	bl	8002318 <sbrk_aligned>
 80023cc:	3001      	adds	r0, #1
 80023ce:	d03a      	beq.n	8002446 <_malloc_r+0xea>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	442b      	add	r3, r5
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	f8d8 3000 	ldr.w	r3, [r8]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	bb62      	cbnz	r2, 8002438 <_malloc_r+0xdc>
 80023de:	f8c8 7000 	str.w	r7, [r8]
 80023e2:	e00f      	b.n	8002404 <_malloc_r+0xa8>
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	1b52      	subs	r2, r2, r5
 80023e8:	d420      	bmi.n	800242c <_malloc_r+0xd0>
 80023ea:	2a0b      	cmp	r2, #11
 80023ec:	d917      	bls.n	800241e <_malloc_r+0xc2>
 80023ee:	1961      	adds	r1, r4, r5
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	6025      	str	r5, [r4, #0]
 80023f4:	bf18      	it	ne
 80023f6:	6059      	strne	r1, [r3, #4]
 80023f8:	6863      	ldr	r3, [r4, #4]
 80023fa:	bf08      	it	eq
 80023fc:	f8c8 1000 	streq.w	r1, [r8]
 8002400:	5162      	str	r2, [r4, r5]
 8002402:	604b      	str	r3, [r1, #4]
 8002404:	4630      	mov	r0, r6
 8002406:	f000 f82f 	bl	8002468 <__malloc_unlock>
 800240a:	f104 000b 	add.w	r0, r4, #11
 800240e:	1d23      	adds	r3, r4, #4
 8002410:	f020 0007 	bic.w	r0, r0, #7
 8002414:	1ac2      	subs	r2, r0, r3
 8002416:	bf1c      	itt	ne
 8002418:	1a1b      	subne	r3, r3, r0
 800241a:	50a3      	strne	r3, [r4, r2]
 800241c:	e7af      	b.n	800237e <_malloc_r+0x22>
 800241e:	6862      	ldr	r2, [r4, #4]
 8002420:	42a3      	cmp	r3, r4
 8002422:	bf0c      	ite	eq
 8002424:	f8c8 2000 	streq.w	r2, [r8]
 8002428:	605a      	strne	r2, [r3, #4]
 800242a:	e7eb      	b.n	8002404 <_malloc_r+0xa8>
 800242c:	4623      	mov	r3, r4
 800242e:	6864      	ldr	r4, [r4, #4]
 8002430:	e7ae      	b.n	8002390 <_malloc_r+0x34>
 8002432:	463c      	mov	r4, r7
 8002434:	687f      	ldr	r7, [r7, #4]
 8002436:	e7b6      	b.n	80023a6 <_malloc_r+0x4a>
 8002438:	461a      	mov	r2, r3
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	42a3      	cmp	r3, r4
 800243e:	d1fb      	bne.n	8002438 <_malloc_r+0xdc>
 8002440:	2300      	movs	r3, #0
 8002442:	6053      	str	r3, [r2, #4]
 8002444:	e7de      	b.n	8002404 <_malloc_r+0xa8>
 8002446:	230c      	movs	r3, #12
 8002448:	4630      	mov	r0, r6
 800244a:	6033      	str	r3, [r6, #0]
 800244c:	f000 f80c 	bl	8002468 <__malloc_unlock>
 8002450:	e794      	b.n	800237c <_malloc_r+0x20>
 8002452:	6005      	str	r5, [r0, #0]
 8002454:	e7d6      	b.n	8002404 <_malloc_r+0xa8>
 8002456:	bf00      	nop
 8002458:	20000278 	.word	0x20000278

0800245c <__malloc_lock>:
 800245c:	4801      	ldr	r0, [pc, #4]	@ (8002464 <__malloc_lock+0x8>)
 800245e:	f7ff bf11 	b.w	8002284 <__retarget_lock_acquire_recursive>
 8002462:	bf00      	nop
 8002464:	20000270 	.word	0x20000270

08002468 <__malloc_unlock>:
 8002468:	4801      	ldr	r0, [pc, #4]	@ (8002470 <__malloc_unlock+0x8>)
 800246a:	f7ff bf0c 	b.w	8002286 <__retarget_lock_release_recursive>
 800246e:	bf00      	nop
 8002470:	20000270 	.word	0x20000270

08002474 <__ssputs_r>:
 8002474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002478:	461f      	mov	r7, r3
 800247a:	688e      	ldr	r6, [r1, #8]
 800247c:	4682      	mov	sl, r0
 800247e:	42be      	cmp	r6, r7
 8002480:	460c      	mov	r4, r1
 8002482:	4690      	mov	r8, r2
 8002484:	680b      	ldr	r3, [r1, #0]
 8002486:	d82d      	bhi.n	80024e4 <__ssputs_r+0x70>
 8002488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800248c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002490:	d026      	beq.n	80024e0 <__ssputs_r+0x6c>
 8002492:	6965      	ldr	r5, [r4, #20]
 8002494:	6909      	ldr	r1, [r1, #16]
 8002496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800249a:	eba3 0901 	sub.w	r9, r3, r1
 800249e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024a2:	1c7b      	adds	r3, r7, #1
 80024a4:	444b      	add	r3, r9
 80024a6:	106d      	asrs	r5, r5, #1
 80024a8:	429d      	cmp	r5, r3
 80024aa:	bf38      	it	cc
 80024ac:	461d      	movcc	r5, r3
 80024ae:	0553      	lsls	r3, r2, #21
 80024b0:	d527      	bpl.n	8002502 <__ssputs_r+0x8e>
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7ff ff52 	bl	800235c <_malloc_r>
 80024b8:	4606      	mov	r6, r0
 80024ba:	b360      	cbz	r0, 8002516 <__ssputs_r+0xa2>
 80024bc:	464a      	mov	r2, r9
 80024be:	6921      	ldr	r1, [r4, #16]
 80024c0:	f000 fafa 	bl	8002ab8 <memcpy>
 80024c4:	89a3      	ldrh	r3, [r4, #12]
 80024c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80024ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ce:	81a3      	strh	r3, [r4, #12]
 80024d0:	6126      	str	r6, [r4, #16]
 80024d2:	444e      	add	r6, r9
 80024d4:	6026      	str	r6, [r4, #0]
 80024d6:	463e      	mov	r6, r7
 80024d8:	6165      	str	r5, [r4, #20]
 80024da:	eba5 0509 	sub.w	r5, r5, r9
 80024de:	60a5      	str	r5, [r4, #8]
 80024e0:	42be      	cmp	r6, r7
 80024e2:	d900      	bls.n	80024e6 <__ssputs_r+0x72>
 80024e4:	463e      	mov	r6, r7
 80024e6:	4632      	mov	r2, r6
 80024e8:	4641      	mov	r1, r8
 80024ea:	6820      	ldr	r0, [r4, #0]
 80024ec:	f000 faac 	bl	8002a48 <memmove>
 80024f0:	2000      	movs	r0, #0
 80024f2:	68a3      	ldr	r3, [r4, #8]
 80024f4:	1b9b      	subs	r3, r3, r6
 80024f6:	60a3      	str	r3, [r4, #8]
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	4433      	add	r3, r6
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002502:	462a      	mov	r2, r5
 8002504:	f000 fae6 	bl	8002ad4 <_realloc_r>
 8002508:	4606      	mov	r6, r0
 800250a:	2800      	cmp	r0, #0
 800250c:	d1e0      	bne.n	80024d0 <__ssputs_r+0x5c>
 800250e:	4650      	mov	r0, sl
 8002510:	6921      	ldr	r1, [r4, #16]
 8002512:	f7ff feb9 	bl	8002288 <_free_r>
 8002516:	230c      	movs	r3, #12
 8002518:	f8ca 3000 	str.w	r3, [sl]
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	f04f 30ff 	mov.w	r0, #4294967295
 8002522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002526:	81a3      	strh	r3, [r4, #12]
 8002528:	e7e9      	b.n	80024fe <__ssputs_r+0x8a>
	...

0800252c <_svfiprintf_r>:
 800252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002530:	4698      	mov	r8, r3
 8002532:	898b      	ldrh	r3, [r1, #12]
 8002534:	4607      	mov	r7, r0
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	460d      	mov	r5, r1
 800253a:	4614      	mov	r4, r2
 800253c:	b09d      	sub	sp, #116	@ 0x74
 800253e:	d510      	bpl.n	8002562 <_svfiprintf_r+0x36>
 8002540:	690b      	ldr	r3, [r1, #16]
 8002542:	b973      	cbnz	r3, 8002562 <_svfiprintf_r+0x36>
 8002544:	2140      	movs	r1, #64	@ 0x40
 8002546:	f7ff ff09 	bl	800235c <_malloc_r>
 800254a:	6028      	str	r0, [r5, #0]
 800254c:	6128      	str	r0, [r5, #16]
 800254e:	b930      	cbnz	r0, 800255e <_svfiprintf_r+0x32>
 8002550:	230c      	movs	r3, #12
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	b01d      	add	sp, #116	@ 0x74
 800255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800255e:	2340      	movs	r3, #64	@ 0x40
 8002560:	616b      	str	r3, [r5, #20]
 8002562:	2300      	movs	r3, #0
 8002564:	9309      	str	r3, [sp, #36]	@ 0x24
 8002566:	2320      	movs	r3, #32
 8002568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800256c:	2330      	movs	r3, #48	@ 0x30
 800256e:	f04f 0901 	mov.w	r9, #1
 8002572:	f8cd 800c 	str.w	r8, [sp, #12]
 8002576:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002710 <_svfiprintf_r+0x1e4>
 800257a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800257e:	4623      	mov	r3, r4
 8002580:	469a      	mov	sl, r3
 8002582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002586:	b10a      	cbz	r2, 800258c <_svfiprintf_r+0x60>
 8002588:	2a25      	cmp	r2, #37	@ 0x25
 800258a:	d1f9      	bne.n	8002580 <_svfiprintf_r+0x54>
 800258c:	ebba 0b04 	subs.w	fp, sl, r4
 8002590:	d00b      	beq.n	80025aa <_svfiprintf_r+0x7e>
 8002592:	465b      	mov	r3, fp
 8002594:	4622      	mov	r2, r4
 8002596:	4629      	mov	r1, r5
 8002598:	4638      	mov	r0, r7
 800259a:	f7ff ff6b 	bl	8002474 <__ssputs_r>
 800259e:	3001      	adds	r0, #1
 80025a0:	f000 80a7 	beq.w	80026f2 <_svfiprintf_r+0x1c6>
 80025a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025a6:	445a      	add	r2, fp
 80025a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80025aa:	f89a 3000 	ldrb.w	r3, [sl]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 809f 	beq.w	80026f2 <_svfiprintf_r+0x1c6>
 80025b4:	2300      	movs	r3, #0
 80025b6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025be:	f10a 0a01 	add.w	sl, sl, #1
 80025c2:	9304      	str	r3, [sp, #16]
 80025c4:	9307      	str	r3, [sp, #28]
 80025c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80025cc:	4654      	mov	r4, sl
 80025ce:	2205      	movs	r2, #5
 80025d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d4:	484e      	ldr	r0, [pc, #312]	@ (8002710 <_svfiprintf_r+0x1e4>)
 80025d6:	f000 fa61 	bl	8002a9c <memchr>
 80025da:	9a04      	ldr	r2, [sp, #16]
 80025dc:	b9d8      	cbnz	r0, 8002616 <_svfiprintf_r+0xea>
 80025de:	06d0      	lsls	r0, r2, #27
 80025e0:	bf44      	itt	mi
 80025e2:	2320      	movmi	r3, #32
 80025e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025e8:	0711      	lsls	r1, r2, #28
 80025ea:	bf44      	itt	mi
 80025ec:	232b      	movmi	r3, #43	@ 0x2b
 80025ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025f2:	f89a 3000 	ldrb.w	r3, [sl]
 80025f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80025f8:	d015      	beq.n	8002626 <_svfiprintf_r+0xfa>
 80025fa:	4654      	mov	r4, sl
 80025fc:	2000      	movs	r0, #0
 80025fe:	f04f 0c0a 	mov.w	ip, #10
 8002602:	9a07      	ldr	r2, [sp, #28]
 8002604:	4621      	mov	r1, r4
 8002606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800260a:	3b30      	subs	r3, #48	@ 0x30
 800260c:	2b09      	cmp	r3, #9
 800260e:	d94b      	bls.n	80026a8 <_svfiprintf_r+0x17c>
 8002610:	b1b0      	cbz	r0, 8002640 <_svfiprintf_r+0x114>
 8002612:	9207      	str	r2, [sp, #28]
 8002614:	e014      	b.n	8002640 <_svfiprintf_r+0x114>
 8002616:	eba0 0308 	sub.w	r3, r0, r8
 800261a:	fa09 f303 	lsl.w	r3, r9, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	46a2      	mov	sl, r4
 8002622:	9304      	str	r3, [sp, #16]
 8002624:	e7d2      	b.n	80025cc <_svfiprintf_r+0xa0>
 8002626:	9b03      	ldr	r3, [sp, #12]
 8002628:	1d19      	adds	r1, r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	9103      	str	r1, [sp, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	bfbb      	ittet	lt
 8002632:	425b      	neglt	r3, r3
 8002634:	f042 0202 	orrlt.w	r2, r2, #2
 8002638:	9307      	strge	r3, [sp, #28]
 800263a:	9307      	strlt	r3, [sp, #28]
 800263c:	bfb8      	it	lt
 800263e:	9204      	strlt	r2, [sp, #16]
 8002640:	7823      	ldrb	r3, [r4, #0]
 8002642:	2b2e      	cmp	r3, #46	@ 0x2e
 8002644:	d10a      	bne.n	800265c <_svfiprintf_r+0x130>
 8002646:	7863      	ldrb	r3, [r4, #1]
 8002648:	2b2a      	cmp	r3, #42	@ 0x2a
 800264a:	d132      	bne.n	80026b2 <_svfiprintf_r+0x186>
 800264c:	9b03      	ldr	r3, [sp, #12]
 800264e:	3402      	adds	r4, #2
 8002650:	1d1a      	adds	r2, r3, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	9203      	str	r2, [sp, #12]
 8002656:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800265a:	9305      	str	r3, [sp, #20]
 800265c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002714 <_svfiprintf_r+0x1e8>
 8002660:	2203      	movs	r2, #3
 8002662:	4650      	mov	r0, sl
 8002664:	7821      	ldrb	r1, [r4, #0]
 8002666:	f000 fa19 	bl	8002a9c <memchr>
 800266a:	b138      	cbz	r0, 800267c <_svfiprintf_r+0x150>
 800266c:	2240      	movs	r2, #64	@ 0x40
 800266e:	9b04      	ldr	r3, [sp, #16]
 8002670:	eba0 000a 	sub.w	r0, r0, sl
 8002674:	4082      	lsls	r2, r0
 8002676:	4313      	orrs	r3, r2
 8002678:	3401      	adds	r4, #1
 800267a:	9304      	str	r3, [sp, #16]
 800267c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002680:	2206      	movs	r2, #6
 8002682:	4825      	ldr	r0, [pc, #148]	@ (8002718 <_svfiprintf_r+0x1ec>)
 8002684:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002688:	f000 fa08 	bl	8002a9c <memchr>
 800268c:	2800      	cmp	r0, #0
 800268e:	d036      	beq.n	80026fe <_svfiprintf_r+0x1d2>
 8002690:	4b22      	ldr	r3, [pc, #136]	@ (800271c <_svfiprintf_r+0x1f0>)
 8002692:	bb1b      	cbnz	r3, 80026dc <_svfiprintf_r+0x1b0>
 8002694:	9b03      	ldr	r3, [sp, #12]
 8002696:	3307      	adds	r3, #7
 8002698:	f023 0307 	bic.w	r3, r3, #7
 800269c:	3308      	adds	r3, #8
 800269e:	9303      	str	r3, [sp, #12]
 80026a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026a2:	4433      	add	r3, r6
 80026a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80026a6:	e76a      	b.n	800257e <_svfiprintf_r+0x52>
 80026a8:	460c      	mov	r4, r1
 80026aa:	2001      	movs	r0, #1
 80026ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80026b0:	e7a8      	b.n	8002604 <_svfiprintf_r+0xd8>
 80026b2:	2300      	movs	r3, #0
 80026b4:	f04f 0c0a 	mov.w	ip, #10
 80026b8:	4619      	mov	r1, r3
 80026ba:	3401      	adds	r4, #1
 80026bc:	9305      	str	r3, [sp, #20]
 80026be:	4620      	mov	r0, r4
 80026c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026c4:	3a30      	subs	r2, #48	@ 0x30
 80026c6:	2a09      	cmp	r2, #9
 80026c8:	d903      	bls.n	80026d2 <_svfiprintf_r+0x1a6>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0c6      	beq.n	800265c <_svfiprintf_r+0x130>
 80026ce:	9105      	str	r1, [sp, #20]
 80026d0:	e7c4      	b.n	800265c <_svfiprintf_r+0x130>
 80026d2:	4604      	mov	r4, r0
 80026d4:	2301      	movs	r3, #1
 80026d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80026da:	e7f0      	b.n	80026be <_svfiprintf_r+0x192>
 80026dc:	ab03      	add	r3, sp, #12
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	462a      	mov	r2, r5
 80026e2:	4638      	mov	r0, r7
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <_svfiprintf_r+0x1f4>)
 80026e6:	a904      	add	r1, sp, #16
 80026e8:	f3af 8000 	nop.w
 80026ec:	1c42      	adds	r2, r0, #1
 80026ee:	4606      	mov	r6, r0
 80026f0:	d1d6      	bne.n	80026a0 <_svfiprintf_r+0x174>
 80026f2:	89ab      	ldrh	r3, [r5, #12]
 80026f4:	065b      	lsls	r3, r3, #25
 80026f6:	f53f af2d 	bmi.w	8002554 <_svfiprintf_r+0x28>
 80026fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80026fc:	e72c      	b.n	8002558 <_svfiprintf_r+0x2c>
 80026fe:	ab03      	add	r3, sp, #12
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	462a      	mov	r2, r5
 8002704:	4638      	mov	r0, r7
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <_svfiprintf_r+0x1f4>)
 8002708:	a904      	add	r1, sp, #16
 800270a:	f000 f87d 	bl	8002808 <_printf_i>
 800270e:	e7ed      	b.n	80026ec <_svfiprintf_r+0x1c0>
 8002710:	08002b92 	.word	0x08002b92
 8002714:	08002b98 	.word	0x08002b98
 8002718:	08002b9c 	.word	0x08002b9c
 800271c:	00000000 	.word	0x00000000
 8002720:	08002475 	.word	0x08002475

08002724 <_printf_common>:
 8002724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002728:	4616      	mov	r6, r2
 800272a:	4698      	mov	r8, r3
 800272c:	688a      	ldr	r2, [r1, #8]
 800272e:	690b      	ldr	r3, [r1, #16]
 8002730:	4607      	mov	r7, r0
 8002732:	4293      	cmp	r3, r2
 8002734:	bfb8      	it	lt
 8002736:	4613      	movlt	r3, r2
 8002738:	6033      	str	r3, [r6, #0]
 800273a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800273e:	460c      	mov	r4, r1
 8002740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002744:	b10a      	cbz	r2, 800274a <_printf_common+0x26>
 8002746:	3301      	adds	r3, #1
 8002748:	6033      	str	r3, [r6, #0]
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	0699      	lsls	r1, r3, #26
 800274e:	bf42      	ittt	mi
 8002750:	6833      	ldrmi	r3, [r6, #0]
 8002752:	3302      	addmi	r3, #2
 8002754:	6033      	strmi	r3, [r6, #0]
 8002756:	6825      	ldr	r5, [r4, #0]
 8002758:	f015 0506 	ands.w	r5, r5, #6
 800275c:	d106      	bne.n	800276c <_printf_common+0x48>
 800275e:	f104 0a19 	add.w	sl, r4, #25
 8002762:	68e3      	ldr	r3, [r4, #12]
 8002764:	6832      	ldr	r2, [r6, #0]
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	42ab      	cmp	r3, r5
 800276a:	dc2b      	bgt.n	80027c4 <_printf_common+0xa0>
 800276c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002770:	6822      	ldr	r2, [r4, #0]
 8002772:	3b00      	subs	r3, #0
 8002774:	bf18      	it	ne
 8002776:	2301      	movne	r3, #1
 8002778:	0692      	lsls	r2, r2, #26
 800277a:	d430      	bmi.n	80027de <_printf_common+0xba>
 800277c:	4641      	mov	r1, r8
 800277e:	4638      	mov	r0, r7
 8002780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002784:	47c8      	blx	r9
 8002786:	3001      	adds	r0, #1
 8002788:	d023      	beq.n	80027d2 <_printf_common+0xae>
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	6922      	ldr	r2, [r4, #16]
 800278e:	f003 0306 	and.w	r3, r3, #6
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf14      	ite	ne
 8002796:	2500      	movne	r5, #0
 8002798:	6833      	ldreq	r3, [r6, #0]
 800279a:	f04f 0600 	mov.w	r6, #0
 800279e:	bf08      	it	eq
 80027a0:	68e5      	ldreq	r5, [r4, #12]
 80027a2:	f104 041a 	add.w	r4, r4, #26
 80027a6:	bf08      	it	eq
 80027a8:	1aed      	subeq	r5, r5, r3
 80027aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027ae:	bf08      	it	eq
 80027b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bfc4      	itt	gt
 80027b8:	1a9b      	subgt	r3, r3, r2
 80027ba:	18ed      	addgt	r5, r5, r3
 80027bc:	42b5      	cmp	r5, r6
 80027be:	d11a      	bne.n	80027f6 <_printf_common+0xd2>
 80027c0:	2000      	movs	r0, #0
 80027c2:	e008      	b.n	80027d6 <_printf_common+0xb2>
 80027c4:	2301      	movs	r3, #1
 80027c6:	4652      	mov	r2, sl
 80027c8:	4641      	mov	r1, r8
 80027ca:	4638      	mov	r0, r7
 80027cc:	47c8      	blx	r9
 80027ce:	3001      	adds	r0, #1
 80027d0:	d103      	bne.n	80027da <_printf_common+0xb6>
 80027d2:	f04f 30ff 	mov.w	r0, #4294967295
 80027d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027da:	3501      	adds	r5, #1
 80027dc:	e7c1      	b.n	8002762 <_printf_common+0x3e>
 80027de:	2030      	movs	r0, #48	@ 0x30
 80027e0:	18e1      	adds	r1, r4, r3
 80027e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027ec:	4422      	add	r2, r4
 80027ee:	3302      	adds	r3, #2
 80027f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027f4:	e7c2      	b.n	800277c <_printf_common+0x58>
 80027f6:	2301      	movs	r3, #1
 80027f8:	4622      	mov	r2, r4
 80027fa:	4641      	mov	r1, r8
 80027fc:	4638      	mov	r0, r7
 80027fe:	47c8      	blx	r9
 8002800:	3001      	adds	r0, #1
 8002802:	d0e6      	beq.n	80027d2 <_printf_common+0xae>
 8002804:	3601      	adds	r6, #1
 8002806:	e7d9      	b.n	80027bc <_printf_common+0x98>

08002808 <_printf_i>:
 8002808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800280c:	7e0f      	ldrb	r7, [r1, #24]
 800280e:	4691      	mov	r9, r2
 8002810:	2f78      	cmp	r7, #120	@ 0x78
 8002812:	4680      	mov	r8, r0
 8002814:	460c      	mov	r4, r1
 8002816:	469a      	mov	sl, r3
 8002818:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800281a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800281e:	d807      	bhi.n	8002830 <_printf_i+0x28>
 8002820:	2f62      	cmp	r7, #98	@ 0x62
 8002822:	d80a      	bhi.n	800283a <_printf_i+0x32>
 8002824:	2f00      	cmp	r7, #0
 8002826:	f000 80d3 	beq.w	80029d0 <_printf_i+0x1c8>
 800282a:	2f58      	cmp	r7, #88	@ 0x58
 800282c:	f000 80ba 	beq.w	80029a4 <_printf_i+0x19c>
 8002830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002838:	e03a      	b.n	80028b0 <_printf_i+0xa8>
 800283a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800283e:	2b15      	cmp	r3, #21
 8002840:	d8f6      	bhi.n	8002830 <_printf_i+0x28>
 8002842:	a101      	add	r1, pc, #4	@ (adr r1, 8002848 <_printf_i+0x40>)
 8002844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002848:	080028a1 	.word	0x080028a1
 800284c:	080028b5 	.word	0x080028b5
 8002850:	08002831 	.word	0x08002831
 8002854:	08002831 	.word	0x08002831
 8002858:	08002831 	.word	0x08002831
 800285c:	08002831 	.word	0x08002831
 8002860:	080028b5 	.word	0x080028b5
 8002864:	08002831 	.word	0x08002831
 8002868:	08002831 	.word	0x08002831
 800286c:	08002831 	.word	0x08002831
 8002870:	08002831 	.word	0x08002831
 8002874:	080029b7 	.word	0x080029b7
 8002878:	080028df 	.word	0x080028df
 800287c:	08002971 	.word	0x08002971
 8002880:	08002831 	.word	0x08002831
 8002884:	08002831 	.word	0x08002831
 8002888:	080029d9 	.word	0x080029d9
 800288c:	08002831 	.word	0x08002831
 8002890:	080028df 	.word	0x080028df
 8002894:	08002831 	.word	0x08002831
 8002898:	08002831 	.word	0x08002831
 800289c:	08002979 	.word	0x08002979
 80028a0:	6833      	ldr	r3, [r6, #0]
 80028a2:	1d1a      	adds	r2, r3, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6032      	str	r2, [r6, #0]
 80028a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028b0:	2301      	movs	r3, #1
 80028b2:	e09e      	b.n	80029f2 <_printf_i+0x1ea>
 80028b4:	6833      	ldr	r3, [r6, #0]
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	1d19      	adds	r1, r3, #4
 80028ba:	6031      	str	r1, [r6, #0]
 80028bc:	0606      	lsls	r6, r0, #24
 80028be:	d501      	bpl.n	80028c4 <_printf_i+0xbc>
 80028c0:	681d      	ldr	r5, [r3, #0]
 80028c2:	e003      	b.n	80028cc <_printf_i+0xc4>
 80028c4:	0645      	lsls	r5, r0, #25
 80028c6:	d5fb      	bpl.n	80028c0 <_printf_i+0xb8>
 80028c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028cc:	2d00      	cmp	r5, #0
 80028ce:	da03      	bge.n	80028d8 <_printf_i+0xd0>
 80028d0:	232d      	movs	r3, #45	@ 0x2d
 80028d2:	426d      	negs	r5, r5
 80028d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028d8:	230a      	movs	r3, #10
 80028da:	4859      	ldr	r0, [pc, #356]	@ (8002a40 <_printf_i+0x238>)
 80028dc:	e011      	b.n	8002902 <_printf_i+0xfa>
 80028de:	6821      	ldr	r1, [r4, #0]
 80028e0:	6833      	ldr	r3, [r6, #0]
 80028e2:	0608      	lsls	r0, r1, #24
 80028e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80028e8:	d402      	bmi.n	80028f0 <_printf_i+0xe8>
 80028ea:	0649      	lsls	r1, r1, #25
 80028ec:	bf48      	it	mi
 80028ee:	b2ad      	uxthmi	r5, r5
 80028f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80028f2:	6033      	str	r3, [r6, #0]
 80028f4:	bf14      	ite	ne
 80028f6:	230a      	movne	r3, #10
 80028f8:	2308      	moveq	r3, #8
 80028fa:	4851      	ldr	r0, [pc, #324]	@ (8002a40 <_printf_i+0x238>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002902:	6866      	ldr	r6, [r4, #4]
 8002904:	2e00      	cmp	r6, #0
 8002906:	bfa8      	it	ge
 8002908:	6821      	ldrge	r1, [r4, #0]
 800290a:	60a6      	str	r6, [r4, #8]
 800290c:	bfa4      	itt	ge
 800290e:	f021 0104 	bicge.w	r1, r1, #4
 8002912:	6021      	strge	r1, [r4, #0]
 8002914:	b90d      	cbnz	r5, 800291a <_printf_i+0x112>
 8002916:	2e00      	cmp	r6, #0
 8002918:	d04b      	beq.n	80029b2 <_printf_i+0x1aa>
 800291a:	4616      	mov	r6, r2
 800291c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002920:	fb03 5711 	mls	r7, r3, r1, r5
 8002924:	5dc7      	ldrb	r7, [r0, r7]
 8002926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800292a:	462f      	mov	r7, r5
 800292c:	42bb      	cmp	r3, r7
 800292e:	460d      	mov	r5, r1
 8002930:	d9f4      	bls.n	800291c <_printf_i+0x114>
 8002932:	2b08      	cmp	r3, #8
 8002934:	d10b      	bne.n	800294e <_printf_i+0x146>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	07df      	lsls	r7, r3, #31
 800293a:	d508      	bpl.n	800294e <_printf_i+0x146>
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	6861      	ldr	r1, [r4, #4]
 8002940:	4299      	cmp	r1, r3
 8002942:	bfde      	ittt	le
 8002944:	2330      	movle	r3, #48	@ 0x30
 8002946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800294a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800294e:	1b92      	subs	r2, r2, r6
 8002950:	6122      	str	r2, [r4, #16]
 8002952:	464b      	mov	r3, r9
 8002954:	4621      	mov	r1, r4
 8002956:	4640      	mov	r0, r8
 8002958:	f8cd a000 	str.w	sl, [sp]
 800295c:	aa03      	add	r2, sp, #12
 800295e:	f7ff fee1 	bl	8002724 <_printf_common>
 8002962:	3001      	adds	r0, #1
 8002964:	d14a      	bne.n	80029fc <_printf_i+0x1f4>
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	b004      	add	sp, #16
 800296c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	2778      	movs	r7, #120	@ 0x78
 800297a:	4832      	ldr	r0, [pc, #200]	@ (8002a44 <_printf_i+0x23c>)
 800297c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	6831      	ldr	r1, [r6, #0]
 8002984:	061f      	lsls	r7, r3, #24
 8002986:	f851 5b04 	ldr.w	r5, [r1], #4
 800298a:	d402      	bmi.n	8002992 <_printf_i+0x18a>
 800298c:	065f      	lsls	r7, r3, #25
 800298e:	bf48      	it	mi
 8002990:	b2ad      	uxthmi	r5, r5
 8002992:	6031      	str	r1, [r6, #0]
 8002994:	07d9      	lsls	r1, r3, #31
 8002996:	bf44      	itt	mi
 8002998:	f043 0320 	orrmi.w	r3, r3, #32
 800299c:	6023      	strmi	r3, [r4, #0]
 800299e:	b11d      	cbz	r5, 80029a8 <_printf_i+0x1a0>
 80029a0:	2310      	movs	r3, #16
 80029a2:	e7ab      	b.n	80028fc <_printf_i+0xf4>
 80029a4:	4826      	ldr	r0, [pc, #152]	@ (8002a40 <_printf_i+0x238>)
 80029a6:	e7e9      	b.n	800297c <_printf_i+0x174>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f023 0320 	bic.w	r3, r3, #32
 80029ae:	6023      	str	r3, [r4, #0]
 80029b0:	e7f6      	b.n	80029a0 <_printf_i+0x198>
 80029b2:	4616      	mov	r6, r2
 80029b4:	e7bd      	b.n	8002932 <_printf_i+0x12a>
 80029b6:	6833      	ldr	r3, [r6, #0]
 80029b8:	6825      	ldr	r5, [r4, #0]
 80029ba:	1d18      	adds	r0, r3, #4
 80029bc:	6961      	ldr	r1, [r4, #20]
 80029be:	6030      	str	r0, [r6, #0]
 80029c0:	062e      	lsls	r6, r5, #24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	d501      	bpl.n	80029ca <_printf_i+0x1c2>
 80029c6:	6019      	str	r1, [r3, #0]
 80029c8:	e002      	b.n	80029d0 <_printf_i+0x1c8>
 80029ca:	0668      	lsls	r0, r5, #25
 80029cc:	d5fb      	bpl.n	80029c6 <_printf_i+0x1be>
 80029ce:	8019      	strh	r1, [r3, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	4616      	mov	r6, r2
 80029d4:	6123      	str	r3, [r4, #16]
 80029d6:	e7bc      	b.n	8002952 <_printf_i+0x14a>
 80029d8:	6833      	ldr	r3, [r6, #0]
 80029da:	2100      	movs	r1, #0
 80029dc:	1d1a      	adds	r2, r3, #4
 80029de:	6032      	str	r2, [r6, #0]
 80029e0:	681e      	ldr	r6, [r3, #0]
 80029e2:	6862      	ldr	r2, [r4, #4]
 80029e4:	4630      	mov	r0, r6
 80029e6:	f000 f859 	bl	8002a9c <memchr>
 80029ea:	b108      	cbz	r0, 80029f0 <_printf_i+0x1e8>
 80029ec:	1b80      	subs	r0, r0, r6
 80029ee:	6060      	str	r0, [r4, #4]
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	6123      	str	r3, [r4, #16]
 80029f4:	2300      	movs	r3, #0
 80029f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029fa:	e7aa      	b.n	8002952 <_printf_i+0x14a>
 80029fc:	4632      	mov	r2, r6
 80029fe:	4649      	mov	r1, r9
 8002a00:	4640      	mov	r0, r8
 8002a02:	6923      	ldr	r3, [r4, #16]
 8002a04:	47d0      	blx	sl
 8002a06:	3001      	adds	r0, #1
 8002a08:	d0ad      	beq.n	8002966 <_printf_i+0x15e>
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	079b      	lsls	r3, r3, #30
 8002a0e:	d413      	bmi.n	8002a38 <_printf_i+0x230>
 8002a10:	68e0      	ldr	r0, [r4, #12]
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	4298      	cmp	r0, r3
 8002a16:	bfb8      	it	lt
 8002a18:	4618      	movlt	r0, r3
 8002a1a:	e7a6      	b.n	800296a <_printf_i+0x162>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	4632      	mov	r2, r6
 8002a20:	4649      	mov	r1, r9
 8002a22:	4640      	mov	r0, r8
 8002a24:	47d0      	blx	sl
 8002a26:	3001      	adds	r0, #1
 8002a28:	d09d      	beq.n	8002966 <_printf_i+0x15e>
 8002a2a:	3501      	adds	r5, #1
 8002a2c:	68e3      	ldr	r3, [r4, #12]
 8002a2e:	9903      	ldr	r1, [sp, #12]
 8002a30:	1a5b      	subs	r3, r3, r1
 8002a32:	42ab      	cmp	r3, r5
 8002a34:	dcf2      	bgt.n	8002a1c <_printf_i+0x214>
 8002a36:	e7eb      	b.n	8002a10 <_printf_i+0x208>
 8002a38:	2500      	movs	r5, #0
 8002a3a:	f104 0619 	add.w	r6, r4, #25
 8002a3e:	e7f5      	b.n	8002a2c <_printf_i+0x224>
 8002a40:	08002ba3 	.word	0x08002ba3
 8002a44:	08002bb4 	.word	0x08002bb4

08002a48 <memmove>:
 8002a48:	4288      	cmp	r0, r1
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	eb01 0402 	add.w	r4, r1, r2
 8002a50:	d902      	bls.n	8002a58 <memmove+0x10>
 8002a52:	4284      	cmp	r4, r0
 8002a54:	4623      	mov	r3, r4
 8002a56:	d807      	bhi.n	8002a68 <memmove+0x20>
 8002a58:	1e43      	subs	r3, r0, #1
 8002a5a:	42a1      	cmp	r1, r4
 8002a5c:	d008      	beq.n	8002a70 <memmove+0x28>
 8002a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a66:	e7f8      	b.n	8002a5a <memmove+0x12>
 8002a68:	4601      	mov	r1, r0
 8002a6a:	4402      	add	r2, r0
 8002a6c:	428a      	cmp	r2, r1
 8002a6e:	d100      	bne.n	8002a72 <memmove+0x2a>
 8002a70:	bd10      	pop	{r4, pc}
 8002a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a7a:	e7f7      	b.n	8002a6c <memmove+0x24>

08002a7c <_sbrk_r>:
 8002a7c:	b538      	push	{r3, r4, r5, lr}
 8002a7e:	2300      	movs	r3, #0
 8002a80:	4d05      	ldr	r5, [pc, #20]	@ (8002a98 <_sbrk_r+0x1c>)
 8002a82:	4604      	mov	r4, r0
 8002a84:	4608      	mov	r0, r1
 8002a86:	602b      	str	r3, [r5, #0]
 8002a88:	f7fd fdd0 	bl	800062c <_sbrk>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d102      	bne.n	8002a96 <_sbrk_r+0x1a>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	b103      	cbz	r3, 8002a96 <_sbrk_r+0x1a>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
 8002a98:	2000026c 	.word	0x2000026c

08002a9c <memchr>:
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	b510      	push	{r4, lr}
 8002aa0:	b2c9      	uxtb	r1, r1
 8002aa2:	4402      	add	r2, r0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	d101      	bne.n	8002aae <memchr+0x12>
 8002aaa:	2000      	movs	r0, #0
 8002aac:	e003      	b.n	8002ab6 <memchr+0x1a>
 8002aae:	7804      	ldrb	r4, [r0, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	428c      	cmp	r4, r1
 8002ab4:	d1f6      	bne.n	8002aa4 <memchr+0x8>
 8002ab6:	bd10      	pop	{r4, pc}

08002ab8 <memcpy>:
 8002ab8:	440a      	add	r2, r1
 8002aba:	4291      	cmp	r1, r2
 8002abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ac0:	d100      	bne.n	8002ac4 <memcpy+0xc>
 8002ac2:	4770      	bx	lr
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002aca:	4291      	cmp	r1, r2
 8002acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ad0:	d1f9      	bne.n	8002ac6 <memcpy+0xe>
 8002ad2:	bd10      	pop	{r4, pc}

08002ad4 <_realloc_r>:
 8002ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad8:	4680      	mov	r8, r0
 8002ada:	4615      	mov	r5, r2
 8002adc:	460c      	mov	r4, r1
 8002ade:	b921      	cbnz	r1, 8002aea <_realloc_r+0x16>
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae6:	f7ff bc39 	b.w	800235c <_malloc_r>
 8002aea:	b92a      	cbnz	r2, 8002af8 <_realloc_r+0x24>
 8002aec:	f7ff fbcc 	bl	8002288 <_free_r>
 8002af0:	2400      	movs	r4, #0
 8002af2:	4620      	mov	r0, r4
 8002af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002af8:	f000 f81a 	bl	8002b30 <_malloc_usable_size_r>
 8002afc:	4285      	cmp	r5, r0
 8002afe:	4606      	mov	r6, r0
 8002b00:	d802      	bhi.n	8002b08 <_realloc_r+0x34>
 8002b02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002b06:	d8f4      	bhi.n	8002af2 <_realloc_r+0x1e>
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4640      	mov	r0, r8
 8002b0c:	f7ff fc26 	bl	800235c <_malloc_r>
 8002b10:	4607      	mov	r7, r0
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d0ec      	beq.n	8002af0 <_realloc_r+0x1c>
 8002b16:	42b5      	cmp	r5, r6
 8002b18:	462a      	mov	r2, r5
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	bf28      	it	cs
 8002b1e:	4632      	movcs	r2, r6
 8002b20:	f7ff ffca 	bl	8002ab8 <memcpy>
 8002b24:	4621      	mov	r1, r4
 8002b26:	4640      	mov	r0, r8
 8002b28:	f7ff fbae 	bl	8002288 <_free_r>
 8002b2c:	463c      	mov	r4, r7
 8002b2e:	e7e0      	b.n	8002af2 <_realloc_r+0x1e>

08002b30 <_malloc_usable_size_r>:
 8002b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b34:	1f18      	subs	r0, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfbc      	itt	lt
 8002b3a:	580b      	ldrlt	r3, [r1, r0]
 8002b3c:	18c0      	addlt	r0, r0, r3
 8002b3e:	4770      	bx	lr

08002b40 <_init>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr

08002b4c <_fini>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr
